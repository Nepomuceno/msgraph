/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphUserIdentity struct for MicrosoftGraphUserIdentity
type MicrosoftGraphUserIdentity struct {
	Id *string `json:"id,omitempty"`
	isExplicitNullId bool `json:"-"`
	DisplayName *string `json:"displayName,omitempty"`
	isExplicitNullDisplayName bool `json:"-"`
	IpAddress *string `json:"ipAddress,omitempty"`
	isExplicitNullIpAddress bool `json:"-"`
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	isExplicitNullUserPrincipalName bool `json:"-"`
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUserIdentity) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUserIdentity) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphUserIdentity) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphUserIdentity) SetId(v string) {
	o.Id = &v
}

// SetIdExplicitNull (un)sets Id to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Id value is set to nil even if false is passed
func (o *MicrosoftGraphUserIdentity) SetIdExplicitNull(b bool) {
	o.Id = nil
	o.isExplicitNullId = b
}
// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUserIdentity) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUserIdentity) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphUserIdentity) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MicrosoftGraphUserIdentity) SetDisplayName(v string) {
	o.DisplayName = &v
}

// SetDisplayNameExplicitNull (un)sets DisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DisplayName value is set to nil even if false is passed
func (o *MicrosoftGraphUserIdentity) SetDisplayNameExplicitNull(b bool) {
	o.DisplayName = nil
	o.isExplicitNullDisplayName = b
}
// GetIpAddress returns the IpAddress field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUserIdentity) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUserIdentity) GetIpAddressOk() (string, bool) {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret, false
	}
	return *o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *MicrosoftGraphUserIdentity) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *MicrosoftGraphUserIdentity) SetIpAddress(v string) {
	o.IpAddress = &v
}

// SetIpAddressExplicitNull (un)sets IpAddress to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IpAddress value is set to nil even if false is passed
func (o *MicrosoftGraphUserIdentity) SetIpAddressExplicitNull(b bool) {
	o.IpAddress = nil
	o.isExplicitNullIpAddress = b
}
// GetUserPrincipalName returns the UserPrincipalName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUserIdentity) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUserIdentity) GetUserPrincipalNameOk() (string, bool) {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret, false
	}
	return *o.UserPrincipalName, true
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *MicrosoftGraphUserIdentity) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName != nil {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given string and assigns it to the UserPrincipalName field.
func (o *MicrosoftGraphUserIdentity) SetUserPrincipalName(v string) {
	o.UserPrincipalName = &v
}

// SetUserPrincipalNameExplicitNull (un)sets UserPrincipalName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserPrincipalName value is set to nil even if false is passed
func (o *MicrosoftGraphUserIdentity) SetUserPrincipalNameExplicitNull(b bool) {
	o.UserPrincipalName = nil
	o.isExplicitNullUserPrincipalName = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphUserIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id == nil {
		if o.isExplicitNullId {
			toSerialize["id"] = o.Id
		}
	} else {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName == nil {
		if o.isExplicitNullDisplayName {
			toSerialize["displayName"] = o.DisplayName
		}
	} else {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.IpAddress == nil {
		if o.isExplicitNullIpAddress {
			toSerialize["ipAddress"] = o.IpAddress
		}
	} else {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.UserPrincipalName == nil {
		if o.isExplicitNullUserPrincipalName {
			toSerialize["userPrincipalName"] = o.UserPrincipalName
		}
	} else {
		toSerialize["userPrincipalName"] = o.UserPrincipalName
	}
	return json.Marshal(toSerialize)
}


