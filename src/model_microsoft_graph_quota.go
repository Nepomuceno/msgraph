/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphQuota struct for MicrosoftGraphQuota
type MicrosoftGraphQuota struct {
	Deleted *int64 `json:"deleted,omitempty"`
	isExplicitNullDeleted bool `json:"-"`
	Remaining *int64 `json:"remaining,omitempty"`
	isExplicitNullRemaining bool `json:"-"`
	State *string `json:"state,omitempty"`
	isExplicitNullState bool `json:"-"`
	Total *int64 `json:"total,omitempty"`
	isExplicitNullTotal bool `json:"-"`
	Used *int64 `json:"used,omitempty"`
	isExplicitNullUsed bool `json:"-"`
}

// GetDeleted returns the Deleted field if non-nil, zero value otherwise.
func (o *MicrosoftGraphQuota) GetDeleted() int64 {
	if o == nil || o.Deleted == nil {
		var ret int64
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphQuota) GetDeletedOk() (int64, bool) {
	if o == nil || o.Deleted == nil {
		var ret int64
		return ret, false
	}
	return *o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int64 and assigns it to the Deleted field.
func (o *MicrosoftGraphQuota) SetDeleted(v int64) {
	o.Deleted = &v
}

// SetDeletedExplicitNull (un)sets Deleted to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Deleted value is set to nil even if false is passed
func (o *MicrosoftGraphQuota) SetDeletedExplicitNull(b bool) {
	o.Deleted = nil
	o.isExplicitNullDeleted = b
}
// GetRemaining returns the Remaining field if non-nil, zero value otherwise.
func (o *MicrosoftGraphQuota) GetRemaining() int64 {
	if o == nil || o.Remaining == nil {
		var ret int64
		return ret
	}
	return *o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphQuota) GetRemainingOk() (int64, bool) {
	if o == nil || o.Remaining == nil {
		var ret int64
		return ret, false
	}
	return *o.Remaining, true
}

// HasRemaining returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasRemaining() bool {
	if o != nil && o.Remaining != nil {
		return true
	}

	return false
}

// SetRemaining gets a reference to the given int64 and assigns it to the Remaining field.
func (o *MicrosoftGraphQuota) SetRemaining(v int64) {
	o.Remaining = &v
}

// SetRemainingExplicitNull (un)sets Remaining to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Remaining value is set to nil even if false is passed
func (o *MicrosoftGraphQuota) SetRemainingExplicitNull(b bool) {
	o.Remaining = nil
	o.isExplicitNullRemaining = b
}
// GetState returns the State field if non-nil, zero value otherwise.
func (o *MicrosoftGraphQuota) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphQuota) GetStateOk() (string, bool) {
	if o == nil || o.State == nil {
		var ret string
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MicrosoftGraphQuota) SetState(v string) {
	o.State = &v
}

// SetStateExplicitNull (un)sets State to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The State value is set to nil even if false is passed
func (o *MicrosoftGraphQuota) SetStateExplicitNull(b bool) {
	o.State = nil
	o.isExplicitNullState = b
}
// GetTotal returns the Total field if non-nil, zero value otherwise.
func (o *MicrosoftGraphQuota) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphQuota) GetTotalOk() (int64, bool) {
	if o == nil || o.Total == nil {
		var ret int64
		return ret, false
	}
	return *o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *MicrosoftGraphQuota) SetTotal(v int64) {
	o.Total = &v
}

// SetTotalExplicitNull (un)sets Total to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Total value is set to nil even if false is passed
func (o *MicrosoftGraphQuota) SetTotalExplicitNull(b bool) {
	o.Total = nil
	o.isExplicitNullTotal = b
}
// GetUsed returns the Used field if non-nil, zero value otherwise.
func (o *MicrosoftGraphQuota) GetUsed() int64 {
	if o == nil || o.Used == nil {
		var ret int64
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphQuota) GetUsedOk() (int64, bool) {
	if o == nil || o.Used == nil {
		var ret int64
		return ret, false
	}
	return *o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int64 and assigns it to the Used field.
func (o *MicrosoftGraphQuota) SetUsed(v int64) {
	o.Used = &v
}

// SetUsedExplicitNull (un)sets Used to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Used value is set to nil even if false is passed
func (o *MicrosoftGraphQuota) SetUsedExplicitNull(b bool) {
	o.Used = nil
	o.isExplicitNullUsed = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Deleted == nil {
		if o.isExplicitNullDeleted {
			toSerialize["deleted"] = o.Deleted
		}
	} else {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Remaining == nil {
		if o.isExplicitNullRemaining {
			toSerialize["remaining"] = o.Remaining
		}
	} else {
		toSerialize["remaining"] = o.Remaining
	}
	if o.State == nil {
		if o.isExplicitNullState {
			toSerialize["state"] = o.State
		}
	} else {
		toSerialize["state"] = o.State
	}
	if o.Total == nil {
		if o.isExplicitNullTotal {
			toSerialize["total"] = o.Total
		}
	} else {
		toSerialize["total"] = o.Total
	}
	if o.Used == nil {
		if o.isExplicitNullUsed {
			toSerialize["used"] = o.Used
		}
	} else {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}


