/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// Drive struct for Drive
type Drive struct {
	DriveType *string `json:"driveType,omitempty"`
	isExplicitNullDriveType bool `json:"-"`
	Owner *AnyOfmicrosoftGraphIdentitySet `json:"owner,omitempty"`
	isExplicitNullOwner bool `json:"-"`
	Quota *AnyOfmicrosoftGraphQuota `json:"quota,omitempty"`
	isExplicitNullQuota bool `json:"-"`
	SharePointIds *AnyOfmicrosoftGraphSharepointIds `json:"sharePointIds,omitempty"`
	isExplicitNullSharePointIds bool `json:"-"`
	System *AnyOfobject `json:"system,omitempty"`
	isExplicitNullSystem bool `json:"-"`
	Items *[]MicrosoftGraphDriveItem `json:"items,omitempty"`

	List *AnyOfmicrosoftGraphList `json:"list,omitempty"`
	isExplicitNullList bool `json:"-"`
	Root *AnyOfmicrosoftGraphDriveItem `json:"root,omitempty"`
	isExplicitNullRoot bool `json:"-"`
	Special *[]MicrosoftGraphDriveItem `json:"special,omitempty"`

}

// GetDriveType returns the DriveType field if non-nil, zero value otherwise.
func (o *Drive) GetDriveType() string {
	if o == nil || o.DriveType == nil {
		var ret string
		return ret
	}
	return *o.DriveType
}

// GetDriveTypeOk returns a tuple with the DriveType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetDriveTypeOk() (string, bool) {
	if o == nil || o.DriveType == nil {
		var ret string
		return ret, false
	}
	return *o.DriveType, true
}

// HasDriveType returns a boolean if a field has been set.
func (o *Drive) HasDriveType() bool {
	if o != nil && o.DriveType != nil {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given string and assigns it to the DriveType field.
func (o *Drive) SetDriveType(v string) {
	o.DriveType = &v
}

// SetDriveTypeExplicitNull (un)sets DriveType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DriveType value is set to nil even if false is passed
func (o *Drive) SetDriveTypeExplicitNull(b bool) {
	o.DriveType = nil
	o.isExplicitNullDriveType = b
}
// GetOwner returns the Owner field if non-nil, zero value otherwise.
func (o *Drive) GetOwner() AnyOfmicrosoftGraphIdentitySet {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetOwnerOk() (AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret, false
	}
	return *o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Drive) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the Owner field.
func (o *Drive) SetOwner(v AnyOfmicrosoftGraphIdentitySet) {
	o.Owner = &v
}

// SetOwnerExplicitNull (un)sets Owner to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Owner value is set to nil even if false is passed
func (o *Drive) SetOwnerExplicitNull(b bool) {
	o.Owner = nil
	o.isExplicitNullOwner = b
}
// GetQuota returns the Quota field if non-nil, zero value otherwise.
func (o *Drive) GetQuota() AnyOfmicrosoftGraphQuota {
	if o == nil || o.Quota == nil {
		var ret AnyOfmicrosoftGraphQuota
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetQuotaOk() (AnyOfmicrosoftGraphQuota, bool) {
	if o == nil || o.Quota == nil {
		var ret AnyOfmicrosoftGraphQuota
		return ret, false
	}
	return *o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *Drive) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given AnyOfmicrosoftGraphQuota and assigns it to the Quota field.
func (o *Drive) SetQuota(v AnyOfmicrosoftGraphQuota) {
	o.Quota = &v
}

// SetQuotaExplicitNull (un)sets Quota to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Quota value is set to nil even if false is passed
func (o *Drive) SetQuotaExplicitNull(b bool) {
	o.Quota = nil
	o.isExplicitNullQuota = b
}
// GetSharePointIds returns the SharePointIds field if non-nil, zero value otherwise.
func (o *Drive) GetSharePointIds() AnyOfmicrosoftGraphSharepointIds {
	if o == nil || o.SharePointIds == nil {
		var ret AnyOfmicrosoftGraphSharepointIds
		return ret
	}
	return *o.SharePointIds
}

// GetSharePointIdsOk returns a tuple with the SharePointIds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSharePointIdsOk() (AnyOfmicrosoftGraphSharepointIds, bool) {
	if o == nil || o.SharePointIds == nil {
		var ret AnyOfmicrosoftGraphSharepointIds
		return ret, false
	}
	return *o.SharePointIds, true
}

// HasSharePointIds returns a boolean if a field has been set.
func (o *Drive) HasSharePointIds() bool {
	if o != nil && o.SharePointIds != nil {
		return true
	}

	return false
}

// SetSharePointIds gets a reference to the given AnyOfmicrosoftGraphSharepointIds and assigns it to the SharePointIds field.
func (o *Drive) SetSharePointIds(v AnyOfmicrosoftGraphSharepointIds) {
	o.SharePointIds = &v
}

// SetSharePointIdsExplicitNull (un)sets SharePointIds to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SharePointIds value is set to nil even if false is passed
func (o *Drive) SetSharePointIdsExplicitNull(b bool) {
	o.SharePointIds = nil
	o.isExplicitNullSharePointIds = b
}
// GetSystem returns the System field if non-nil, zero value otherwise.
func (o *Drive) GetSystem() AnyOfobject {
	if o == nil || o.System == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSystemOk() (AnyOfobject, bool) {
	if o == nil || o.System == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Drive) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given AnyOfobject and assigns it to the System field.
func (o *Drive) SetSystem(v AnyOfobject) {
	o.System = &v
}

// SetSystemExplicitNull (un)sets System to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The System value is set to nil even if false is passed
func (o *Drive) SetSystemExplicitNull(b bool) {
	o.System = nil
	o.isExplicitNullSystem = b
}
// GetItems returns the Items field if non-nil, zero value otherwise.
func (o *Drive) GetItems() []MicrosoftGraphDriveItem {
	if o == nil || o.Items == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetItemsOk() ([]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Items == nil {
		var ret []MicrosoftGraphDriveItem
		return ret, false
	}
	return *o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Drive) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Items field.
func (o *Drive) SetItems(v []MicrosoftGraphDriveItem) {
	o.Items = &v
}

// GetList returns the List field if non-nil, zero value otherwise.
func (o *Drive) GetList() AnyOfmicrosoftGraphList {
	if o == nil || o.List == nil {
		var ret AnyOfmicrosoftGraphList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetListOk() (AnyOfmicrosoftGraphList, bool) {
	if o == nil || o.List == nil {
		var ret AnyOfmicrosoftGraphList
		return ret, false
	}
	return *o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *Drive) HasList() bool {
	if o != nil && o.List != nil {
		return true
	}

	return false
}

// SetList gets a reference to the given AnyOfmicrosoftGraphList and assigns it to the List field.
func (o *Drive) SetList(v AnyOfmicrosoftGraphList) {
	o.List = &v
}

// SetListExplicitNull (un)sets List to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The List value is set to nil even if false is passed
func (o *Drive) SetListExplicitNull(b bool) {
	o.List = nil
	o.isExplicitNullList = b
}
// GetRoot returns the Root field if non-nil, zero value otherwise.
func (o *Drive) GetRoot() AnyOfmicrosoftGraphDriveItem {
	if o == nil || o.Root == nil {
		var ret AnyOfmicrosoftGraphDriveItem
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetRootOk() (AnyOfmicrosoftGraphDriveItem, bool) {
	if o == nil || o.Root == nil {
		var ret AnyOfmicrosoftGraphDriveItem
		return ret, false
	}
	return *o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *Drive) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given AnyOfmicrosoftGraphDriveItem and assigns it to the Root field.
func (o *Drive) SetRoot(v AnyOfmicrosoftGraphDriveItem) {
	o.Root = &v
}

// SetRootExplicitNull (un)sets Root to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Root value is set to nil even if false is passed
func (o *Drive) SetRootExplicitNull(b bool) {
	o.Root = nil
	o.isExplicitNullRoot = b
}
// GetSpecial returns the Special field if non-nil, zero value otherwise.
func (o *Drive) GetSpecial() []MicrosoftGraphDriveItem {
	if o == nil || o.Special == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Special
}

// GetSpecialOk returns a tuple with the Special field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSpecialOk() ([]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Special == nil {
		var ret []MicrosoftGraphDriveItem
		return ret, false
	}
	return *o.Special, true
}

// HasSpecial returns a boolean if a field has been set.
func (o *Drive) HasSpecial() bool {
	if o != nil && o.Special != nil {
		return true
	}

	return false
}

// SetSpecial gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Special field.
func (o *Drive) SetSpecial(v []MicrosoftGraphDriveItem) {
	o.Special = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o Drive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveType == nil {
		if o.isExplicitNullDriveType {
			toSerialize["driveType"] = o.DriveType
		}
	} else {
		toSerialize["driveType"] = o.DriveType
	}
	if o.Owner == nil {
		if o.isExplicitNullOwner {
			toSerialize["owner"] = o.Owner
		}
	} else {
		toSerialize["owner"] = o.Owner
	}
	if o.Quota == nil {
		if o.isExplicitNullQuota {
			toSerialize["quota"] = o.Quota
		}
	} else {
		toSerialize["quota"] = o.Quota
	}
	if o.SharePointIds == nil {
		if o.isExplicitNullSharePointIds {
			toSerialize["sharePointIds"] = o.SharePointIds
		}
	} else {
		toSerialize["sharePointIds"] = o.SharePointIds
	}
	if o.System == nil {
		if o.isExplicitNullSystem {
			toSerialize["system"] = o.System
		}
	} else {
		toSerialize["system"] = o.System
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.List == nil {
		if o.isExplicitNullList {
			toSerialize["list"] = o.List
		}
	} else {
		toSerialize["list"] = o.List
	}
	if o.Root == nil {
		if o.isExplicitNullRoot {
			toSerialize["root"] = o.Root
		}
	} else {
		toSerialize["root"] = o.Root
	}
	if o.Special != nil {
		toSerialize["special"] = o.Special
	}
	return json.Marshal(toSerialize)
}


