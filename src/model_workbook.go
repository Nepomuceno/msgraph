/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// Workbook struct for Workbook
type Workbook struct {
	Application *AnyOfmicrosoftGraphWorkbookApplication `json:"application,omitempty"`
	isExplicitNullApplication bool `json:"-"`
	Names *[]MicrosoftGraphWorkbookNamedItem `json:"names,omitempty"`

	Tables *[]MicrosoftGraphWorkbookTable `json:"tables,omitempty"`

	Worksheets *[]MicrosoftGraphWorkbookWorksheet `json:"worksheets,omitempty"`

	Comments *[]MicrosoftGraphWorkbookComment `json:"comments,omitempty"`

	Functions *AnyOfmicrosoftGraphWorkbookFunctions `json:"functions,omitempty"`
	isExplicitNullFunctions bool `json:"-"`
}

// GetApplication returns the Application field if non-nil, zero value otherwise.
func (o *Workbook) GetApplication() AnyOfmicrosoftGraphWorkbookApplication {
	if o == nil || o.Application == nil {
		var ret AnyOfmicrosoftGraphWorkbookApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetApplicationOk() (AnyOfmicrosoftGraphWorkbookApplication, bool) {
	if o == nil || o.Application == nil {
		var ret AnyOfmicrosoftGraphWorkbookApplication
		return ret, false
	}
	return *o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Workbook) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given AnyOfmicrosoftGraphWorkbookApplication and assigns it to the Application field.
func (o *Workbook) SetApplication(v AnyOfmicrosoftGraphWorkbookApplication) {
	o.Application = &v
}

// SetApplicationExplicitNull (un)sets Application to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Application value is set to nil even if false is passed
func (o *Workbook) SetApplicationExplicitNull(b bool) {
	o.Application = nil
	o.isExplicitNullApplication = b
}
// GetNames returns the Names field if non-nil, zero value otherwise.
func (o *Workbook) GetNames() []MicrosoftGraphWorkbookNamedItem {
	if o == nil || o.Names == nil {
		var ret []MicrosoftGraphWorkbookNamedItem
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetNamesOk() ([]MicrosoftGraphWorkbookNamedItem, bool) {
	if o == nil || o.Names == nil {
		var ret []MicrosoftGraphWorkbookNamedItem
		return ret, false
	}
	return *o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Workbook) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []MicrosoftGraphWorkbookNamedItem and assigns it to the Names field.
func (o *Workbook) SetNames(v []MicrosoftGraphWorkbookNamedItem) {
	o.Names = &v
}

// GetTables returns the Tables field if non-nil, zero value otherwise.
func (o *Workbook) GetTables() []MicrosoftGraphWorkbookTable {
	if o == nil || o.Tables == nil {
		var ret []MicrosoftGraphWorkbookTable
		return ret
	}
	return *o.Tables
}

// GetTablesOk returns a tuple with the Tables field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetTablesOk() ([]MicrosoftGraphWorkbookTable, bool) {
	if o == nil || o.Tables == nil {
		var ret []MicrosoftGraphWorkbookTable
		return ret, false
	}
	return *o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *Workbook) HasTables() bool {
	if o != nil && o.Tables != nil {
		return true
	}

	return false
}

// SetTables gets a reference to the given []MicrosoftGraphWorkbookTable and assigns it to the Tables field.
func (o *Workbook) SetTables(v []MicrosoftGraphWorkbookTable) {
	o.Tables = &v
}

// GetWorksheets returns the Worksheets field if non-nil, zero value otherwise.
func (o *Workbook) GetWorksheets() []MicrosoftGraphWorkbookWorksheet {
	if o == nil || o.Worksheets == nil {
		var ret []MicrosoftGraphWorkbookWorksheet
		return ret
	}
	return *o.Worksheets
}

// GetWorksheetsOk returns a tuple with the Worksheets field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetWorksheetsOk() ([]MicrosoftGraphWorkbookWorksheet, bool) {
	if o == nil || o.Worksheets == nil {
		var ret []MicrosoftGraphWorkbookWorksheet
		return ret, false
	}
	return *o.Worksheets, true
}

// HasWorksheets returns a boolean if a field has been set.
func (o *Workbook) HasWorksheets() bool {
	if o != nil && o.Worksheets != nil {
		return true
	}

	return false
}

// SetWorksheets gets a reference to the given []MicrosoftGraphWorkbookWorksheet and assigns it to the Worksheets field.
func (o *Workbook) SetWorksheets(v []MicrosoftGraphWorkbookWorksheet) {
	o.Worksheets = &v
}

// GetComments returns the Comments field if non-nil, zero value otherwise.
func (o *Workbook) GetComments() []MicrosoftGraphWorkbookComment {
	if o == nil || o.Comments == nil {
		var ret []MicrosoftGraphWorkbookComment
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetCommentsOk() ([]MicrosoftGraphWorkbookComment, bool) {
	if o == nil || o.Comments == nil {
		var ret []MicrosoftGraphWorkbookComment
		return ret, false
	}
	return *o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Workbook) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []MicrosoftGraphWorkbookComment and assigns it to the Comments field.
func (o *Workbook) SetComments(v []MicrosoftGraphWorkbookComment) {
	o.Comments = &v
}

// GetFunctions returns the Functions field if non-nil, zero value otherwise.
func (o *Workbook) GetFunctions() AnyOfmicrosoftGraphWorkbookFunctions {
	if o == nil || o.Functions == nil {
		var ret AnyOfmicrosoftGraphWorkbookFunctions
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Workbook) GetFunctionsOk() (AnyOfmicrosoftGraphWorkbookFunctions, bool) {
	if o == nil || o.Functions == nil {
		var ret AnyOfmicrosoftGraphWorkbookFunctions
		return ret, false
	}
	return *o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *Workbook) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given AnyOfmicrosoftGraphWorkbookFunctions and assigns it to the Functions field.
func (o *Workbook) SetFunctions(v AnyOfmicrosoftGraphWorkbookFunctions) {
	o.Functions = &v
}

// SetFunctionsExplicitNull (un)sets Functions to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Functions value is set to nil even if false is passed
func (o *Workbook) SetFunctionsExplicitNull(b bool) {
	o.Functions = nil
	o.isExplicitNullFunctions = b
}

// MarshalJSON returns the JSON representation of the model.
func (o Workbook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Application == nil {
		if o.isExplicitNullApplication {
			toSerialize["application"] = o.Application
		}
	} else {
		toSerialize["application"] = o.Application
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Tables != nil {
		toSerialize["tables"] = o.Tables
	}
	if o.Worksheets != nil {
		toSerialize["worksheets"] = o.Worksheets
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Functions == nil {
		if o.isExplicitNullFunctions {
			toSerialize["functions"] = o.Functions
		}
	} else {
		toSerialize["functions"] = o.Functions
	}
	return json.Marshal(toSerialize)
}


