/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject1121 struct for InlineObject1121
type InlineObject1121 struct {
	Criteria1 *string `json:"criteria1,omitempty"`
	isExplicitNullCriteria1 bool `json:"-"`
	Criteria2 *string `json:"criteria2,omitempty"`
	isExplicitNullCriteria2 bool `json:"-"`
	Oper *string `json:"oper,omitempty"`

}

// GetCriteria1 returns the Criteria1 field if non-nil, zero value otherwise.
func (o *InlineObject1121) GetCriteria1() string {
	if o == nil || o.Criteria1 == nil {
		var ret string
		return ret
	}
	return *o.Criteria1
}

// GetCriteria1Ok returns a tuple with the Criteria1 field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1121) GetCriteria1Ok() (string, bool) {
	if o == nil || o.Criteria1 == nil {
		var ret string
		return ret, false
	}
	return *o.Criteria1, true
}

// HasCriteria1 returns a boolean if a field has been set.
func (o *InlineObject1121) HasCriteria1() bool {
	if o != nil && o.Criteria1 != nil {
		return true
	}

	return false
}

// SetCriteria1 gets a reference to the given string and assigns it to the Criteria1 field.
func (o *InlineObject1121) SetCriteria1(v string) {
	o.Criteria1 = &v
}

// SetCriteria1ExplicitNull (un)sets Criteria1 to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Criteria1 value is set to nil even if false is passed
func (o *InlineObject1121) SetCriteria1ExplicitNull(b bool) {
	o.Criteria1 = nil
	o.isExplicitNullCriteria1 = b
}
// GetCriteria2 returns the Criteria2 field if non-nil, zero value otherwise.
func (o *InlineObject1121) GetCriteria2() string {
	if o == nil || o.Criteria2 == nil {
		var ret string
		return ret
	}
	return *o.Criteria2
}

// GetCriteria2Ok returns a tuple with the Criteria2 field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1121) GetCriteria2Ok() (string, bool) {
	if o == nil || o.Criteria2 == nil {
		var ret string
		return ret, false
	}
	return *o.Criteria2, true
}

// HasCriteria2 returns a boolean if a field has been set.
func (o *InlineObject1121) HasCriteria2() bool {
	if o != nil && o.Criteria2 != nil {
		return true
	}

	return false
}

// SetCriteria2 gets a reference to the given string and assigns it to the Criteria2 field.
func (o *InlineObject1121) SetCriteria2(v string) {
	o.Criteria2 = &v
}

// SetCriteria2ExplicitNull (un)sets Criteria2 to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Criteria2 value is set to nil even if false is passed
func (o *InlineObject1121) SetCriteria2ExplicitNull(b bool) {
	o.Criteria2 = nil
	o.isExplicitNullCriteria2 = b
}
// GetOper returns the Oper field if non-nil, zero value otherwise.
func (o *InlineObject1121) GetOper() string {
	if o == nil || o.Oper == nil {
		var ret string
		return ret
	}
	return *o.Oper
}

// GetOperOk returns a tuple with the Oper field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1121) GetOperOk() (string, bool) {
	if o == nil || o.Oper == nil {
		var ret string
		return ret, false
	}
	return *o.Oper, true
}

// HasOper returns a boolean if a field has been set.
func (o *InlineObject1121) HasOper() bool {
	if o != nil && o.Oper != nil {
		return true
	}

	return false
}

// SetOper gets a reference to the given string and assigns it to the Oper field.
func (o *InlineObject1121) SetOper(v string) {
	o.Oper = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o InlineObject1121) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Criteria1 == nil {
		if o.isExplicitNullCriteria1 {
			toSerialize["criteria1"] = o.Criteria1
		}
	} else {
		toSerialize["criteria1"] = o.Criteria1
	}
	if o.Criteria2 == nil {
		if o.isExplicitNullCriteria2 {
			toSerialize["criteria2"] = o.Criteria2
		}
	} else {
		toSerialize["criteria2"] = o.Criteria2
	}
	if o.Oper != nil {
		toSerialize["oper"] = o.Oper
	}
	return json.Marshal(toSerialize)
}


