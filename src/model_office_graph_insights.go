/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// OfficeGraphInsights struct for OfficeGraphInsights
type OfficeGraphInsights struct {
	Trending *[]MicrosoftGraphTrending `json:"trending,omitempty"`

	Shared *[]MicrosoftGraphSharedInsight `json:"shared,omitempty"`

	Used *[]MicrosoftGraphUsedInsight `json:"used,omitempty"`

}

// GetTrending returns the Trending field if non-nil, zero value otherwise.
func (o *OfficeGraphInsights) GetTrending() []MicrosoftGraphTrending {
	if o == nil || o.Trending == nil {
		var ret []MicrosoftGraphTrending
		return ret
	}
	return *o.Trending
}

// GetTrendingOk returns a tuple with the Trending field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OfficeGraphInsights) GetTrendingOk() ([]MicrosoftGraphTrending, bool) {
	if o == nil || o.Trending == nil {
		var ret []MicrosoftGraphTrending
		return ret, false
	}
	return *o.Trending, true
}

// HasTrending returns a boolean if a field has been set.
func (o *OfficeGraphInsights) HasTrending() bool {
	if o != nil && o.Trending != nil {
		return true
	}

	return false
}

// SetTrending gets a reference to the given []MicrosoftGraphTrending and assigns it to the Trending field.
func (o *OfficeGraphInsights) SetTrending(v []MicrosoftGraphTrending) {
	o.Trending = &v
}

// GetShared returns the Shared field if non-nil, zero value otherwise.
func (o *OfficeGraphInsights) GetShared() []MicrosoftGraphSharedInsight {
	if o == nil || o.Shared == nil {
		var ret []MicrosoftGraphSharedInsight
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OfficeGraphInsights) GetSharedOk() ([]MicrosoftGraphSharedInsight, bool) {
	if o == nil || o.Shared == nil {
		var ret []MicrosoftGraphSharedInsight
		return ret, false
	}
	return *o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *OfficeGraphInsights) HasShared() bool {
	if o != nil && o.Shared != nil {
		return true
	}

	return false
}

// SetShared gets a reference to the given []MicrosoftGraphSharedInsight and assigns it to the Shared field.
func (o *OfficeGraphInsights) SetShared(v []MicrosoftGraphSharedInsight) {
	o.Shared = &v
}

// GetUsed returns the Used field if non-nil, zero value otherwise.
func (o *OfficeGraphInsights) GetUsed() []MicrosoftGraphUsedInsight {
	if o == nil || o.Used == nil {
		var ret []MicrosoftGraphUsedInsight
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OfficeGraphInsights) GetUsedOk() ([]MicrosoftGraphUsedInsight, bool) {
	if o == nil || o.Used == nil {
		var ret []MicrosoftGraphUsedInsight
		return ret, false
	}
	return *o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *OfficeGraphInsights) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given []MicrosoftGraphUsedInsight and assigns it to the Used field.
func (o *OfficeGraphInsights) SetUsed(v []MicrosoftGraphUsedInsight) {
	o.Used = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o OfficeGraphInsights) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Trending != nil {
		toSerialize["trending"] = o.Trending
	}
	if o.Shared != nil {
		toSerialize["shared"] = o.Shared
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}


