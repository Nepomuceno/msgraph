/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject1103 struct for InlineObject1103
type InlineObject1103 struct {
	Array *AnyOfobject `json:"array,omitempty"`
	isExplicitNullArray bool `json:"-"`
	X *AnyOfobject `json:"x,omitempty"`
	isExplicitNullX bool `json:"-"`
	Sigma *AnyOfobject `json:"sigma,omitempty"`
	isExplicitNullSigma bool `json:"-"`
}

// GetArray returns the Array field if non-nil, zero value otherwise.
func (o *InlineObject1103) GetArray() AnyOfobject {
	if o == nil || o.Array == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Array
}

// GetArrayOk returns a tuple with the Array field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1103) GetArrayOk() (AnyOfobject, bool) {
	if o == nil || o.Array == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *InlineObject1103) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given AnyOfobject and assigns it to the Array field.
func (o *InlineObject1103) SetArray(v AnyOfobject) {
	o.Array = &v
}

// SetArrayExplicitNull (un)sets Array to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Array value is set to nil even if false is passed
func (o *InlineObject1103) SetArrayExplicitNull(b bool) {
	o.Array = nil
	o.isExplicitNullArray = b
}
// GetX returns the X field if non-nil, zero value otherwise.
func (o *InlineObject1103) GetX() AnyOfobject {
	if o == nil || o.X == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1103) GetXOk() (AnyOfobject, bool) {
	if o == nil || o.X == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *InlineObject1103) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given AnyOfobject and assigns it to the X field.
func (o *InlineObject1103) SetX(v AnyOfobject) {
	o.X = &v
}

// SetXExplicitNull (un)sets X to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The X value is set to nil even if false is passed
func (o *InlineObject1103) SetXExplicitNull(b bool) {
	o.X = nil
	o.isExplicitNullX = b
}
// GetSigma returns the Sigma field if non-nil, zero value otherwise.
func (o *InlineObject1103) GetSigma() AnyOfobject {
	if o == nil || o.Sigma == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Sigma
}

// GetSigmaOk returns a tuple with the Sigma field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1103) GetSigmaOk() (AnyOfobject, bool) {
	if o == nil || o.Sigma == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Sigma, true
}

// HasSigma returns a boolean if a field has been set.
func (o *InlineObject1103) HasSigma() bool {
	if o != nil && o.Sigma != nil {
		return true
	}

	return false
}

// SetSigma gets a reference to the given AnyOfobject and assigns it to the Sigma field.
func (o *InlineObject1103) SetSigma(v AnyOfobject) {
	o.Sigma = &v
}

// SetSigmaExplicitNull (un)sets Sigma to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Sigma value is set to nil even if false is passed
func (o *InlineObject1103) SetSigmaExplicitNull(b bool) {
	o.Sigma = nil
	o.isExplicitNullSigma = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject1103) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Array == nil {
		if o.isExplicitNullArray {
			toSerialize["array"] = o.Array
		}
	} else {
		toSerialize["array"] = o.Array
	}
	if o.X == nil {
		if o.isExplicitNullX {
			toSerialize["x"] = o.X
		}
	} else {
		toSerialize["x"] = o.X
	}
	if o.Sigma == nil {
		if o.isExplicitNullSigma {
			toSerialize["sigma"] = o.Sigma
		}
	} else {
		toSerialize["sigma"] = o.Sigma
	}
	return json.Marshal(toSerialize)
}


