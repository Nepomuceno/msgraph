/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphIncompleteData struct for MicrosoftGraphIncompleteData
type MicrosoftGraphIncompleteData struct {
	MissingDataBeforeDateTime *time.Time `json:"missingDataBeforeDateTime,omitempty"`
	isExplicitNullMissingDataBeforeDateTime bool `json:"-"`
	WasThrottled *bool `json:"wasThrottled,omitempty"`
	isExplicitNullWasThrottled bool `json:"-"`
}

// GetMissingDataBeforeDateTime returns the MissingDataBeforeDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphIncompleteData) GetMissingDataBeforeDateTime() time.Time {
	if o == nil || o.MissingDataBeforeDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.MissingDataBeforeDateTime
}

// GetMissingDataBeforeDateTimeOk returns a tuple with the MissingDataBeforeDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphIncompleteData) GetMissingDataBeforeDateTimeOk() (time.Time, bool) {
	if o == nil || o.MissingDataBeforeDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.MissingDataBeforeDateTime, true
}

// HasMissingDataBeforeDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphIncompleteData) HasMissingDataBeforeDateTime() bool {
	if o != nil && o.MissingDataBeforeDateTime != nil {
		return true
	}

	return false
}

// SetMissingDataBeforeDateTime gets a reference to the given time.Time and assigns it to the MissingDataBeforeDateTime field.
func (o *MicrosoftGraphIncompleteData) SetMissingDataBeforeDateTime(v time.Time) {
	o.MissingDataBeforeDateTime = &v
}

// SetMissingDataBeforeDateTimeExplicitNull (un)sets MissingDataBeforeDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MissingDataBeforeDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphIncompleteData) SetMissingDataBeforeDateTimeExplicitNull(b bool) {
	o.MissingDataBeforeDateTime = nil
	o.isExplicitNullMissingDataBeforeDateTime = b
}
// GetWasThrottled returns the WasThrottled field if non-nil, zero value otherwise.
func (o *MicrosoftGraphIncompleteData) GetWasThrottled() bool {
	if o == nil || o.WasThrottled == nil {
		var ret bool
		return ret
	}
	return *o.WasThrottled
}

// GetWasThrottledOk returns a tuple with the WasThrottled field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphIncompleteData) GetWasThrottledOk() (bool, bool) {
	if o == nil || o.WasThrottled == nil {
		var ret bool
		return ret, false
	}
	return *o.WasThrottled, true
}

// HasWasThrottled returns a boolean if a field has been set.
func (o *MicrosoftGraphIncompleteData) HasWasThrottled() bool {
	if o != nil && o.WasThrottled != nil {
		return true
	}

	return false
}

// SetWasThrottled gets a reference to the given bool and assigns it to the WasThrottled field.
func (o *MicrosoftGraphIncompleteData) SetWasThrottled(v bool) {
	o.WasThrottled = &v
}

// SetWasThrottledExplicitNull (un)sets WasThrottled to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The WasThrottled value is set to nil even if false is passed
func (o *MicrosoftGraphIncompleteData) SetWasThrottledExplicitNull(b bool) {
	o.WasThrottled = nil
	o.isExplicitNullWasThrottled = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphIncompleteData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MissingDataBeforeDateTime == nil {
		if o.isExplicitNullMissingDataBeforeDateTime {
			toSerialize["missingDataBeforeDateTime"] = o.MissingDataBeforeDateTime
		}
	} else {
		toSerialize["missingDataBeforeDateTime"] = o.MissingDataBeforeDateTime
	}
	if o.WasThrottled == nil {
		if o.isExplicitNullWasThrottled {
			toSerialize["wasThrottled"] = o.WasThrottled
		}
	} else {
		toSerialize["wasThrottled"] = o.WasThrottled
	}
	return json.Marshal(toSerialize)
}


