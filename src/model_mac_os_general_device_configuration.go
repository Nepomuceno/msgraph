/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MacOsGeneralDeviceConfiguration This topic provides descriptions of the declared methods, properties and relationships exposed by the macOSGeneralDeviceConfiguration resource.
type MacOsGeneralDeviceConfiguration struct {
	// List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
	CompliantAppsList *[]AnyOfmicrosoftGraphAppListItem `json:"compliantAppsList,omitempty"`

	// List that is in the CompliantAppsList.
	CompliantAppListType *AnyOfmicrosoftGraphAppListType `json:"compliantAppListType,omitempty"`

	// An email address lacking a suffix that matches any of these strings will be considered out-of-domain.
	EmailInDomainSuffixes *[]string `json:"emailInDomainSuffixes,omitempty"`

	// Block simple passwords.
	PasswordBlockSimple *bool `json:"passwordBlockSimple,omitempty"`

	// Number of days before the password expires.
	PasswordExpirationDays *int32 `json:"passwordExpirationDays,omitempty"`
	isExplicitNullPasswordExpirationDays bool `json:"-"`
	// Number of character sets a password must contain. Valid values 0 to 4
	PasswordMinimumCharacterSetCount *int32 `json:"passwordMinimumCharacterSetCount,omitempty"`
	isExplicitNullPasswordMinimumCharacterSetCount bool `json:"-"`
	// Minimum length of passwords.
	PasswordMinimumLength *int32 `json:"passwordMinimumLength,omitempty"`
	isExplicitNullPasswordMinimumLength bool `json:"-"`
	// Minutes of inactivity required before a password is required.
	PasswordMinutesOfInactivityBeforeLock *int32 `json:"passwordMinutesOfInactivityBeforeLock,omitempty"`
	isExplicitNullPasswordMinutesOfInactivityBeforeLock bool `json:"-"`
	// Minutes of inactivity required before the screen times out.
	PasswordMinutesOfInactivityBeforeScreenTimeout *int32 `json:"passwordMinutesOfInactivityBeforeScreenTimeout,omitempty"`
	isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout bool `json:"-"`
	// Number of previous passwords to block.
	PasswordPreviousPasswordBlockCount *int32 `json:"passwordPreviousPasswordBlockCount,omitempty"`
	isExplicitNullPasswordPreviousPasswordBlockCount bool `json:"-"`
	// Type of password that is required.
	PasswordRequiredType *AnyOfmicrosoftGraphRequiredPasswordType `json:"passwordRequiredType,omitempty"`

	// Whether or not to require a password.
	PasswordRequired *bool `json:"passwordRequired,omitempty"`

}

// GetCompliantAppsList returns the CompliantAppsList field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetCompliantAppsList() []AnyOfmicrosoftGraphAppListItem {
	if o == nil || o.CompliantAppsList == nil {
		var ret []AnyOfmicrosoftGraphAppListItem
		return ret
	}
	return *o.CompliantAppsList
}

// GetCompliantAppsListOk returns a tuple with the CompliantAppsList field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetCompliantAppsListOk() ([]AnyOfmicrosoftGraphAppListItem, bool) {
	if o == nil || o.CompliantAppsList == nil {
		var ret []AnyOfmicrosoftGraphAppListItem
		return ret, false
	}
	return *o.CompliantAppsList, true
}

// HasCompliantAppsList returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasCompliantAppsList() bool {
	if o != nil && o.CompliantAppsList != nil {
		return true
	}

	return false
}

// SetCompliantAppsList gets a reference to the given []AnyOfmicrosoftGraphAppListItem and assigns it to the CompliantAppsList field.
func (o *MacOsGeneralDeviceConfiguration) SetCompliantAppsList(v []AnyOfmicrosoftGraphAppListItem) {
	o.CompliantAppsList = &v
}

// GetCompliantAppListType returns the CompliantAppListType field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetCompliantAppListType() AnyOfmicrosoftGraphAppListType {
	if o == nil || o.CompliantAppListType == nil {
		var ret AnyOfmicrosoftGraphAppListType
		return ret
	}
	return *o.CompliantAppListType
}

// GetCompliantAppListTypeOk returns a tuple with the CompliantAppListType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetCompliantAppListTypeOk() (AnyOfmicrosoftGraphAppListType, bool) {
	if o == nil || o.CompliantAppListType == nil {
		var ret AnyOfmicrosoftGraphAppListType
		return ret, false
	}
	return *o.CompliantAppListType, true
}

// HasCompliantAppListType returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasCompliantAppListType() bool {
	if o != nil && o.CompliantAppListType != nil {
		return true
	}

	return false
}

// SetCompliantAppListType gets a reference to the given AnyOfmicrosoftGraphAppListType and assigns it to the CompliantAppListType field.
func (o *MacOsGeneralDeviceConfiguration) SetCompliantAppListType(v AnyOfmicrosoftGraphAppListType) {
	o.CompliantAppListType = &v
}

// GetEmailInDomainSuffixes returns the EmailInDomainSuffixes field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetEmailInDomainSuffixes() []string {
	if o == nil || o.EmailInDomainSuffixes == nil {
		var ret []string
		return ret
	}
	return *o.EmailInDomainSuffixes
}

// GetEmailInDomainSuffixesOk returns a tuple with the EmailInDomainSuffixes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetEmailInDomainSuffixesOk() ([]string, bool) {
	if o == nil || o.EmailInDomainSuffixes == nil {
		var ret []string
		return ret, false
	}
	return *o.EmailInDomainSuffixes, true
}

// HasEmailInDomainSuffixes returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasEmailInDomainSuffixes() bool {
	if o != nil && o.EmailInDomainSuffixes != nil {
		return true
	}

	return false
}

// SetEmailInDomainSuffixes gets a reference to the given []string and assigns it to the EmailInDomainSuffixes field.
func (o *MacOsGeneralDeviceConfiguration) SetEmailInDomainSuffixes(v []string) {
	o.EmailInDomainSuffixes = &v
}

// GetPasswordBlockSimple returns the PasswordBlockSimple field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordBlockSimple() bool {
	if o == nil || o.PasswordBlockSimple == nil {
		var ret bool
		return ret
	}
	return *o.PasswordBlockSimple
}

// GetPasswordBlockSimpleOk returns a tuple with the PasswordBlockSimple field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordBlockSimpleOk() (bool, bool) {
	if o == nil || o.PasswordBlockSimple == nil {
		var ret bool
		return ret, false
	}
	return *o.PasswordBlockSimple, true
}

// HasPasswordBlockSimple returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordBlockSimple() bool {
	if o != nil && o.PasswordBlockSimple != nil {
		return true
	}

	return false
}

// SetPasswordBlockSimple gets a reference to the given bool and assigns it to the PasswordBlockSimple field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordBlockSimple(v bool) {
	o.PasswordBlockSimple = &v
}

// GetPasswordExpirationDays returns the PasswordExpirationDays field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordExpirationDays() int32 {
	if o == nil || o.PasswordExpirationDays == nil {
		var ret int32
		return ret
	}
	return *o.PasswordExpirationDays
}

// GetPasswordExpirationDaysOk returns a tuple with the PasswordExpirationDays field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordExpirationDaysOk() (int32, bool) {
	if o == nil || o.PasswordExpirationDays == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordExpirationDays, true
}

// HasPasswordExpirationDays returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordExpirationDays() bool {
	if o != nil && o.PasswordExpirationDays != nil {
		return true
	}

	return false
}

// SetPasswordExpirationDays gets a reference to the given int32 and assigns it to the PasswordExpirationDays field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordExpirationDays(v int32) {
	o.PasswordExpirationDays = &v
}

// SetPasswordExpirationDaysExplicitNull (un)sets PasswordExpirationDays to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordExpirationDays value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordExpirationDaysExplicitNull(b bool) {
	o.PasswordExpirationDays = nil
	o.isExplicitNullPasswordExpirationDays = b
}
// GetPasswordMinimumCharacterSetCount returns the PasswordMinimumCharacterSetCount field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinimumCharacterSetCount() int32 {
	if o == nil || o.PasswordMinimumCharacterSetCount == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinimumCharacterSetCount
}

// GetPasswordMinimumCharacterSetCountOk returns a tuple with the PasswordMinimumCharacterSetCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinimumCharacterSetCountOk() (int32, bool) {
	if o == nil || o.PasswordMinimumCharacterSetCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinimumCharacterSetCount, true
}

// HasPasswordMinimumCharacterSetCount returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordMinimumCharacterSetCount() bool {
	if o != nil && o.PasswordMinimumCharacterSetCount != nil {
		return true
	}

	return false
}

// SetPasswordMinimumCharacterSetCount gets a reference to the given int32 and assigns it to the PasswordMinimumCharacterSetCount field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinimumCharacterSetCount(v int32) {
	o.PasswordMinimumCharacterSetCount = &v
}

// SetPasswordMinimumCharacterSetCountExplicitNull (un)sets PasswordMinimumCharacterSetCount to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinimumCharacterSetCount value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinimumCharacterSetCountExplicitNull(b bool) {
	o.PasswordMinimumCharacterSetCount = nil
	o.isExplicitNullPasswordMinimumCharacterSetCount = b
}
// GetPasswordMinimumLength returns the PasswordMinimumLength field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinimumLength() int32 {
	if o == nil || o.PasswordMinimumLength == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinimumLength
}

// GetPasswordMinimumLengthOk returns a tuple with the PasswordMinimumLength field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinimumLengthOk() (int32, bool) {
	if o == nil || o.PasswordMinimumLength == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinimumLength, true
}

// HasPasswordMinimumLength returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordMinimumLength() bool {
	if o != nil && o.PasswordMinimumLength != nil {
		return true
	}

	return false
}

// SetPasswordMinimumLength gets a reference to the given int32 and assigns it to the PasswordMinimumLength field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinimumLength(v int32) {
	o.PasswordMinimumLength = &v
}

// SetPasswordMinimumLengthExplicitNull (un)sets PasswordMinimumLength to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinimumLength value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinimumLengthExplicitNull(b bool) {
	o.PasswordMinimumLength = nil
	o.isExplicitNullPasswordMinimumLength = b
}
// GetPasswordMinutesOfInactivityBeforeLock returns the PasswordMinutesOfInactivityBeforeLock field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinutesOfInactivityBeforeLock() int32 {
	if o == nil || o.PasswordMinutesOfInactivityBeforeLock == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinutesOfInactivityBeforeLock
}

// GetPasswordMinutesOfInactivityBeforeLockOk returns a tuple with the PasswordMinutesOfInactivityBeforeLock field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinutesOfInactivityBeforeLockOk() (int32, bool) {
	if o == nil || o.PasswordMinutesOfInactivityBeforeLock == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinutesOfInactivityBeforeLock, true
}

// HasPasswordMinutesOfInactivityBeforeLock returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordMinutesOfInactivityBeforeLock() bool {
	if o != nil && o.PasswordMinutesOfInactivityBeforeLock != nil {
		return true
	}

	return false
}

// SetPasswordMinutesOfInactivityBeforeLock gets a reference to the given int32 and assigns it to the PasswordMinutesOfInactivityBeforeLock field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinutesOfInactivityBeforeLock(v int32) {
	o.PasswordMinutesOfInactivityBeforeLock = &v
}

// SetPasswordMinutesOfInactivityBeforeLockExplicitNull (un)sets PasswordMinutesOfInactivityBeforeLock to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinutesOfInactivityBeforeLock value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinutesOfInactivityBeforeLockExplicitNull(b bool) {
	o.PasswordMinutesOfInactivityBeforeLock = nil
	o.isExplicitNullPasswordMinutesOfInactivityBeforeLock = b
}
// GetPasswordMinutesOfInactivityBeforeScreenTimeout returns the PasswordMinutesOfInactivityBeforeScreenTimeout field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinutesOfInactivityBeforeScreenTimeout() int32 {
	if o == nil || o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinutesOfInactivityBeforeScreenTimeout
}

// GetPasswordMinutesOfInactivityBeforeScreenTimeoutOk returns a tuple with the PasswordMinutesOfInactivityBeforeScreenTimeout field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordMinutesOfInactivityBeforeScreenTimeoutOk() (int32, bool) {
	if o == nil || o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinutesOfInactivityBeforeScreenTimeout, true
}

// HasPasswordMinutesOfInactivityBeforeScreenTimeout returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordMinutesOfInactivityBeforeScreenTimeout() bool {
	if o != nil && o.PasswordMinutesOfInactivityBeforeScreenTimeout != nil {
		return true
	}

	return false
}

// SetPasswordMinutesOfInactivityBeforeScreenTimeout gets a reference to the given int32 and assigns it to the PasswordMinutesOfInactivityBeforeScreenTimeout field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinutesOfInactivityBeforeScreenTimeout(v int32) {
	o.PasswordMinutesOfInactivityBeforeScreenTimeout = &v
}

// SetPasswordMinutesOfInactivityBeforeScreenTimeoutExplicitNull (un)sets PasswordMinutesOfInactivityBeforeScreenTimeout to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinutesOfInactivityBeforeScreenTimeout value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordMinutesOfInactivityBeforeScreenTimeoutExplicitNull(b bool) {
	o.PasswordMinutesOfInactivityBeforeScreenTimeout = nil
	o.isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout = b
}
// GetPasswordPreviousPasswordBlockCount returns the PasswordPreviousPasswordBlockCount field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordPreviousPasswordBlockCount() int32 {
	if o == nil || o.PasswordPreviousPasswordBlockCount == nil {
		var ret int32
		return ret
	}
	return *o.PasswordPreviousPasswordBlockCount
}

// GetPasswordPreviousPasswordBlockCountOk returns a tuple with the PasswordPreviousPasswordBlockCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordPreviousPasswordBlockCountOk() (int32, bool) {
	if o == nil || o.PasswordPreviousPasswordBlockCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordPreviousPasswordBlockCount, true
}

// HasPasswordPreviousPasswordBlockCount returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordPreviousPasswordBlockCount() bool {
	if o != nil && o.PasswordPreviousPasswordBlockCount != nil {
		return true
	}

	return false
}

// SetPasswordPreviousPasswordBlockCount gets a reference to the given int32 and assigns it to the PasswordPreviousPasswordBlockCount field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordPreviousPasswordBlockCount(v int32) {
	o.PasswordPreviousPasswordBlockCount = &v
}

// SetPasswordPreviousPasswordBlockCountExplicitNull (un)sets PasswordPreviousPasswordBlockCount to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordPreviousPasswordBlockCount value is set to nil even if false is passed
func (o *MacOsGeneralDeviceConfiguration) SetPasswordPreviousPasswordBlockCountExplicitNull(b bool) {
	o.PasswordPreviousPasswordBlockCount = nil
	o.isExplicitNullPasswordPreviousPasswordBlockCount = b
}
// GetPasswordRequiredType returns the PasswordRequiredType field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordRequiredType() AnyOfmicrosoftGraphRequiredPasswordType {
	if o == nil || o.PasswordRequiredType == nil {
		var ret AnyOfmicrosoftGraphRequiredPasswordType
		return ret
	}
	return *o.PasswordRequiredType
}

// GetPasswordRequiredTypeOk returns a tuple with the PasswordRequiredType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordRequiredTypeOk() (AnyOfmicrosoftGraphRequiredPasswordType, bool) {
	if o == nil || o.PasswordRequiredType == nil {
		var ret AnyOfmicrosoftGraphRequiredPasswordType
		return ret, false
	}
	return *o.PasswordRequiredType, true
}

// HasPasswordRequiredType returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordRequiredType() bool {
	if o != nil && o.PasswordRequiredType != nil {
		return true
	}

	return false
}

// SetPasswordRequiredType gets a reference to the given AnyOfmicrosoftGraphRequiredPasswordType and assigns it to the PasswordRequiredType field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordRequiredType(v AnyOfmicrosoftGraphRequiredPasswordType) {
	o.PasswordRequiredType = &v
}

// GetPasswordRequired returns the PasswordRequired field if non-nil, zero value otherwise.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordRequired() bool {
	if o == nil || o.PasswordRequired == nil {
		var ret bool
		return ret
	}
	return *o.PasswordRequired
}

// GetPasswordRequiredOk returns a tuple with the PasswordRequired field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MacOsGeneralDeviceConfiguration) GetPasswordRequiredOk() (bool, bool) {
	if o == nil || o.PasswordRequired == nil {
		var ret bool
		return ret, false
	}
	return *o.PasswordRequired, true
}

// HasPasswordRequired returns a boolean if a field has been set.
func (o *MacOsGeneralDeviceConfiguration) HasPasswordRequired() bool {
	if o != nil && o.PasswordRequired != nil {
		return true
	}

	return false
}

// SetPasswordRequired gets a reference to the given bool and assigns it to the PasswordRequired field.
func (o *MacOsGeneralDeviceConfiguration) SetPasswordRequired(v bool) {
	o.PasswordRequired = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MacOsGeneralDeviceConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompliantAppsList != nil {
		toSerialize["compliantAppsList"] = o.CompliantAppsList
	}
	if o.CompliantAppListType != nil {
		toSerialize["compliantAppListType"] = o.CompliantAppListType
	}
	if o.EmailInDomainSuffixes != nil {
		toSerialize["emailInDomainSuffixes"] = o.EmailInDomainSuffixes
	}
	if o.PasswordBlockSimple != nil {
		toSerialize["passwordBlockSimple"] = o.PasswordBlockSimple
	}
	if o.PasswordExpirationDays == nil {
		if o.isExplicitNullPasswordExpirationDays {
			toSerialize["passwordExpirationDays"] = o.PasswordExpirationDays
		}
	} else {
		toSerialize["passwordExpirationDays"] = o.PasswordExpirationDays
	}
	if o.PasswordMinimumCharacterSetCount == nil {
		if o.isExplicitNullPasswordMinimumCharacterSetCount {
			toSerialize["passwordMinimumCharacterSetCount"] = o.PasswordMinimumCharacterSetCount
		}
	} else {
		toSerialize["passwordMinimumCharacterSetCount"] = o.PasswordMinimumCharacterSetCount
	}
	if o.PasswordMinimumLength == nil {
		if o.isExplicitNullPasswordMinimumLength {
			toSerialize["passwordMinimumLength"] = o.PasswordMinimumLength
		}
	} else {
		toSerialize["passwordMinimumLength"] = o.PasswordMinimumLength
	}
	if o.PasswordMinutesOfInactivityBeforeLock == nil {
		if o.isExplicitNullPasswordMinutesOfInactivityBeforeLock {
			toSerialize["passwordMinutesOfInactivityBeforeLock"] = o.PasswordMinutesOfInactivityBeforeLock
		}
	} else {
		toSerialize["passwordMinutesOfInactivityBeforeLock"] = o.PasswordMinutesOfInactivityBeforeLock
	}
	if o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		if o.isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout {
			toSerialize["passwordMinutesOfInactivityBeforeScreenTimeout"] = o.PasswordMinutesOfInactivityBeforeScreenTimeout
		}
	} else {
		toSerialize["passwordMinutesOfInactivityBeforeScreenTimeout"] = o.PasswordMinutesOfInactivityBeforeScreenTimeout
	}
	if o.PasswordPreviousPasswordBlockCount == nil {
		if o.isExplicitNullPasswordPreviousPasswordBlockCount {
			toSerialize["passwordPreviousPasswordBlockCount"] = o.PasswordPreviousPasswordBlockCount
		}
	} else {
		toSerialize["passwordPreviousPasswordBlockCount"] = o.PasswordPreviousPasswordBlockCount
	}
	if o.PasswordRequiredType != nil {
		toSerialize["passwordRequiredType"] = o.PasswordRequiredType
	}
	if o.PasswordRequired != nil {
		toSerialize["passwordRequired"] = o.PasswordRequired
	}
	return json.Marshal(toSerialize)
}


