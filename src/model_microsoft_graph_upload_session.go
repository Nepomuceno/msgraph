/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphUploadSession struct for MicrosoftGraphUploadSession
type MicrosoftGraphUploadSession struct {
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	isExplicitNullExpirationDateTime bool `json:"-"`
	NextExpectedRanges *[]string `json:"nextExpectedRanges,omitempty"`

	UploadUrl *string `json:"uploadUrl,omitempty"`
	isExplicitNullUploadUrl bool `json:"-"`
}

// GetExpirationDateTime returns the ExpirationDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUploadSession) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUploadSession) GetExpirationDateTimeOk() (time.Time, bool) {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime != nil {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *MicrosoftGraphUploadSession) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// SetExpirationDateTimeExplicitNull (un)sets ExpirationDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ExpirationDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphUploadSession) SetExpirationDateTimeExplicitNull(b bool) {
	o.ExpirationDateTime = nil
	o.isExplicitNullExpirationDateTime = b
}
// GetNextExpectedRanges returns the NextExpectedRanges field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUploadSession) GetNextExpectedRanges() []string {
	if o == nil || o.NextExpectedRanges == nil {
		var ret []string
		return ret
	}
	return *o.NextExpectedRanges
}

// GetNextExpectedRangesOk returns a tuple with the NextExpectedRanges field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUploadSession) GetNextExpectedRangesOk() ([]string, bool) {
	if o == nil || o.NextExpectedRanges == nil {
		var ret []string
		return ret, false
	}
	return *o.NextExpectedRanges, true
}

// HasNextExpectedRanges returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasNextExpectedRanges() bool {
	if o != nil && o.NextExpectedRanges != nil {
		return true
	}

	return false
}

// SetNextExpectedRanges gets a reference to the given []string and assigns it to the NextExpectedRanges field.
func (o *MicrosoftGraphUploadSession) SetNextExpectedRanges(v []string) {
	o.NextExpectedRanges = &v
}

// GetUploadUrl returns the UploadUrl field if non-nil, zero value otherwise.
func (o *MicrosoftGraphUploadSession) GetUploadUrl() string {
	if o == nil || o.UploadUrl == nil {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUploadSession) GetUploadUrlOk() (string, bool) {
	if o == nil || o.UploadUrl == nil {
		var ret string
		return ret, false
	}
	return *o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasUploadUrl() bool {
	if o != nil && o.UploadUrl != nil {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *MicrosoftGraphUploadSession) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

// SetUploadUrlExplicitNull (un)sets UploadUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UploadUrl value is set to nil even if false is passed
func (o *MicrosoftGraphUploadSession) SetUploadUrlExplicitNull(b bool) {
	o.UploadUrl = nil
	o.isExplicitNullUploadUrl = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphUploadSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpirationDateTime == nil {
		if o.isExplicitNullExpirationDateTime {
			toSerialize["expirationDateTime"] = o.ExpirationDateTime
		}
	} else {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if o.NextExpectedRanges != nil {
		toSerialize["nextExpectedRanges"] = o.NextExpectedRanges
	}
	if o.UploadUrl == nil {
		if o.isExplicitNullUploadUrl {
			toSerialize["uploadUrl"] = o.UploadUrl
		}
	} else {
		toSerialize["uploadUrl"] = o.UploadUrl
	}
	return json.Marshal(toSerialize)
}


