/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MobileAppContentFile Contains properties for a single installer file that is associated with a given mobileAppContent version.
type MobileAppContentFile struct {
	// The Azure Storage URI.
	AzureStorageUri *string `json:"azureStorageUri,omitempty"`
	isExplicitNullAzureStorageUri bool `json:"-"`
	// A value indicating whether the file is committed.
	IsCommitted *bool `json:"isCommitted,omitempty"`

	// The time the file was created.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// the file name.
	Name *string `json:"name,omitempty"`
	isExplicitNullName bool `json:"-"`
	// The size of the file prior to encryption.
	Size *int64 `json:"size,omitempty"`

	// The size of the file after encryption.
	SizeEncrypted *int64 `json:"sizeEncrypted,omitempty"`

	// The time the Azure storage Uri expires.
	AzureStorageUriExpirationDateTime *time.Time `json:"azureStorageUriExpirationDateTime,omitempty"`
	isExplicitNullAzureStorageUriExpirationDateTime bool `json:"-"`
	// The manifest information.
	Manifest *string `json:"manifest,omitempty"`
	isExplicitNullManifest bool `json:"-"`
	// The state of the current upload request.
	UploadState *AnyOfmicrosoftGraphMobileAppContentFileUploadState `json:"uploadState,omitempty"`

}

// GetAzureStorageUri returns the AzureStorageUri field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetAzureStorageUri() string {
	if o == nil || o.AzureStorageUri == nil {
		var ret string
		return ret
	}
	return *o.AzureStorageUri
}

// GetAzureStorageUriOk returns a tuple with the AzureStorageUri field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetAzureStorageUriOk() (string, bool) {
	if o == nil || o.AzureStorageUri == nil {
		var ret string
		return ret, false
	}
	return *o.AzureStorageUri, true
}

// HasAzureStorageUri returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasAzureStorageUri() bool {
	if o != nil && o.AzureStorageUri != nil {
		return true
	}

	return false
}

// SetAzureStorageUri gets a reference to the given string and assigns it to the AzureStorageUri field.
func (o *MobileAppContentFile) SetAzureStorageUri(v string) {
	o.AzureStorageUri = &v
}

// SetAzureStorageUriExplicitNull (un)sets AzureStorageUri to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AzureStorageUri value is set to nil even if false is passed
func (o *MobileAppContentFile) SetAzureStorageUriExplicitNull(b bool) {
	o.AzureStorageUri = nil
	o.isExplicitNullAzureStorageUri = b
}
// GetIsCommitted returns the IsCommitted field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetIsCommitted() bool {
	if o == nil || o.IsCommitted == nil {
		var ret bool
		return ret
	}
	return *o.IsCommitted
}

// GetIsCommittedOk returns a tuple with the IsCommitted field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetIsCommittedOk() (bool, bool) {
	if o == nil || o.IsCommitted == nil {
		var ret bool
		return ret, false
	}
	return *o.IsCommitted, true
}

// HasIsCommitted returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasIsCommitted() bool {
	if o != nil && o.IsCommitted != nil {
		return true
	}

	return false
}

// SetIsCommitted gets a reference to the given bool and assigns it to the IsCommitted field.
func (o *MobileAppContentFile) SetIsCommitted(v bool) {
	o.IsCommitted = &v
}

// GetCreatedDateTime returns the CreatedDateTime field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetCreatedDateTimeOk() (time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *MobileAppContentFile) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MobileAppContentFile) SetName(v string) {
	o.Name = &v
}

// SetNameExplicitNull (un)sets Name to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Name value is set to nil even if false is passed
func (o *MobileAppContentFile) SetNameExplicitNull(b bool) {
	o.Name = nil
	o.isExplicitNullName = b
}
// GetSize returns the Size field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetSizeOk() (int64, bool) {
	if o == nil || o.Size == nil {
		var ret int64
		return ret, false
	}
	return *o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *MobileAppContentFile) SetSize(v int64) {
	o.Size = &v
}

// GetSizeEncrypted returns the SizeEncrypted field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetSizeEncrypted() int64 {
	if o == nil || o.SizeEncrypted == nil {
		var ret int64
		return ret
	}
	return *o.SizeEncrypted
}

// GetSizeEncryptedOk returns a tuple with the SizeEncrypted field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetSizeEncryptedOk() (int64, bool) {
	if o == nil || o.SizeEncrypted == nil {
		var ret int64
		return ret, false
	}
	return *o.SizeEncrypted, true
}

// HasSizeEncrypted returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasSizeEncrypted() bool {
	if o != nil && o.SizeEncrypted != nil {
		return true
	}

	return false
}

// SetSizeEncrypted gets a reference to the given int64 and assigns it to the SizeEncrypted field.
func (o *MobileAppContentFile) SetSizeEncrypted(v int64) {
	o.SizeEncrypted = &v
}

// GetAzureStorageUriExpirationDateTime returns the AzureStorageUriExpirationDateTime field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetAzureStorageUriExpirationDateTime() time.Time {
	if o == nil || o.AzureStorageUriExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.AzureStorageUriExpirationDateTime
}

// GetAzureStorageUriExpirationDateTimeOk returns a tuple with the AzureStorageUriExpirationDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetAzureStorageUriExpirationDateTimeOk() (time.Time, bool) {
	if o == nil || o.AzureStorageUriExpirationDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AzureStorageUriExpirationDateTime, true
}

// HasAzureStorageUriExpirationDateTime returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasAzureStorageUriExpirationDateTime() bool {
	if o != nil && o.AzureStorageUriExpirationDateTime != nil {
		return true
	}

	return false
}

// SetAzureStorageUriExpirationDateTime gets a reference to the given time.Time and assigns it to the AzureStorageUriExpirationDateTime field.
func (o *MobileAppContentFile) SetAzureStorageUriExpirationDateTime(v time.Time) {
	o.AzureStorageUriExpirationDateTime = &v
}

// SetAzureStorageUriExpirationDateTimeExplicitNull (un)sets AzureStorageUriExpirationDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AzureStorageUriExpirationDateTime value is set to nil even if false is passed
func (o *MobileAppContentFile) SetAzureStorageUriExpirationDateTimeExplicitNull(b bool) {
	o.AzureStorageUriExpirationDateTime = nil
	o.isExplicitNullAzureStorageUriExpirationDateTime = b
}
// GetManifest returns the Manifest field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetManifest() string {
	if o == nil || o.Manifest == nil {
		var ret string
		return ret
	}
	return *o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetManifestOk() (string, bool) {
	if o == nil || o.Manifest == nil {
		var ret string
		return ret, false
	}
	return *o.Manifest, true
}

// HasManifest returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasManifest() bool {
	if o != nil && o.Manifest != nil {
		return true
	}

	return false
}

// SetManifest gets a reference to the given string and assigns it to the Manifest field.
func (o *MobileAppContentFile) SetManifest(v string) {
	o.Manifest = &v
}

// SetManifestExplicitNull (un)sets Manifest to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Manifest value is set to nil even if false is passed
func (o *MobileAppContentFile) SetManifestExplicitNull(b bool) {
	o.Manifest = nil
	o.isExplicitNullManifest = b
}
// GetUploadState returns the UploadState field if non-nil, zero value otherwise.
func (o *MobileAppContentFile) GetUploadState() AnyOfmicrosoftGraphMobileAppContentFileUploadState {
	if o == nil || o.UploadState == nil {
		var ret AnyOfmicrosoftGraphMobileAppContentFileUploadState
		return ret
	}
	return *o.UploadState
}

// GetUploadStateOk returns a tuple with the UploadState field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppContentFile) GetUploadStateOk() (AnyOfmicrosoftGraphMobileAppContentFileUploadState, bool) {
	if o == nil || o.UploadState == nil {
		var ret AnyOfmicrosoftGraphMobileAppContentFileUploadState
		return ret, false
	}
	return *o.UploadState, true
}

// HasUploadState returns a boolean if a field has been set.
func (o *MobileAppContentFile) HasUploadState() bool {
	if o != nil && o.UploadState != nil {
		return true
	}

	return false
}

// SetUploadState gets a reference to the given AnyOfmicrosoftGraphMobileAppContentFileUploadState and assigns it to the UploadState field.
func (o *MobileAppContentFile) SetUploadState(v AnyOfmicrosoftGraphMobileAppContentFileUploadState) {
	o.UploadState = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MobileAppContentFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AzureStorageUri == nil {
		if o.isExplicitNullAzureStorageUri {
			toSerialize["azureStorageUri"] = o.AzureStorageUri
		}
	} else {
		toSerialize["azureStorageUri"] = o.AzureStorageUri
	}
	if o.IsCommitted != nil {
		toSerialize["isCommitted"] = o.IsCommitted
	}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.Name == nil {
		if o.isExplicitNullName {
			toSerialize["name"] = o.Name
		}
	} else {
		toSerialize["name"] = o.Name
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.SizeEncrypted != nil {
		toSerialize["sizeEncrypted"] = o.SizeEncrypted
	}
	if o.AzureStorageUriExpirationDateTime == nil {
		if o.isExplicitNullAzureStorageUriExpirationDateTime {
			toSerialize["azureStorageUriExpirationDateTime"] = o.AzureStorageUriExpirationDateTime
		}
	} else {
		toSerialize["azureStorageUriExpirationDateTime"] = o.AzureStorageUriExpirationDateTime
	}
	if o.Manifest == nil {
		if o.isExplicitNullManifest {
			toSerialize["manifest"] = o.Manifest
		}
	} else {
		toSerialize["manifest"] = o.Manifest
	}
	if o.UploadState != nil {
		toSerialize["uploadState"] = o.UploadState
	}
	return json.Marshal(toSerialize)
}


