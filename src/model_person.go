/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// Person struct for Person
type Person struct {
	DisplayName *string `json:"displayName,omitempty"`
	isExplicitNullDisplayName bool `json:"-"`
	GivenName *string `json:"givenName,omitempty"`
	isExplicitNullGivenName bool `json:"-"`
	Surname *string `json:"surname,omitempty"`
	isExplicitNullSurname bool `json:"-"`
	Birthday *string `json:"birthday,omitempty"`
	isExplicitNullBirthday bool `json:"-"`
	PersonNotes *string `json:"personNotes,omitempty"`
	isExplicitNullPersonNotes bool `json:"-"`
	IsFavorite *bool `json:"isFavorite,omitempty"`
	isExplicitNullIsFavorite bool `json:"-"`
	ScoredEmailAddresses *[]AnyOfmicrosoftGraphScoredEmailAddress `json:"scoredEmailAddresses,omitempty"`

	Phones *[]AnyOfmicrosoftGraphPhone `json:"phones,omitempty"`

	PostalAddresses *[]AnyOfmicrosoftGraphLocation `json:"postalAddresses,omitempty"`

	Websites *[]AnyOfmicrosoftGraphWebsite `json:"websites,omitempty"`

	JobTitle *string `json:"jobTitle,omitempty"`
	isExplicitNullJobTitle bool `json:"-"`
	CompanyName *string `json:"companyName,omitempty"`
	isExplicitNullCompanyName bool `json:"-"`
	YomiCompany *string `json:"yomiCompany,omitempty"`
	isExplicitNullYomiCompany bool `json:"-"`
	Department *string `json:"department,omitempty"`
	isExplicitNullDepartment bool `json:"-"`
	OfficeLocation *string `json:"officeLocation,omitempty"`
	isExplicitNullOfficeLocation bool `json:"-"`
	Profession *string `json:"profession,omitempty"`
	isExplicitNullProfession bool `json:"-"`
	PersonType *AnyOfmicrosoftGraphPersonType `json:"personType,omitempty"`
	isExplicitNullPersonType bool `json:"-"`
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	isExplicitNullUserPrincipalName bool `json:"-"`
	ImAddress *string `json:"imAddress,omitempty"`
	isExplicitNullImAddress bool `json:"-"`
}

// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *Person) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Person) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Person) SetDisplayName(v string) {
	o.DisplayName = &v
}

// SetDisplayNameExplicitNull (un)sets DisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DisplayName value is set to nil even if false is passed
func (o *Person) SetDisplayNameExplicitNull(b bool) {
	o.DisplayName = nil
	o.isExplicitNullDisplayName = b
}
// GetGivenName returns the GivenName field if non-nil, zero value otherwise.
func (o *Person) GetGivenName() string {
	if o == nil || o.GivenName == nil {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetGivenNameOk() (string, bool) {
	if o == nil || o.GivenName == nil {
		var ret string
		return ret, false
	}
	return *o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *Person) HasGivenName() bool {
	if o != nil && o.GivenName != nil {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *Person) SetGivenName(v string) {
	o.GivenName = &v
}

// SetGivenNameExplicitNull (un)sets GivenName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The GivenName value is set to nil even if false is passed
func (o *Person) SetGivenNameExplicitNull(b bool) {
	o.GivenName = nil
	o.isExplicitNullGivenName = b
}
// GetSurname returns the Surname field if non-nil, zero value otherwise.
func (o *Person) GetSurname() string {
	if o == nil || o.Surname == nil {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetSurnameOk() (string, bool) {
	if o == nil || o.Surname == nil {
		var ret string
		return ret, false
	}
	return *o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *Person) HasSurname() bool {
	if o != nil && o.Surname != nil {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *Person) SetSurname(v string) {
	o.Surname = &v
}

// SetSurnameExplicitNull (un)sets Surname to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Surname value is set to nil even if false is passed
func (o *Person) SetSurnameExplicitNull(b bool) {
	o.Surname = nil
	o.isExplicitNullSurname = b
}
// GetBirthday returns the Birthday field if non-nil, zero value otherwise.
func (o *Person) GetBirthday() string {
	if o == nil || o.Birthday == nil {
		var ret string
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetBirthdayOk() (string, bool) {
	if o == nil || o.Birthday == nil {
		var ret string
		return ret, false
	}
	return *o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *Person) HasBirthday() bool {
	if o != nil && o.Birthday != nil {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given string and assigns it to the Birthday field.
func (o *Person) SetBirthday(v string) {
	o.Birthday = &v
}

// SetBirthdayExplicitNull (un)sets Birthday to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Birthday value is set to nil even if false is passed
func (o *Person) SetBirthdayExplicitNull(b bool) {
	o.Birthday = nil
	o.isExplicitNullBirthday = b
}
// GetPersonNotes returns the PersonNotes field if non-nil, zero value otherwise.
func (o *Person) GetPersonNotes() string {
	if o == nil || o.PersonNotes == nil {
		var ret string
		return ret
	}
	return *o.PersonNotes
}

// GetPersonNotesOk returns a tuple with the PersonNotes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPersonNotesOk() (string, bool) {
	if o == nil || o.PersonNotes == nil {
		var ret string
		return ret, false
	}
	return *o.PersonNotes, true
}

// HasPersonNotes returns a boolean if a field has been set.
func (o *Person) HasPersonNotes() bool {
	if o != nil && o.PersonNotes != nil {
		return true
	}

	return false
}

// SetPersonNotes gets a reference to the given string and assigns it to the PersonNotes field.
func (o *Person) SetPersonNotes(v string) {
	o.PersonNotes = &v
}

// SetPersonNotesExplicitNull (un)sets PersonNotes to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PersonNotes value is set to nil even if false is passed
func (o *Person) SetPersonNotesExplicitNull(b bool) {
	o.PersonNotes = nil
	o.isExplicitNullPersonNotes = b
}
// GetIsFavorite returns the IsFavorite field if non-nil, zero value otherwise.
func (o *Person) GetIsFavorite() bool {
	if o == nil || o.IsFavorite == nil {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetIsFavoriteOk() (bool, bool) {
	if o == nil || o.IsFavorite == nil {
		var ret bool
		return ret, false
	}
	return *o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *Person) HasIsFavorite() bool {
	if o != nil && o.IsFavorite != nil {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *Person) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// SetIsFavoriteExplicitNull (un)sets IsFavorite to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IsFavorite value is set to nil even if false is passed
func (o *Person) SetIsFavoriteExplicitNull(b bool) {
	o.IsFavorite = nil
	o.isExplicitNullIsFavorite = b
}
// GetScoredEmailAddresses returns the ScoredEmailAddresses field if non-nil, zero value otherwise.
func (o *Person) GetScoredEmailAddresses() []AnyOfmicrosoftGraphScoredEmailAddress {
	if o == nil || o.ScoredEmailAddresses == nil {
		var ret []AnyOfmicrosoftGraphScoredEmailAddress
		return ret
	}
	return *o.ScoredEmailAddresses
}

// GetScoredEmailAddressesOk returns a tuple with the ScoredEmailAddresses field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetScoredEmailAddressesOk() ([]AnyOfmicrosoftGraphScoredEmailAddress, bool) {
	if o == nil || o.ScoredEmailAddresses == nil {
		var ret []AnyOfmicrosoftGraphScoredEmailAddress
		return ret, false
	}
	return *o.ScoredEmailAddresses, true
}

// HasScoredEmailAddresses returns a boolean if a field has been set.
func (o *Person) HasScoredEmailAddresses() bool {
	if o != nil && o.ScoredEmailAddresses != nil {
		return true
	}

	return false
}

// SetScoredEmailAddresses gets a reference to the given []AnyOfmicrosoftGraphScoredEmailAddress and assigns it to the ScoredEmailAddresses field.
func (o *Person) SetScoredEmailAddresses(v []AnyOfmicrosoftGraphScoredEmailAddress) {
	o.ScoredEmailAddresses = &v
}

// GetPhones returns the Phones field if non-nil, zero value otherwise.
func (o *Person) GetPhones() []AnyOfmicrosoftGraphPhone {
	if o == nil || o.Phones == nil {
		var ret []AnyOfmicrosoftGraphPhone
		return ret
	}
	return *o.Phones
}

// GetPhonesOk returns a tuple with the Phones field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPhonesOk() ([]AnyOfmicrosoftGraphPhone, bool) {
	if o == nil || o.Phones == nil {
		var ret []AnyOfmicrosoftGraphPhone
		return ret, false
	}
	return *o.Phones, true
}

// HasPhones returns a boolean if a field has been set.
func (o *Person) HasPhones() bool {
	if o != nil && o.Phones != nil {
		return true
	}

	return false
}

// SetPhones gets a reference to the given []AnyOfmicrosoftGraphPhone and assigns it to the Phones field.
func (o *Person) SetPhones(v []AnyOfmicrosoftGraphPhone) {
	o.Phones = &v
}

// GetPostalAddresses returns the PostalAddresses field if non-nil, zero value otherwise.
func (o *Person) GetPostalAddresses() []AnyOfmicrosoftGraphLocation {
	if o == nil || o.PostalAddresses == nil {
		var ret []AnyOfmicrosoftGraphLocation
		return ret
	}
	return *o.PostalAddresses
}

// GetPostalAddressesOk returns a tuple with the PostalAddresses field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPostalAddressesOk() ([]AnyOfmicrosoftGraphLocation, bool) {
	if o == nil || o.PostalAddresses == nil {
		var ret []AnyOfmicrosoftGraphLocation
		return ret, false
	}
	return *o.PostalAddresses, true
}

// HasPostalAddresses returns a boolean if a field has been set.
func (o *Person) HasPostalAddresses() bool {
	if o != nil && o.PostalAddresses != nil {
		return true
	}

	return false
}

// SetPostalAddresses gets a reference to the given []AnyOfmicrosoftGraphLocation and assigns it to the PostalAddresses field.
func (o *Person) SetPostalAddresses(v []AnyOfmicrosoftGraphLocation) {
	o.PostalAddresses = &v
}

// GetWebsites returns the Websites field if non-nil, zero value otherwise.
func (o *Person) GetWebsites() []AnyOfmicrosoftGraphWebsite {
	if o == nil || o.Websites == nil {
		var ret []AnyOfmicrosoftGraphWebsite
		return ret
	}
	return *o.Websites
}

// GetWebsitesOk returns a tuple with the Websites field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetWebsitesOk() ([]AnyOfmicrosoftGraphWebsite, bool) {
	if o == nil || o.Websites == nil {
		var ret []AnyOfmicrosoftGraphWebsite
		return ret, false
	}
	return *o.Websites, true
}

// HasWebsites returns a boolean if a field has been set.
func (o *Person) HasWebsites() bool {
	if o != nil && o.Websites != nil {
		return true
	}

	return false
}

// SetWebsites gets a reference to the given []AnyOfmicrosoftGraphWebsite and assigns it to the Websites field.
func (o *Person) SetWebsites(v []AnyOfmicrosoftGraphWebsite) {
	o.Websites = &v
}

// GetJobTitle returns the JobTitle field if non-nil, zero value otherwise.
func (o *Person) GetJobTitle() string {
	if o == nil || o.JobTitle == nil {
		var ret string
		return ret
	}
	return *o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetJobTitleOk() (string, bool) {
	if o == nil || o.JobTitle == nil {
		var ret string
		return ret, false
	}
	return *o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *Person) HasJobTitle() bool {
	if o != nil && o.JobTitle != nil {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given string and assigns it to the JobTitle field.
func (o *Person) SetJobTitle(v string) {
	o.JobTitle = &v
}

// SetJobTitleExplicitNull (un)sets JobTitle to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The JobTitle value is set to nil even if false is passed
func (o *Person) SetJobTitleExplicitNull(b bool) {
	o.JobTitle = nil
	o.isExplicitNullJobTitle = b
}
// GetCompanyName returns the CompanyName field if non-nil, zero value otherwise.
func (o *Person) GetCompanyName() string {
	if o == nil || o.CompanyName == nil {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetCompanyNameOk() (string, bool) {
	if o == nil || o.CompanyName == nil {
		var ret string
		return ret, false
	}
	return *o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *Person) HasCompanyName() bool {
	if o != nil && o.CompanyName != nil {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *Person) SetCompanyName(v string) {
	o.CompanyName = &v
}

// SetCompanyNameExplicitNull (un)sets CompanyName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CompanyName value is set to nil even if false is passed
func (o *Person) SetCompanyNameExplicitNull(b bool) {
	o.CompanyName = nil
	o.isExplicitNullCompanyName = b
}
// GetYomiCompany returns the YomiCompany field if non-nil, zero value otherwise.
func (o *Person) GetYomiCompany() string {
	if o == nil || o.YomiCompany == nil {
		var ret string
		return ret
	}
	return *o.YomiCompany
}

// GetYomiCompanyOk returns a tuple with the YomiCompany field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetYomiCompanyOk() (string, bool) {
	if o == nil || o.YomiCompany == nil {
		var ret string
		return ret, false
	}
	return *o.YomiCompany, true
}

// HasYomiCompany returns a boolean if a field has been set.
func (o *Person) HasYomiCompany() bool {
	if o != nil && o.YomiCompany != nil {
		return true
	}

	return false
}

// SetYomiCompany gets a reference to the given string and assigns it to the YomiCompany field.
func (o *Person) SetYomiCompany(v string) {
	o.YomiCompany = &v
}

// SetYomiCompanyExplicitNull (un)sets YomiCompany to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The YomiCompany value is set to nil even if false is passed
func (o *Person) SetYomiCompanyExplicitNull(b bool) {
	o.YomiCompany = nil
	o.isExplicitNullYomiCompany = b
}
// GetDepartment returns the Department field if non-nil, zero value otherwise.
func (o *Person) GetDepartment() string {
	if o == nil || o.Department == nil {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetDepartmentOk() (string, bool) {
	if o == nil || o.Department == nil {
		var ret string
		return ret, false
	}
	return *o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Person) HasDepartment() bool {
	if o != nil && o.Department != nil {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *Person) SetDepartment(v string) {
	o.Department = &v
}

// SetDepartmentExplicitNull (un)sets Department to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Department value is set to nil even if false is passed
func (o *Person) SetDepartmentExplicitNull(b bool) {
	o.Department = nil
	o.isExplicitNullDepartment = b
}
// GetOfficeLocation returns the OfficeLocation field if non-nil, zero value otherwise.
func (o *Person) GetOfficeLocation() string {
	if o == nil || o.OfficeLocation == nil {
		var ret string
		return ret
	}
	return *o.OfficeLocation
}

// GetOfficeLocationOk returns a tuple with the OfficeLocation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetOfficeLocationOk() (string, bool) {
	if o == nil || o.OfficeLocation == nil {
		var ret string
		return ret, false
	}
	return *o.OfficeLocation, true
}

// HasOfficeLocation returns a boolean if a field has been set.
func (o *Person) HasOfficeLocation() bool {
	if o != nil && o.OfficeLocation != nil {
		return true
	}

	return false
}

// SetOfficeLocation gets a reference to the given string and assigns it to the OfficeLocation field.
func (o *Person) SetOfficeLocation(v string) {
	o.OfficeLocation = &v
}

// SetOfficeLocationExplicitNull (un)sets OfficeLocation to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OfficeLocation value is set to nil even if false is passed
func (o *Person) SetOfficeLocationExplicitNull(b bool) {
	o.OfficeLocation = nil
	o.isExplicitNullOfficeLocation = b
}
// GetProfession returns the Profession field if non-nil, zero value otherwise.
func (o *Person) GetProfession() string {
	if o == nil || o.Profession == nil {
		var ret string
		return ret
	}
	return *o.Profession
}

// GetProfessionOk returns a tuple with the Profession field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetProfessionOk() (string, bool) {
	if o == nil || o.Profession == nil {
		var ret string
		return ret, false
	}
	return *o.Profession, true
}

// HasProfession returns a boolean if a field has been set.
func (o *Person) HasProfession() bool {
	if o != nil && o.Profession != nil {
		return true
	}

	return false
}

// SetProfession gets a reference to the given string and assigns it to the Profession field.
func (o *Person) SetProfession(v string) {
	o.Profession = &v
}

// SetProfessionExplicitNull (un)sets Profession to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Profession value is set to nil even if false is passed
func (o *Person) SetProfessionExplicitNull(b bool) {
	o.Profession = nil
	o.isExplicitNullProfession = b
}
// GetPersonType returns the PersonType field if non-nil, zero value otherwise.
func (o *Person) GetPersonType() AnyOfmicrosoftGraphPersonType {
	if o == nil || o.PersonType == nil {
		var ret AnyOfmicrosoftGraphPersonType
		return ret
	}
	return *o.PersonType
}

// GetPersonTypeOk returns a tuple with the PersonType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPersonTypeOk() (AnyOfmicrosoftGraphPersonType, bool) {
	if o == nil || o.PersonType == nil {
		var ret AnyOfmicrosoftGraphPersonType
		return ret, false
	}
	return *o.PersonType, true
}

// HasPersonType returns a boolean if a field has been set.
func (o *Person) HasPersonType() bool {
	if o != nil && o.PersonType != nil {
		return true
	}

	return false
}

// SetPersonType gets a reference to the given AnyOfmicrosoftGraphPersonType and assigns it to the PersonType field.
func (o *Person) SetPersonType(v AnyOfmicrosoftGraphPersonType) {
	o.PersonType = &v
}

// SetPersonTypeExplicitNull (un)sets PersonType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PersonType value is set to nil even if false is passed
func (o *Person) SetPersonTypeExplicitNull(b bool) {
	o.PersonType = nil
	o.isExplicitNullPersonType = b
}
// GetUserPrincipalName returns the UserPrincipalName field if non-nil, zero value otherwise.
func (o *Person) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetUserPrincipalNameOk() (string, bool) {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret, false
	}
	return *o.UserPrincipalName, true
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *Person) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName != nil {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given string and assigns it to the UserPrincipalName field.
func (o *Person) SetUserPrincipalName(v string) {
	o.UserPrincipalName = &v
}

// SetUserPrincipalNameExplicitNull (un)sets UserPrincipalName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserPrincipalName value is set to nil even if false is passed
func (o *Person) SetUserPrincipalNameExplicitNull(b bool) {
	o.UserPrincipalName = nil
	o.isExplicitNullUserPrincipalName = b
}
// GetImAddress returns the ImAddress field if non-nil, zero value otherwise.
func (o *Person) GetImAddress() string {
	if o == nil || o.ImAddress == nil {
		var ret string
		return ret
	}
	return *o.ImAddress
}

// GetImAddressOk returns a tuple with the ImAddress field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetImAddressOk() (string, bool) {
	if o == nil || o.ImAddress == nil {
		var ret string
		return ret, false
	}
	return *o.ImAddress, true
}

// HasImAddress returns a boolean if a field has been set.
func (o *Person) HasImAddress() bool {
	if o != nil && o.ImAddress != nil {
		return true
	}

	return false
}

// SetImAddress gets a reference to the given string and assigns it to the ImAddress field.
func (o *Person) SetImAddress(v string) {
	o.ImAddress = &v
}

// SetImAddressExplicitNull (un)sets ImAddress to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ImAddress value is set to nil even if false is passed
func (o *Person) SetImAddressExplicitNull(b bool) {
	o.ImAddress = nil
	o.isExplicitNullImAddress = b
}

// MarshalJSON returns the JSON representation of the model.
func (o Person) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName == nil {
		if o.isExplicitNullDisplayName {
			toSerialize["displayName"] = o.DisplayName
		}
	} else {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.GivenName == nil {
		if o.isExplicitNullGivenName {
			toSerialize["givenName"] = o.GivenName
		}
	} else {
		toSerialize["givenName"] = o.GivenName
	}
	if o.Surname == nil {
		if o.isExplicitNullSurname {
			toSerialize["surname"] = o.Surname
		}
	} else {
		toSerialize["surname"] = o.Surname
	}
	if o.Birthday == nil {
		if o.isExplicitNullBirthday {
			toSerialize["birthday"] = o.Birthday
		}
	} else {
		toSerialize["birthday"] = o.Birthday
	}
	if o.PersonNotes == nil {
		if o.isExplicitNullPersonNotes {
			toSerialize["personNotes"] = o.PersonNotes
		}
	} else {
		toSerialize["personNotes"] = o.PersonNotes
	}
	if o.IsFavorite == nil {
		if o.isExplicitNullIsFavorite {
			toSerialize["isFavorite"] = o.IsFavorite
		}
	} else {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	if o.ScoredEmailAddresses != nil {
		toSerialize["scoredEmailAddresses"] = o.ScoredEmailAddresses
	}
	if o.Phones != nil {
		toSerialize["phones"] = o.Phones
	}
	if o.PostalAddresses != nil {
		toSerialize["postalAddresses"] = o.PostalAddresses
	}
	if o.Websites != nil {
		toSerialize["websites"] = o.Websites
	}
	if o.JobTitle == nil {
		if o.isExplicitNullJobTitle {
			toSerialize["jobTitle"] = o.JobTitle
		}
	} else {
		toSerialize["jobTitle"] = o.JobTitle
	}
	if o.CompanyName == nil {
		if o.isExplicitNullCompanyName {
			toSerialize["companyName"] = o.CompanyName
		}
	} else {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.YomiCompany == nil {
		if o.isExplicitNullYomiCompany {
			toSerialize["yomiCompany"] = o.YomiCompany
		}
	} else {
		toSerialize["yomiCompany"] = o.YomiCompany
	}
	if o.Department == nil {
		if o.isExplicitNullDepartment {
			toSerialize["department"] = o.Department
		}
	} else {
		toSerialize["department"] = o.Department
	}
	if o.OfficeLocation == nil {
		if o.isExplicitNullOfficeLocation {
			toSerialize["officeLocation"] = o.OfficeLocation
		}
	} else {
		toSerialize["officeLocation"] = o.OfficeLocation
	}
	if o.Profession == nil {
		if o.isExplicitNullProfession {
			toSerialize["profession"] = o.Profession
		}
	} else {
		toSerialize["profession"] = o.Profession
	}
	if o.PersonType == nil {
		if o.isExplicitNullPersonType {
			toSerialize["personType"] = o.PersonType
		}
	} else {
		toSerialize["personType"] = o.PersonType
	}
	if o.UserPrincipalName == nil {
		if o.isExplicitNullUserPrincipalName {
			toSerialize["userPrincipalName"] = o.UserPrincipalName
		}
	} else {
		toSerialize["userPrincipalName"] = o.UserPrincipalName
	}
	if o.ImAddress == nil {
		if o.isExplicitNullImAddress {
			toSerialize["imAddress"] = o.ImAddress
		}
	} else {
		toSerialize["imAddress"] = o.ImAddress
	}
	return json.Marshal(toSerialize)
}


