/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary struct for MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary
type MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary struct {
	Id *string `json:"id,omitempty"`

	// Number of devices that are in grace period
	InGracePeriodCount *int32 `json:"inGracePeriodCount,omitempty"`

	// Number of devices that have compliance managed by System Center Configuration Manager
	ConfigManagerCount *int32 `json:"configManagerCount,omitempty"`

	// Number of unknown devices
	UnknownDeviceCount *int32 `json:"unknownDeviceCount,omitempty"`

	// Number of not applicable devices
	NotApplicableDeviceCount *int32 `json:"notApplicableDeviceCount,omitempty"`

	// Number of compliant devices
	CompliantDeviceCount *int32 `json:"compliantDeviceCount,omitempty"`

	// Number of remediated devices
	RemediatedDeviceCount *int32 `json:"remediatedDeviceCount,omitempty"`

	// Number of NonCompliant devices
	NonCompliantDeviceCount *int32 `json:"nonCompliantDeviceCount,omitempty"`

	// Number of error devices
	ErrorDeviceCount *int32 `json:"errorDeviceCount,omitempty"`

	// Number of conflict devices
	ConflictDeviceCount *int32 `json:"conflictDeviceCount,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetId(v string) {
	o.Id = &v
}

// GetInGracePeriodCount returns the InGracePeriodCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetInGracePeriodCount() int32 {
	if o == nil || o.InGracePeriodCount == nil {
		var ret int32
		return ret
	}
	return *o.InGracePeriodCount
}

// GetInGracePeriodCountOk returns a tuple with the InGracePeriodCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetInGracePeriodCountOk() (int32, bool) {
	if o == nil || o.InGracePeriodCount == nil {
		var ret int32
		return ret, false
	}
	return *o.InGracePeriodCount, true
}

// HasInGracePeriodCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasInGracePeriodCount() bool {
	if o != nil && o.InGracePeriodCount != nil {
		return true
	}

	return false
}

// SetInGracePeriodCount gets a reference to the given int32 and assigns it to the InGracePeriodCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetInGracePeriodCount(v int32) {
	o.InGracePeriodCount = &v
}

// GetConfigManagerCount returns the ConfigManagerCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetConfigManagerCount() int32 {
	if o == nil || o.ConfigManagerCount == nil {
		var ret int32
		return ret
	}
	return *o.ConfigManagerCount
}

// GetConfigManagerCountOk returns a tuple with the ConfigManagerCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetConfigManagerCountOk() (int32, bool) {
	if o == nil || o.ConfigManagerCount == nil {
		var ret int32
		return ret, false
	}
	return *o.ConfigManagerCount, true
}

// HasConfigManagerCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasConfigManagerCount() bool {
	if o != nil && o.ConfigManagerCount != nil {
		return true
	}

	return false
}

// SetConfigManagerCount gets a reference to the given int32 and assigns it to the ConfigManagerCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetConfigManagerCount(v int32) {
	o.ConfigManagerCount = &v
}

// GetUnknownDeviceCount returns the UnknownDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetUnknownDeviceCount() int32 {
	if o == nil || o.UnknownDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.UnknownDeviceCount
}

// GetUnknownDeviceCountOk returns a tuple with the UnknownDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetUnknownDeviceCountOk() (int32, bool) {
	if o == nil || o.UnknownDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.UnknownDeviceCount, true
}

// HasUnknownDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasUnknownDeviceCount() bool {
	if o != nil && o.UnknownDeviceCount != nil {
		return true
	}

	return false
}

// SetUnknownDeviceCount gets a reference to the given int32 and assigns it to the UnknownDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetUnknownDeviceCount(v int32) {
	o.UnknownDeviceCount = &v
}

// GetNotApplicableDeviceCount returns the NotApplicableDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetNotApplicableDeviceCount() int32 {
	if o == nil || o.NotApplicableDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.NotApplicableDeviceCount
}

// GetNotApplicableDeviceCountOk returns a tuple with the NotApplicableDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetNotApplicableDeviceCountOk() (int32, bool) {
	if o == nil || o.NotApplicableDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.NotApplicableDeviceCount, true
}

// HasNotApplicableDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasNotApplicableDeviceCount() bool {
	if o != nil && o.NotApplicableDeviceCount != nil {
		return true
	}

	return false
}

// SetNotApplicableDeviceCount gets a reference to the given int32 and assigns it to the NotApplicableDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetNotApplicableDeviceCount(v int32) {
	o.NotApplicableDeviceCount = &v
}

// GetCompliantDeviceCount returns the CompliantDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetCompliantDeviceCount() int32 {
	if o == nil || o.CompliantDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.CompliantDeviceCount
}

// GetCompliantDeviceCountOk returns a tuple with the CompliantDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetCompliantDeviceCountOk() (int32, bool) {
	if o == nil || o.CompliantDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.CompliantDeviceCount, true
}

// HasCompliantDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasCompliantDeviceCount() bool {
	if o != nil && o.CompliantDeviceCount != nil {
		return true
	}

	return false
}

// SetCompliantDeviceCount gets a reference to the given int32 and assigns it to the CompliantDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetCompliantDeviceCount(v int32) {
	o.CompliantDeviceCount = &v
}

// GetRemediatedDeviceCount returns the RemediatedDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetRemediatedDeviceCount() int32 {
	if o == nil || o.RemediatedDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.RemediatedDeviceCount
}

// GetRemediatedDeviceCountOk returns a tuple with the RemediatedDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetRemediatedDeviceCountOk() (int32, bool) {
	if o == nil || o.RemediatedDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.RemediatedDeviceCount, true
}

// HasRemediatedDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasRemediatedDeviceCount() bool {
	if o != nil && o.RemediatedDeviceCount != nil {
		return true
	}

	return false
}

// SetRemediatedDeviceCount gets a reference to the given int32 and assigns it to the RemediatedDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetRemediatedDeviceCount(v int32) {
	o.RemediatedDeviceCount = &v
}

// GetNonCompliantDeviceCount returns the NonCompliantDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetNonCompliantDeviceCount() int32 {
	if o == nil || o.NonCompliantDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.NonCompliantDeviceCount
}

// GetNonCompliantDeviceCountOk returns a tuple with the NonCompliantDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetNonCompliantDeviceCountOk() (int32, bool) {
	if o == nil || o.NonCompliantDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.NonCompliantDeviceCount, true
}

// HasNonCompliantDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasNonCompliantDeviceCount() bool {
	if o != nil && o.NonCompliantDeviceCount != nil {
		return true
	}

	return false
}

// SetNonCompliantDeviceCount gets a reference to the given int32 and assigns it to the NonCompliantDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetNonCompliantDeviceCount(v int32) {
	o.NonCompliantDeviceCount = &v
}

// GetErrorDeviceCount returns the ErrorDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetErrorDeviceCount() int32 {
	if o == nil || o.ErrorDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.ErrorDeviceCount
}

// GetErrorDeviceCountOk returns a tuple with the ErrorDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetErrorDeviceCountOk() (int32, bool) {
	if o == nil || o.ErrorDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.ErrorDeviceCount, true
}

// HasErrorDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasErrorDeviceCount() bool {
	if o != nil && o.ErrorDeviceCount != nil {
		return true
	}

	return false
}

// SetErrorDeviceCount gets a reference to the given int32 and assigns it to the ErrorDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetErrorDeviceCount(v int32) {
	o.ErrorDeviceCount = &v
}

// GetConflictDeviceCount returns the ConflictDeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetConflictDeviceCount() int32 {
	if o == nil || o.ConflictDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.ConflictDeviceCount
}

// GetConflictDeviceCountOk returns a tuple with the ConflictDeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) GetConflictDeviceCountOk() (int32, bool) {
	if o == nil || o.ConflictDeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.ConflictDeviceCount, true
}

// HasConflictDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) HasConflictDeviceCount() bool {
	if o != nil && o.ConflictDeviceCount != nil {
		return true
	}

	return false
}

// SetConflictDeviceCount gets a reference to the given int32 and assigns it to the ConflictDeviceCount field.
func (o *MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) SetConflictDeviceCount(v int32) {
	o.ConflictDeviceCount = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphDeviceCompliancePolicyDeviceStateSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InGracePeriodCount != nil {
		toSerialize["inGracePeriodCount"] = o.InGracePeriodCount
	}
	if o.ConfigManagerCount != nil {
		toSerialize["configManagerCount"] = o.ConfigManagerCount
	}
	if o.UnknownDeviceCount != nil {
		toSerialize["unknownDeviceCount"] = o.UnknownDeviceCount
	}
	if o.NotApplicableDeviceCount != nil {
		toSerialize["notApplicableDeviceCount"] = o.NotApplicableDeviceCount
	}
	if o.CompliantDeviceCount != nil {
		toSerialize["compliantDeviceCount"] = o.CompliantDeviceCount
	}
	if o.RemediatedDeviceCount != nil {
		toSerialize["remediatedDeviceCount"] = o.RemediatedDeviceCount
	}
	if o.NonCompliantDeviceCount != nil {
		toSerialize["nonCompliantDeviceCount"] = o.NonCompliantDeviceCount
	}
	if o.ErrorDeviceCount != nil {
		toSerialize["errorDeviceCount"] = o.ErrorDeviceCount
	}
	if o.ConflictDeviceCount != nil {
		toSerialize["conflictDeviceCount"] = o.ConflictDeviceCount
	}
	return json.Marshal(toSerialize)
}


