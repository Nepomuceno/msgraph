/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject779 struct for InlineObject779
type InlineObject779 struct {
	NumberS *AnyOfobject `json:"numberS,omitempty"`
	isExplicitNullNumberS bool `json:"-"`
	Trials *AnyOfobject `json:"trials,omitempty"`
	isExplicitNullTrials bool `json:"-"`
	ProbabilityS *AnyOfobject `json:"probabilityS,omitempty"`
	isExplicitNullProbabilityS bool `json:"-"`
	Cumulative *AnyOfobject `json:"cumulative,omitempty"`
	isExplicitNullCumulative bool `json:"-"`
}

// GetNumberS returns the NumberS field if non-nil, zero value otherwise.
func (o *InlineObject779) GetNumberS() AnyOfobject {
	if o == nil || o.NumberS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberS
}

// GetNumberSOk returns a tuple with the NumberS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject779) GetNumberSOk() (AnyOfobject, bool) {
	if o == nil || o.NumberS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberS, true
}

// HasNumberS returns a boolean if a field has been set.
func (o *InlineObject779) HasNumberS() bool {
	if o != nil && o.NumberS != nil {
		return true
	}

	return false
}

// SetNumberS gets a reference to the given AnyOfobject and assigns it to the NumberS field.
func (o *InlineObject779) SetNumberS(v AnyOfobject) {
	o.NumberS = &v
}

// SetNumberSExplicitNull (un)sets NumberS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberS value is set to nil even if false is passed
func (o *InlineObject779) SetNumberSExplicitNull(b bool) {
	o.NumberS = nil
	o.isExplicitNullNumberS = b
}
// GetTrials returns the Trials field if non-nil, zero value otherwise.
func (o *InlineObject779) GetTrials() AnyOfobject {
	if o == nil || o.Trials == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Trials
}

// GetTrialsOk returns a tuple with the Trials field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject779) GetTrialsOk() (AnyOfobject, bool) {
	if o == nil || o.Trials == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Trials, true
}

// HasTrials returns a boolean if a field has been set.
func (o *InlineObject779) HasTrials() bool {
	if o != nil && o.Trials != nil {
		return true
	}

	return false
}

// SetTrials gets a reference to the given AnyOfobject and assigns it to the Trials field.
func (o *InlineObject779) SetTrials(v AnyOfobject) {
	o.Trials = &v
}

// SetTrialsExplicitNull (un)sets Trials to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Trials value is set to nil even if false is passed
func (o *InlineObject779) SetTrialsExplicitNull(b bool) {
	o.Trials = nil
	o.isExplicitNullTrials = b
}
// GetProbabilityS returns the ProbabilityS field if non-nil, zero value otherwise.
func (o *InlineObject779) GetProbabilityS() AnyOfobject {
	if o == nil || o.ProbabilityS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.ProbabilityS
}

// GetProbabilitySOk returns a tuple with the ProbabilityS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject779) GetProbabilitySOk() (AnyOfobject, bool) {
	if o == nil || o.ProbabilityS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.ProbabilityS, true
}

// HasProbabilityS returns a boolean if a field has been set.
func (o *InlineObject779) HasProbabilityS() bool {
	if o != nil && o.ProbabilityS != nil {
		return true
	}

	return false
}

// SetProbabilityS gets a reference to the given AnyOfobject and assigns it to the ProbabilityS field.
func (o *InlineObject779) SetProbabilityS(v AnyOfobject) {
	o.ProbabilityS = &v
}

// SetProbabilitySExplicitNull (un)sets ProbabilityS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ProbabilityS value is set to nil even if false is passed
func (o *InlineObject779) SetProbabilitySExplicitNull(b bool) {
	o.ProbabilityS = nil
	o.isExplicitNullProbabilityS = b
}
// GetCumulative returns the Cumulative field if non-nil, zero value otherwise.
func (o *InlineObject779) GetCumulative() AnyOfobject {
	if o == nil || o.Cumulative == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Cumulative
}

// GetCumulativeOk returns a tuple with the Cumulative field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject779) GetCumulativeOk() (AnyOfobject, bool) {
	if o == nil || o.Cumulative == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Cumulative, true
}

// HasCumulative returns a boolean if a field has been set.
func (o *InlineObject779) HasCumulative() bool {
	if o != nil && o.Cumulative != nil {
		return true
	}

	return false
}

// SetCumulative gets a reference to the given AnyOfobject and assigns it to the Cumulative field.
func (o *InlineObject779) SetCumulative(v AnyOfobject) {
	o.Cumulative = &v
}

// SetCumulativeExplicitNull (un)sets Cumulative to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Cumulative value is set to nil even if false is passed
func (o *InlineObject779) SetCumulativeExplicitNull(b bool) {
	o.Cumulative = nil
	o.isExplicitNullCumulative = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject779) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumberS == nil {
		if o.isExplicitNullNumberS {
			toSerialize["numberS"] = o.NumberS
		}
	} else {
		toSerialize["numberS"] = o.NumberS
	}
	if o.Trials == nil {
		if o.isExplicitNullTrials {
			toSerialize["trials"] = o.Trials
		}
	} else {
		toSerialize["trials"] = o.Trials
	}
	if o.ProbabilityS == nil {
		if o.isExplicitNullProbabilityS {
			toSerialize["probabilityS"] = o.ProbabilityS
		}
	} else {
		toSerialize["probabilityS"] = o.ProbabilityS
	}
	if o.Cumulative == nil {
		if o.isExplicitNullCumulative {
			toSerialize["cumulative"] = o.Cumulative
		}
	} else {
		toSerialize["cumulative"] = o.Cumulative
	}
	return json.Marshal(toSerialize)
}


