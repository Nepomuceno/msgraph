/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject1023 struct for InlineObject1023
type InlineObject1023 struct {
	OldText *AnyOfobject `json:"oldText,omitempty"`
	isExplicitNullOldText bool `json:"-"`
	StartNum *AnyOfobject `json:"startNum,omitempty"`
	isExplicitNullStartNum bool `json:"-"`
	NumChars *AnyOfobject `json:"numChars,omitempty"`
	isExplicitNullNumChars bool `json:"-"`
	NewText *AnyOfobject `json:"newText,omitempty"`
	isExplicitNullNewText bool `json:"-"`
}

// GetOldText returns the OldText field if non-nil, zero value otherwise.
func (o *InlineObject1023) GetOldText() AnyOfobject {
	if o == nil || o.OldText == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.OldText
}

// GetOldTextOk returns a tuple with the OldText field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1023) GetOldTextOk() (AnyOfobject, bool) {
	if o == nil || o.OldText == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.OldText, true
}

// HasOldText returns a boolean if a field has been set.
func (o *InlineObject1023) HasOldText() bool {
	if o != nil && o.OldText != nil {
		return true
	}

	return false
}

// SetOldText gets a reference to the given AnyOfobject and assigns it to the OldText field.
func (o *InlineObject1023) SetOldText(v AnyOfobject) {
	o.OldText = &v
}

// SetOldTextExplicitNull (un)sets OldText to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OldText value is set to nil even if false is passed
func (o *InlineObject1023) SetOldTextExplicitNull(b bool) {
	o.OldText = nil
	o.isExplicitNullOldText = b
}
// GetStartNum returns the StartNum field if non-nil, zero value otherwise.
func (o *InlineObject1023) GetStartNum() AnyOfobject {
	if o == nil || o.StartNum == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.StartNum
}

// GetStartNumOk returns a tuple with the StartNum field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1023) GetStartNumOk() (AnyOfobject, bool) {
	if o == nil || o.StartNum == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.StartNum, true
}

// HasStartNum returns a boolean if a field has been set.
func (o *InlineObject1023) HasStartNum() bool {
	if o != nil && o.StartNum != nil {
		return true
	}

	return false
}

// SetStartNum gets a reference to the given AnyOfobject and assigns it to the StartNum field.
func (o *InlineObject1023) SetStartNum(v AnyOfobject) {
	o.StartNum = &v
}

// SetStartNumExplicitNull (un)sets StartNum to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The StartNum value is set to nil even if false is passed
func (o *InlineObject1023) SetStartNumExplicitNull(b bool) {
	o.StartNum = nil
	o.isExplicitNullStartNum = b
}
// GetNumChars returns the NumChars field if non-nil, zero value otherwise.
func (o *InlineObject1023) GetNumChars() AnyOfobject {
	if o == nil || o.NumChars == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumChars
}

// GetNumCharsOk returns a tuple with the NumChars field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1023) GetNumCharsOk() (AnyOfobject, bool) {
	if o == nil || o.NumChars == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumChars, true
}

// HasNumChars returns a boolean if a field has been set.
func (o *InlineObject1023) HasNumChars() bool {
	if o != nil && o.NumChars != nil {
		return true
	}

	return false
}

// SetNumChars gets a reference to the given AnyOfobject and assigns it to the NumChars field.
func (o *InlineObject1023) SetNumChars(v AnyOfobject) {
	o.NumChars = &v
}

// SetNumCharsExplicitNull (un)sets NumChars to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumChars value is set to nil even if false is passed
func (o *InlineObject1023) SetNumCharsExplicitNull(b bool) {
	o.NumChars = nil
	o.isExplicitNullNumChars = b
}
// GetNewText returns the NewText field if non-nil, zero value otherwise.
func (o *InlineObject1023) GetNewText() AnyOfobject {
	if o == nil || o.NewText == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NewText
}

// GetNewTextOk returns a tuple with the NewText field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1023) GetNewTextOk() (AnyOfobject, bool) {
	if o == nil || o.NewText == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NewText, true
}

// HasNewText returns a boolean if a field has been set.
func (o *InlineObject1023) HasNewText() bool {
	if o != nil && o.NewText != nil {
		return true
	}

	return false
}

// SetNewText gets a reference to the given AnyOfobject and assigns it to the NewText field.
func (o *InlineObject1023) SetNewText(v AnyOfobject) {
	o.NewText = &v
}

// SetNewTextExplicitNull (un)sets NewText to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NewText value is set to nil even if false is passed
func (o *InlineObject1023) SetNewTextExplicitNull(b bool) {
	o.NewText = nil
	o.isExplicitNullNewText = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject1023) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OldText == nil {
		if o.isExplicitNullOldText {
			toSerialize["oldText"] = o.OldText
		}
	} else {
		toSerialize["oldText"] = o.OldText
	}
	if o.StartNum == nil {
		if o.isExplicitNullStartNum {
			toSerialize["startNum"] = o.StartNum
		}
	} else {
		toSerialize["startNum"] = o.StartNum
	}
	if o.NumChars == nil {
		if o.isExplicitNullNumChars {
			toSerialize["numChars"] = o.NumChars
		}
	} else {
		toSerialize["numChars"] = o.NumChars
	}
	if o.NewText == nil {
		if o.isExplicitNullNewText {
			toSerialize["newText"] = o.NewText
		}
	} else {
		toSerialize["newText"] = o.NewText
	}
	return json.Marshal(toSerialize)
}


