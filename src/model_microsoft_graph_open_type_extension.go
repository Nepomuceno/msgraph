/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphOpenTypeExtension struct for MicrosoftGraphOpenTypeExtension
type MicrosoftGraphOpenTypeExtension struct {
	Id *string `json:"id,omitempty"`

	ExtensionName *string `json:"extensionName,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphOpenTypeExtension) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphOpenTypeExtension) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphOpenTypeExtension) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphOpenTypeExtension) SetId(v string) {
	o.Id = &v
}

// GetExtensionName returns the ExtensionName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphOpenTypeExtension) GetExtensionName() string {
	if o == nil || o.ExtensionName == nil {
		var ret string
		return ret
	}
	return *o.ExtensionName
}

// GetExtensionNameOk returns a tuple with the ExtensionName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphOpenTypeExtension) GetExtensionNameOk() (string, bool) {
	if o == nil || o.ExtensionName == nil {
		var ret string
		return ret, false
	}
	return *o.ExtensionName, true
}

// HasExtensionName returns a boolean if a field has been set.
func (o *MicrosoftGraphOpenTypeExtension) HasExtensionName() bool {
	if o != nil && o.ExtensionName != nil {
		return true
	}

	return false
}

// SetExtensionName gets a reference to the given string and assigns it to the ExtensionName field.
func (o *MicrosoftGraphOpenTypeExtension) SetExtensionName(v string) {
	o.ExtensionName = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphOpenTypeExtension) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ExtensionName != nil {
		toSerialize["extensionName"] = o.ExtensionName
	}
	return json.Marshal(toSerialize)
}


