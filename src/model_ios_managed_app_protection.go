/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// IosManagedAppProtection Policy used to configure detailed management settings targeted to specific security groups and for a specified set of apps on an iOS device
type IosManagedAppProtection struct {
	// Type of encryption which should be used for data in a managed app.
	AppDataEncryptionType *AnyOfmicrosoftGraphManagedAppDataEncryptionType `json:"appDataEncryptionType,omitempty"`

	// Versions less than the specified version will block the managed app from accessing company data.
	MinimumRequiredSdkVersion *string `json:"minimumRequiredSdkVersion,omitempty"`
	isExplicitNullMinimumRequiredSdkVersion bool `json:"-"`
	// Count of apps to which the current policy is deployed.
	DeployedAppCount *int32 `json:"deployedAppCount,omitempty"`

	// Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True.
	FaceIdBlocked *bool `json:"faceIdBlocked,omitempty"`

	Apps *[]MicrosoftGraphManagedMobileApp `json:"apps,omitempty"`

	DeploymentSummary *AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary `json:"deploymentSummary,omitempty"`
	isExplicitNullDeploymentSummary bool `json:"-"`
}

// GetAppDataEncryptionType returns the AppDataEncryptionType field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetAppDataEncryptionType() AnyOfmicrosoftGraphManagedAppDataEncryptionType {
	if o == nil || o.AppDataEncryptionType == nil {
		var ret AnyOfmicrosoftGraphManagedAppDataEncryptionType
		return ret
	}
	return *o.AppDataEncryptionType
}

// GetAppDataEncryptionTypeOk returns a tuple with the AppDataEncryptionType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetAppDataEncryptionTypeOk() (AnyOfmicrosoftGraphManagedAppDataEncryptionType, bool) {
	if o == nil || o.AppDataEncryptionType == nil {
		var ret AnyOfmicrosoftGraphManagedAppDataEncryptionType
		return ret, false
	}
	return *o.AppDataEncryptionType, true
}

// HasAppDataEncryptionType returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasAppDataEncryptionType() bool {
	if o != nil && o.AppDataEncryptionType != nil {
		return true
	}

	return false
}

// SetAppDataEncryptionType gets a reference to the given AnyOfmicrosoftGraphManagedAppDataEncryptionType and assigns it to the AppDataEncryptionType field.
func (o *IosManagedAppProtection) SetAppDataEncryptionType(v AnyOfmicrosoftGraphManagedAppDataEncryptionType) {
	o.AppDataEncryptionType = &v
}

// GetMinimumRequiredSdkVersion returns the MinimumRequiredSdkVersion field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetMinimumRequiredSdkVersion() string {
	if o == nil || o.MinimumRequiredSdkVersion == nil {
		var ret string
		return ret
	}
	return *o.MinimumRequiredSdkVersion
}

// GetMinimumRequiredSdkVersionOk returns a tuple with the MinimumRequiredSdkVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetMinimumRequiredSdkVersionOk() (string, bool) {
	if o == nil || o.MinimumRequiredSdkVersion == nil {
		var ret string
		return ret, false
	}
	return *o.MinimumRequiredSdkVersion, true
}

// HasMinimumRequiredSdkVersion returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasMinimumRequiredSdkVersion() bool {
	if o != nil && o.MinimumRequiredSdkVersion != nil {
		return true
	}

	return false
}

// SetMinimumRequiredSdkVersion gets a reference to the given string and assigns it to the MinimumRequiredSdkVersion field.
func (o *IosManagedAppProtection) SetMinimumRequiredSdkVersion(v string) {
	o.MinimumRequiredSdkVersion = &v
}

// SetMinimumRequiredSdkVersionExplicitNull (un)sets MinimumRequiredSdkVersion to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MinimumRequiredSdkVersion value is set to nil even if false is passed
func (o *IosManagedAppProtection) SetMinimumRequiredSdkVersionExplicitNull(b bool) {
	o.MinimumRequiredSdkVersion = nil
	o.isExplicitNullMinimumRequiredSdkVersion = b
}
// GetDeployedAppCount returns the DeployedAppCount field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetDeployedAppCount() int32 {
	if o == nil || o.DeployedAppCount == nil {
		var ret int32
		return ret
	}
	return *o.DeployedAppCount
}

// GetDeployedAppCountOk returns a tuple with the DeployedAppCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetDeployedAppCountOk() (int32, bool) {
	if o == nil || o.DeployedAppCount == nil {
		var ret int32
		return ret, false
	}
	return *o.DeployedAppCount, true
}

// HasDeployedAppCount returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasDeployedAppCount() bool {
	if o != nil && o.DeployedAppCount != nil {
		return true
	}

	return false
}

// SetDeployedAppCount gets a reference to the given int32 and assigns it to the DeployedAppCount field.
func (o *IosManagedAppProtection) SetDeployedAppCount(v int32) {
	o.DeployedAppCount = &v
}

// GetFaceIdBlocked returns the FaceIdBlocked field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetFaceIdBlocked() bool {
	if o == nil || o.FaceIdBlocked == nil {
		var ret bool
		return ret
	}
	return *o.FaceIdBlocked
}

// GetFaceIdBlockedOk returns a tuple with the FaceIdBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetFaceIdBlockedOk() (bool, bool) {
	if o == nil || o.FaceIdBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.FaceIdBlocked, true
}

// HasFaceIdBlocked returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasFaceIdBlocked() bool {
	if o != nil && o.FaceIdBlocked != nil {
		return true
	}

	return false
}

// SetFaceIdBlocked gets a reference to the given bool and assigns it to the FaceIdBlocked field.
func (o *IosManagedAppProtection) SetFaceIdBlocked(v bool) {
	o.FaceIdBlocked = &v
}

// GetApps returns the Apps field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetApps() []MicrosoftGraphManagedMobileApp {
	if o == nil || o.Apps == nil {
		var ret []MicrosoftGraphManagedMobileApp
		return ret
	}
	return *o.Apps
}

// GetAppsOk returns a tuple with the Apps field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetAppsOk() ([]MicrosoftGraphManagedMobileApp, bool) {
	if o == nil || o.Apps == nil {
		var ret []MicrosoftGraphManagedMobileApp
		return ret, false
	}
	return *o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasApps() bool {
	if o != nil && o.Apps != nil {
		return true
	}

	return false
}

// SetApps gets a reference to the given []MicrosoftGraphManagedMobileApp and assigns it to the Apps field.
func (o *IosManagedAppProtection) SetApps(v []MicrosoftGraphManagedMobileApp) {
	o.Apps = &v
}

// GetDeploymentSummary returns the DeploymentSummary field if non-nil, zero value otherwise.
func (o *IosManagedAppProtection) GetDeploymentSummary() AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary {
	if o == nil || o.DeploymentSummary == nil {
		var ret AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary
		return ret
	}
	return *o.DeploymentSummary
}

// GetDeploymentSummaryOk returns a tuple with the DeploymentSummary field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosManagedAppProtection) GetDeploymentSummaryOk() (AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary, bool) {
	if o == nil || o.DeploymentSummary == nil {
		var ret AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary
		return ret, false
	}
	return *o.DeploymentSummary, true
}

// HasDeploymentSummary returns a boolean if a field has been set.
func (o *IosManagedAppProtection) HasDeploymentSummary() bool {
	if o != nil && o.DeploymentSummary != nil {
		return true
	}

	return false
}

// SetDeploymentSummary gets a reference to the given AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary and assigns it to the DeploymentSummary field.
func (o *IosManagedAppProtection) SetDeploymentSummary(v AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary) {
	o.DeploymentSummary = &v
}

// SetDeploymentSummaryExplicitNull (un)sets DeploymentSummary to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeploymentSummary value is set to nil even if false is passed
func (o *IosManagedAppProtection) SetDeploymentSummaryExplicitNull(b bool) {
	o.DeploymentSummary = nil
	o.isExplicitNullDeploymentSummary = b
}

// MarshalJSON returns the JSON representation of the model.
func (o IosManagedAppProtection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppDataEncryptionType != nil {
		toSerialize["appDataEncryptionType"] = o.AppDataEncryptionType
	}
	if o.MinimumRequiredSdkVersion == nil {
		if o.isExplicitNullMinimumRequiredSdkVersion {
			toSerialize["minimumRequiredSdkVersion"] = o.MinimumRequiredSdkVersion
		}
	} else {
		toSerialize["minimumRequiredSdkVersion"] = o.MinimumRequiredSdkVersion
	}
	if o.DeployedAppCount != nil {
		toSerialize["deployedAppCount"] = o.DeployedAppCount
	}
	if o.FaceIdBlocked != nil {
		toSerialize["faceIdBlocked"] = o.FaceIdBlocked
	}
	if o.Apps != nil {
		toSerialize["apps"] = o.Apps
	}
	if o.DeploymentSummary == nil {
		if o.isExplicitNullDeploymentSummary {
			toSerialize["deploymentSummary"] = o.DeploymentSummary
		}
	} else {
		toSerialize["deploymentSummary"] = o.DeploymentSummary
	}
	return json.Marshal(toSerialize)
}


