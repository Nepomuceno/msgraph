/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphWorkbookRangeView struct for MicrosoftGraphWorkbookRangeView
type MicrosoftGraphWorkbookRangeView struct {
	Id *string `json:"id,omitempty"`

	CellAddresses *AnyOfobject `json:"cellAddresses,omitempty"`
	isExplicitNullCellAddresses bool `json:"-"`
	ColumnCount *int32 `json:"columnCount,omitempty"`

	Formulas *AnyOfobject `json:"formulas,omitempty"`
	isExplicitNullFormulas bool `json:"-"`
	FormulasLocal *AnyOfobject `json:"formulasLocal,omitempty"`
	isExplicitNullFormulasLocal bool `json:"-"`
	FormulasR1C1 *AnyOfobject `json:"formulasR1C1,omitempty"`
	isExplicitNullFormulasR1C1 bool `json:"-"`
	Index *int32 `json:"index,omitempty"`

	NumberFormat *AnyOfobject `json:"numberFormat,omitempty"`
	isExplicitNullNumberFormat bool `json:"-"`
	RowCount *int32 `json:"rowCount,omitempty"`

	Text *AnyOfobject `json:"text,omitempty"`
	isExplicitNullText bool `json:"-"`
	ValueTypes *AnyOfobject `json:"valueTypes,omitempty"`
	isExplicitNullValueTypes bool `json:"-"`
	Values *AnyOfobject `json:"values,omitempty"`
	isExplicitNullValues bool `json:"-"`
	Rows *[]MicrosoftGraphWorkbookRangeView `json:"rows,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphWorkbookRangeView) SetId(v string) {
	o.Id = &v
}

// GetCellAddresses returns the CellAddresses field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetCellAddresses() AnyOfobject {
	if o == nil || o.CellAddresses == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.CellAddresses
}

// GetCellAddressesOk returns a tuple with the CellAddresses field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetCellAddressesOk() (AnyOfobject, bool) {
	if o == nil || o.CellAddresses == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.CellAddresses, true
}

// HasCellAddresses returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasCellAddresses() bool {
	if o != nil && o.CellAddresses != nil {
		return true
	}

	return false
}

// SetCellAddresses gets a reference to the given AnyOfobject and assigns it to the CellAddresses field.
func (o *MicrosoftGraphWorkbookRangeView) SetCellAddresses(v AnyOfobject) {
	o.CellAddresses = &v
}

// SetCellAddressesExplicitNull (un)sets CellAddresses to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CellAddresses value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetCellAddressesExplicitNull(b bool) {
	o.CellAddresses = nil
	o.isExplicitNullCellAddresses = b
}
// GetColumnCount returns the ColumnCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetColumnCount() int32 {
	if o == nil || o.ColumnCount == nil {
		var ret int32
		return ret
	}
	return *o.ColumnCount
}

// GetColumnCountOk returns a tuple with the ColumnCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetColumnCountOk() (int32, bool) {
	if o == nil || o.ColumnCount == nil {
		var ret int32
		return ret, false
	}
	return *o.ColumnCount, true
}

// HasColumnCount returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasColumnCount() bool {
	if o != nil && o.ColumnCount != nil {
		return true
	}

	return false
}

// SetColumnCount gets a reference to the given int32 and assigns it to the ColumnCount field.
func (o *MicrosoftGraphWorkbookRangeView) SetColumnCount(v int32) {
	o.ColumnCount = &v
}

// GetFormulas returns the Formulas field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulas() AnyOfobject {
	if o == nil || o.Formulas == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Formulas
}

// GetFormulasOk returns a tuple with the Formulas field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulasOk() (AnyOfobject, bool) {
	if o == nil || o.Formulas == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Formulas, true
}

// HasFormulas returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasFormulas() bool {
	if o != nil && o.Formulas != nil {
		return true
	}

	return false
}

// SetFormulas gets a reference to the given AnyOfobject and assigns it to the Formulas field.
func (o *MicrosoftGraphWorkbookRangeView) SetFormulas(v AnyOfobject) {
	o.Formulas = &v
}

// SetFormulasExplicitNull (un)sets Formulas to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Formulas value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetFormulasExplicitNull(b bool) {
	o.Formulas = nil
	o.isExplicitNullFormulas = b
}
// GetFormulasLocal returns the FormulasLocal field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulasLocal() AnyOfobject {
	if o == nil || o.FormulasLocal == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.FormulasLocal
}

// GetFormulasLocalOk returns a tuple with the FormulasLocal field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulasLocalOk() (AnyOfobject, bool) {
	if o == nil || o.FormulasLocal == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.FormulasLocal, true
}

// HasFormulasLocal returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasFormulasLocal() bool {
	if o != nil && o.FormulasLocal != nil {
		return true
	}

	return false
}

// SetFormulasLocal gets a reference to the given AnyOfobject and assigns it to the FormulasLocal field.
func (o *MicrosoftGraphWorkbookRangeView) SetFormulasLocal(v AnyOfobject) {
	o.FormulasLocal = &v
}

// SetFormulasLocalExplicitNull (un)sets FormulasLocal to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FormulasLocal value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetFormulasLocalExplicitNull(b bool) {
	o.FormulasLocal = nil
	o.isExplicitNullFormulasLocal = b
}
// GetFormulasR1C1 returns the FormulasR1C1 field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulasR1C1() AnyOfobject {
	if o == nil || o.FormulasR1C1 == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.FormulasR1C1
}

// GetFormulasR1C1Ok returns a tuple with the FormulasR1C1 field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetFormulasR1C1Ok() (AnyOfobject, bool) {
	if o == nil || o.FormulasR1C1 == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.FormulasR1C1, true
}

// HasFormulasR1C1 returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasFormulasR1C1() bool {
	if o != nil && o.FormulasR1C1 != nil {
		return true
	}

	return false
}

// SetFormulasR1C1 gets a reference to the given AnyOfobject and assigns it to the FormulasR1C1 field.
func (o *MicrosoftGraphWorkbookRangeView) SetFormulasR1C1(v AnyOfobject) {
	o.FormulasR1C1 = &v
}

// SetFormulasR1C1ExplicitNull (un)sets FormulasR1C1 to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FormulasR1C1 value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetFormulasR1C1ExplicitNull(b bool) {
	o.FormulasR1C1 = nil
	o.isExplicitNullFormulasR1C1 = b
}
// GetIndex returns the Index field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetIndexOk() (int32, bool) {
	if o == nil || o.Index == nil {
		var ret int32
		return ret, false
	}
	return *o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *MicrosoftGraphWorkbookRangeView) SetIndex(v int32) {
	o.Index = &v
}

// GetNumberFormat returns the NumberFormat field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetNumberFormat() AnyOfobject {
	if o == nil || o.NumberFormat == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberFormat
}

// GetNumberFormatOk returns a tuple with the NumberFormat field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetNumberFormatOk() (AnyOfobject, bool) {
	if o == nil || o.NumberFormat == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberFormat, true
}

// HasNumberFormat returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasNumberFormat() bool {
	if o != nil && o.NumberFormat != nil {
		return true
	}

	return false
}

// SetNumberFormat gets a reference to the given AnyOfobject and assigns it to the NumberFormat field.
func (o *MicrosoftGraphWorkbookRangeView) SetNumberFormat(v AnyOfobject) {
	o.NumberFormat = &v
}

// SetNumberFormatExplicitNull (un)sets NumberFormat to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberFormat value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetNumberFormatExplicitNull(b bool) {
	o.NumberFormat = nil
	o.isExplicitNullNumberFormat = b
}
// GetRowCount returns the RowCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetRowCount() int32 {
	if o == nil || o.RowCount == nil {
		var ret int32
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetRowCountOk() (int32, bool) {
	if o == nil || o.RowCount == nil {
		var ret int32
		return ret, false
	}
	return *o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasRowCount() bool {
	if o != nil && o.RowCount != nil {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given int32 and assigns it to the RowCount field.
func (o *MicrosoftGraphWorkbookRangeView) SetRowCount(v int32) {
	o.RowCount = &v
}

// GetText returns the Text field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetText() AnyOfobject {
	if o == nil || o.Text == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetTextOk() (AnyOfobject, bool) {
	if o == nil || o.Text == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given AnyOfobject and assigns it to the Text field.
func (o *MicrosoftGraphWorkbookRangeView) SetText(v AnyOfobject) {
	o.Text = &v
}

// SetTextExplicitNull (un)sets Text to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Text value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetTextExplicitNull(b bool) {
	o.Text = nil
	o.isExplicitNullText = b
}
// GetValueTypes returns the ValueTypes field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetValueTypes() AnyOfobject {
	if o == nil || o.ValueTypes == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.ValueTypes
}

// GetValueTypesOk returns a tuple with the ValueTypes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetValueTypesOk() (AnyOfobject, bool) {
	if o == nil || o.ValueTypes == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.ValueTypes, true
}

// HasValueTypes returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasValueTypes() bool {
	if o != nil && o.ValueTypes != nil {
		return true
	}

	return false
}

// SetValueTypes gets a reference to the given AnyOfobject and assigns it to the ValueTypes field.
func (o *MicrosoftGraphWorkbookRangeView) SetValueTypes(v AnyOfobject) {
	o.ValueTypes = &v
}

// SetValueTypesExplicitNull (un)sets ValueTypes to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ValueTypes value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetValueTypesExplicitNull(b bool) {
	o.ValueTypes = nil
	o.isExplicitNullValueTypes = b
}
// GetValues returns the Values field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetValues() AnyOfobject {
	if o == nil || o.Values == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetValuesOk() (AnyOfobject, bool) {
	if o == nil || o.Values == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given AnyOfobject and assigns it to the Values field.
func (o *MicrosoftGraphWorkbookRangeView) SetValues(v AnyOfobject) {
	o.Values = &v
}

// SetValuesExplicitNull (un)sets Values to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Values value is set to nil even if false is passed
func (o *MicrosoftGraphWorkbookRangeView) SetValuesExplicitNull(b bool) {
	o.Values = nil
	o.isExplicitNullValues = b
}
// GetRows returns the Rows field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWorkbookRangeView) GetRows() []MicrosoftGraphWorkbookRangeView {
	if o == nil || o.Rows == nil {
		var ret []MicrosoftGraphWorkbookRangeView
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWorkbookRangeView) GetRowsOk() ([]MicrosoftGraphWorkbookRangeView, bool) {
	if o == nil || o.Rows == nil {
		var ret []MicrosoftGraphWorkbookRangeView
		return ret, false
	}
	return *o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *MicrosoftGraphWorkbookRangeView) HasRows() bool {
	if o != nil && o.Rows != nil {
		return true
	}

	return false
}

// SetRows gets a reference to the given []MicrosoftGraphWorkbookRangeView and assigns it to the Rows field.
func (o *MicrosoftGraphWorkbookRangeView) SetRows(v []MicrosoftGraphWorkbookRangeView) {
	o.Rows = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphWorkbookRangeView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CellAddresses == nil {
		if o.isExplicitNullCellAddresses {
			toSerialize["cellAddresses"] = o.CellAddresses
		}
	} else {
		toSerialize["cellAddresses"] = o.CellAddresses
	}
	if o.ColumnCount != nil {
		toSerialize["columnCount"] = o.ColumnCount
	}
	if o.Formulas == nil {
		if o.isExplicitNullFormulas {
			toSerialize["formulas"] = o.Formulas
		}
	} else {
		toSerialize["formulas"] = o.Formulas
	}
	if o.FormulasLocal == nil {
		if o.isExplicitNullFormulasLocal {
			toSerialize["formulasLocal"] = o.FormulasLocal
		}
	} else {
		toSerialize["formulasLocal"] = o.FormulasLocal
	}
	if o.FormulasR1C1 == nil {
		if o.isExplicitNullFormulasR1C1 {
			toSerialize["formulasR1C1"] = o.FormulasR1C1
		}
	} else {
		toSerialize["formulasR1C1"] = o.FormulasR1C1
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.NumberFormat == nil {
		if o.isExplicitNullNumberFormat {
			toSerialize["numberFormat"] = o.NumberFormat
		}
	} else {
		toSerialize["numberFormat"] = o.NumberFormat
	}
	if o.RowCount != nil {
		toSerialize["rowCount"] = o.RowCount
	}
	if o.Text == nil {
		if o.isExplicitNullText {
			toSerialize["text"] = o.Text
		}
	} else {
		toSerialize["text"] = o.Text
	}
	if o.ValueTypes == nil {
		if o.isExplicitNullValueTypes {
			toSerialize["valueTypes"] = o.ValueTypes
		}
	} else {
		toSerialize["valueTypes"] = o.ValueTypes
	}
	if o.Values == nil {
		if o.isExplicitNullValues {
			toSerialize["values"] = o.Values
		}
	} else {
		toSerialize["values"] = o.Values
	}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}


