/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphDeviceManagementPartner struct for MicrosoftGraphDeviceManagementPartner
type MicrosoftGraphDeviceManagementPartner struct {
	Id *string `json:"id,omitempty"`

	// Timestamp of last heartbeat after admin enabled option Connect to Device management Partner
	LastHeartbeatDateTime *time.Time `json:"lastHeartbeatDateTime,omitempty"`

	// Partner state of this tenant
	PartnerState *AnyOfmicrosoftGraphDeviceManagementPartnerTenantState `json:"partnerState,omitempty"`

	// Partner App type
	PartnerAppType *AnyOfmicrosoftGraphDeviceManagementPartnerAppType `json:"partnerAppType,omitempty"`

	// Partner Single tenant App id
	SingleTenantAppId *string `json:"singleTenantAppId,omitempty"`
	isExplicitNullSingleTenantAppId bool `json:"-"`
	// Partner display name
	DisplayName *string `json:"displayName,omitempty"`
	isExplicitNullDisplayName bool `json:"-"`
	// Whether device management partner is configured or not
	IsConfigured *bool `json:"isConfigured,omitempty"`

	// DateTime in UTC when PartnerDevices will be removed
	WhenPartnerDevicesWillBeRemovedDateTime *time.Time `json:"whenPartnerDevicesWillBeRemovedDateTime,omitempty"`
	isExplicitNullWhenPartnerDevicesWillBeRemovedDateTime bool `json:"-"`
	// DateTime in UTC when PartnerDevices will be marked as NonCompliant
	WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime *time.Time `json:"whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,omitempty"`
	isExplicitNullWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime bool `json:"-"`
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphDeviceManagementPartner) SetId(v string) {
	o.Id = &v
}

// GetLastHeartbeatDateTime returns the LastHeartbeatDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetLastHeartbeatDateTime() time.Time {
	if o == nil || o.LastHeartbeatDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastHeartbeatDateTime
}

// GetLastHeartbeatDateTimeOk returns a tuple with the LastHeartbeatDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetLastHeartbeatDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastHeartbeatDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastHeartbeatDateTime, true
}

// HasLastHeartbeatDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasLastHeartbeatDateTime() bool {
	if o != nil && o.LastHeartbeatDateTime != nil {
		return true
	}

	return false
}

// SetLastHeartbeatDateTime gets a reference to the given time.Time and assigns it to the LastHeartbeatDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetLastHeartbeatDateTime(v time.Time) {
	o.LastHeartbeatDateTime = &v
}

// GetPartnerState returns the PartnerState field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerState() AnyOfmicrosoftGraphDeviceManagementPartnerTenantState {
	if o == nil || o.PartnerState == nil {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerTenantState
		return ret
	}
	return *o.PartnerState
}

// GetPartnerStateOk returns a tuple with the PartnerState field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerStateOk() (AnyOfmicrosoftGraphDeviceManagementPartnerTenantState, bool) {
	if o == nil || o.PartnerState == nil {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerTenantState
		return ret, false
	}
	return *o.PartnerState, true
}

// HasPartnerState returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasPartnerState() bool {
	if o != nil && o.PartnerState != nil {
		return true
	}

	return false
}

// SetPartnerState gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerTenantState and assigns it to the PartnerState field.
func (o *MicrosoftGraphDeviceManagementPartner) SetPartnerState(v AnyOfmicrosoftGraphDeviceManagementPartnerTenantState) {
	o.PartnerState = &v
}

// GetPartnerAppType returns the PartnerAppType field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerAppType() AnyOfmicrosoftGraphDeviceManagementPartnerAppType {
	if o == nil || o.PartnerAppType == nil {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerAppType
		return ret
	}
	return *o.PartnerAppType
}

// GetPartnerAppTypeOk returns a tuple with the PartnerAppType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerAppTypeOk() (AnyOfmicrosoftGraphDeviceManagementPartnerAppType, bool) {
	if o == nil || o.PartnerAppType == nil {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerAppType
		return ret, false
	}
	return *o.PartnerAppType, true
}

// HasPartnerAppType returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasPartnerAppType() bool {
	if o != nil && o.PartnerAppType != nil {
		return true
	}

	return false
}

// SetPartnerAppType gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerAppType and assigns it to the PartnerAppType field.
func (o *MicrosoftGraphDeviceManagementPartner) SetPartnerAppType(v AnyOfmicrosoftGraphDeviceManagementPartnerAppType) {
	o.PartnerAppType = &v
}

// GetSingleTenantAppId returns the SingleTenantAppId field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetSingleTenantAppId() string {
	if o == nil || o.SingleTenantAppId == nil {
		var ret string
		return ret
	}
	return *o.SingleTenantAppId
}

// GetSingleTenantAppIdOk returns a tuple with the SingleTenantAppId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetSingleTenantAppIdOk() (string, bool) {
	if o == nil || o.SingleTenantAppId == nil {
		var ret string
		return ret, false
	}
	return *o.SingleTenantAppId, true
}

// HasSingleTenantAppId returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasSingleTenantAppId() bool {
	if o != nil && o.SingleTenantAppId != nil {
		return true
	}

	return false
}

// SetSingleTenantAppId gets a reference to the given string and assigns it to the SingleTenantAppId field.
func (o *MicrosoftGraphDeviceManagementPartner) SetSingleTenantAppId(v string) {
	o.SingleTenantAppId = &v
}

// SetSingleTenantAppIdExplicitNull (un)sets SingleTenantAppId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SingleTenantAppId value is set to nil even if false is passed
func (o *MicrosoftGraphDeviceManagementPartner) SetSingleTenantAppIdExplicitNull(b bool) {
	o.SingleTenantAppId = nil
	o.isExplicitNullSingleTenantAppId = b
}
// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MicrosoftGraphDeviceManagementPartner) SetDisplayName(v string) {
	o.DisplayName = &v
}

// SetDisplayNameExplicitNull (un)sets DisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DisplayName value is set to nil even if false is passed
func (o *MicrosoftGraphDeviceManagementPartner) SetDisplayNameExplicitNull(b bool) {
	o.DisplayName = nil
	o.isExplicitNullDisplayName = b
}
// GetIsConfigured returns the IsConfigured field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetIsConfigured() bool {
	if o == nil || o.IsConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsConfigured
}

// GetIsConfiguredOk returns a tuple with the IsConfigured field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetIsConfiguredOk() (bool, bool) {
	if o == nil || o.IsConfigured == nil {
		var ret bool
		return ret, false
	}
	return *o.IsConfigured, true
}

// HasIsConfigured returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasIsConfigured() bool {
	if o != nil && o.IsConfigured != nil {
		return true
	}

	return false
}

// SetIsConfigured gets a reference to the given bool and assigns it to the IsConfigured field.
func (o *MicrosoftGraphDeviceManagementPartner) SetIsConfigured(v bool) {
	o.IsConfigured = &v
}

// GetWhenPartnerDevicesWillBeRemovedDateTime returns the WhenPartnerDevicesWillBeRemovedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeRemovedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeRemovedDateTime
}

// GetWhenPartnerDevicesWillBeRemovedDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeRemovedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTimeOk() (time.Time, bool) {
	if o == nil || o.WhenPartnerDevicesWillBeRemovedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.WhenPartnerDevicesWillBeRemovedDateTime, true
}

// HasWhenPartnerDevicesWillBeRemovedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasWhenPartnerDevicesWillBeRemovedDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeRemovedDateTime != nil {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeRemovedDateTime gets a reference to the given time.Time and assigns it to the WhenPartnerDevicesWillBeRemovedDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeRemovedDateTime = &v
}

// SetWhenPartnerDevicesWillBeRemovedDateTimeExplicitNull (un)sets WhenPartnerDevicesWillBeRemovedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The WhenPartnerDevicesWillBeRemovedDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTimeExplicitNull(b bool) {
	o.WhenPartnerDevicesWillBeRemovedDateTime = nil
	o.isExplicitNullWhenPartnerDevicesWillBeRemovedDateTime = b
}
// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
}

// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk() (time.Time, bool) {
	if o == nil || o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime, true
}

// HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime != nil {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime gets a reference to the given time.Time and assigns it to the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime = &v
}

// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeExplicitNull (un)sets WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeExplicitNull(b bool) {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime = nil
	o.isExplicitNullWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphDeviceManagementPartner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastHeartbeatDateTime != nil {
		toSerialize["lastHeartbeatDateTime"] = o.LastHeartbeatDateTime
	}
	if o.PartnerState != nil {
		toSerialize["partnerState"] = o.PartnerState
	}
	if o.PartnerAppType != nil {
		toSerialize["partnerAppType"] = o.PartnerAppType
	}
	if o.SingleTenantAppId == nil {
		if o.isExplicitNullSingleTenantAppId {
			toSerialize["singleTenantAppId"] = o.SingleTenantAppId
		}
	} else {
		toSerialize["singleTenantAppId"] = o.SingleTenantAppId
	}
	if o.DisplayName == nil {
		if o.isExplicitNullDisplayName {
			toSerialize["displayName"] = o.DisplayName
		}
	} else {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.IsConfigured != nil {
		toSerialize["isConfigured"] = o.IsConfigured
	}
	if o.WhenPartnerDevicesWillBeRemovedDateTime == nil {
		if o.isExplicitNullWhenPartnerDevicesWillBeRemovedDateTime {
			toSerialize["whenPartnerDevicesWillBeRemovedDateTime"] = o.WhenPartnerDevicesWillBeRemovedDateTime
		}
	} else {
		toSerialize["whenPartnerDevicesWillBeRemovedDateTime"] = o.WhenPartnerDevicesWillBeRemovedDateTime
	}
	if o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime == nil {
		if o.isExplicitNullWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime {
			toSerialize["whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime"] = o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
		}
	} else {
		toSerialize["whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime"] = o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
	}
	return json.Marshal(toSerialize)
}


