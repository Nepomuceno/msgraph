/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject1096 struct for InlineObject1096
type InlineObject1096 struct {
	Rate *AnyOfobject `json:"rate,omitempty"`
	isExplicitNullRate bool `json:"-"`
	Values *AnyOfobject `json:"values,omitempty"`
	isExplicitNullValues bool `json:"-"`
	Dates *AnyOfobject `json:"dates,omitempty"`
	isExplicitNullDates bool `json:"-"`
}

// GetRate returns the Rate field if non-nil, zero value otherwise.
func (o *InlineObject1096) GetRate() AnyOfobject {
	if o == nil || o.Rate == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1096) GetRateOk() (AnyOfobject, bool) {
	if o == nil || o.Rate == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InlineObject1096) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given AnyOfobject and assigns it to the Rate field.
func (o *InlineObject1096) SetRate(v AnyOfobject) {
	o.Rate = &v
}

// SetRateExplicitNull (un)sets Rate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Rate value is set to nil even if false is passed
func (o *InlineObject1096) SetRateExplicitNull(b bool) {
	o.Rate = nil
	o.isExplicitNullRate = b
}
// GetValues returns the Values field if non-nil, zero value otherwise.
func (o *InlineObject1096) GetValues() AnyOfobject {
	if o == nil || o.Values == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1096) GetValuesOk() (AnyOfobject, bool) {
	if o == nil || o.Values == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *InlineObject1096) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given AnyOfobject and assigns it to the Values field.
func (o *InlineObject1096) SetValues(v AnyOfobject) {
	o.Values = &v
}

// SetValuesExplicitNull (un)sets Values to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Values value is set to nil even if false is passed
func (o *InlineObject1096) SetValuesExplicitNull(b bool) {
	o.Values = nil
	o.isExplicitNullValues = b
}
// GetDates returns the Dates field if non-nil, zero value otherwise.
func (o *InlineObject1096) GetDates() AnyOfobject {
	if o == nil || o.Dates == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Dates
}

// GetDatesOk returns a tuple with the Dates field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1096) GetDatesOk() (AnyOfobject, bool) {
	if o == nil || o.Dates == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *InlineObject1096) HasDates() bool {
	if o != nil && o.Dates != nil {
		return true
	}

	return false
}

// SetDates gets a reference to the given AnyOfobject and assigns it to the Dates field.
func (o *InlineObject1096) SetDates(v AnyOfobject) {
	o.Dates = &v
}

// SetDatesExplicitNull (un)sets Dates to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Dates value is set to nil even if false is passed
func (o *InlineObject1096) SetDatesExplicitNull(b bool) {
	o.Dates = nil
	o.isExplicitNullDates = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject1096) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rate == nil {
		if o.isExplicitNullRate {
			toSerialize["rate"] = o.Rate
		}
	} else {
		toSerialize["rate"] = o.Rate
	}
	if o.Values == nil {
		if o.isExplicitNullValues {
			toSerialize["values"] = o.Values
		}
	} else {
		toSerialize["values"] = o.Values
	}
	if o.Dates == nil {
		if o.isExplicitNullDates {
			toSerialize["dates"] = o.Dates
		}
	} else {
		toSerialize["dates"] = o.Dates
	}
	return json.Marshal(toSerialize)
}


