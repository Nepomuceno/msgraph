/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// IosVppApp Contains properties and inherited properties for iOS Volume-Purchased Program (VPP) Apps.
type IosVppApp struct {
	// The number of VPP licenses in use.
	UsedLicenseCount *int32 `json:"usedLicenseCount,omitempty"`

	// The total number of VPP licenses.
	TotalLicenseCount *int32 `json:"totalLicenseCount,omitempty"`

	// The VPP application release date and time.
	ReleaseDateTime *time.Time `json:"releaseDateTime,omitempty"`
	isExplicitNullReleaseDateTime bool `json:"-"`
	// The store URL.
	AppStoreUrl *string `json:"appStoreUrl,omitempty"`
	isExplicitNullAppStoreUrl bool `json:"-"`
	// The supported License Type.
	LicensingType *AnyOfmicrosoftGraphVppLicensingType `json:"licensingType,omitempty"`
	isExplicitNullLicensingType bool `json:"-"`
	// The applicable iOS Device Type.
	ApplicableDeviceType *AnyOfmicrosoftGraphIosDeviceType `json:"applicableDeviceType,omitempty"`
	isExplicitNullApplicableDeviceType bool `json:"-"`
	// The organization associated with the Apple Volume Purchase Program Token
	VppTokenOrganizationName *string `json:"vppTokenOrganizationName,omitempty"`
	isExplicitNullVppTokenOrganizationName bool `json:"-"`
	// The type of volume purchase program which the given Apple Volume Purchase Program Token is associated with. Possible values are: `business`, `education`.
	VppTokenAccountType *AnyOfmicrosoftGraphVppTokenAccountType `json:"vppTokenAccountType,omitempty"`

	// The Apple Id associated with the given Apple Volume Purchase Program Token.
	VppTokenAppleId *string `json:"vppTokenAppleId,omitempty"`
	isExplicitNullVppTokenAppleId bool `json:"-"`
	// The Identity Name.
	BundleId *string `json:"bundleId,omitempty"`
	isExplicitNullBundleId bool `json:"-"`
}

// GetUsedLicenseCount returns the UsedLicenseCount field if non-nil, zero value otherwise.
func (o *IosVppApp) GetUsedLicenseCount() int32 {
	if o == nil || o.UsedLicenseCount == nil {
		var ret int32
		return ret
	}
	return *o.UsedLicenseCount
}

// GetUsedLicenseCountOk returns a tuple with the UsedLicenseCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetUsedLicenseCountOk() (int32, bool) {
	if o == nil || o.UsedLicenseCount == nil {
		var ret int32
		return ret, false
	}
	return *o.UsedLicenseCount, true
}

// HasUsedLicenseCount returns a boolean if a field has been set.
func (o *IosVppApp) HasUsedLicenseCount() bool {
	if o != nil && o.UsedLicenseCount != nil {
		return true
	}

	return false
}

// SetUsedLicenseCount gets a reference to the given int32 and assigns it to the UsedLicenseCount field.
func (o *IosVppApp) SetUsedLicenseCount(v int32) {
	o.UsedLicenseCount = &v
}

// GetTotalLicenseCount returns the TotalLicenseCount field if non-nil, zero value otherwise.
func (o *IosVppApp) GetTotalLicenseCount() int32 {
	if o == nil || o.TotalLicenseCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalLicenseCount
}

// GetTotalLicenseCountOk returns a tuple with the TotalLicenseCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetTotalLicenseCountOk() (int32, bool) {
	if o == nil || o.TotalLicenseCount == nil {
		var ret int32
		return ret, false
	}
	return *o.TotalLicenseCount, true
}

// HasTotalLicenseCount returns a boolean if a field has been set.
func (o *IosVppApp) HasTotalLicenseCount() bool {
	if o != nil && o.TotalLicenseCount != nil {
		return true
	}

	return false
}

// SetTotalLicenseCount gets a reference to the given int32 and assigns it to the TotalLicenseCount field.
func (o *IosVppApp) SetTotalLicenseCount(v int32) {
	o.TotalLicenseCount = &v
}

// GetReleaseDateTime returns the ReleaseDateTime field if non-nil, zero value otherwise.
func (o *IosVppApp) GetReleaseDateTime() time.Time {
	if o == nil || o.ReleaseDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDateTime
}

// GetReleaseDateTimeOk returns a tuple with the ReleaseDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetReleaseDateTimeOk() (time.Time, bool) {
	if o == nil || o.ReleaseDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ReleaseDateTime, true
}

// HasReleaseDateTime returns a boolean if a field has been set.
func (o *IosVppApp) HasReleaseDateTime() bool {
	if o != nil && o.ReleaseDateTime != nil {
		return true
	}

	return false
}

// SetReleaseDateTime gets a reference to the given time.Time and assigns it to the ReleaseDateTime field.
func (o *IosVppApp) SetReleaseDateTime(v time.Time) {
	o.ReleaseDateTime = &v
}

// SetReleaseDateTimeExplicitNull (un)sets ReleaseDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ReleaseDateTime value is set to nil even if false is passed
func (o *IosVppApp) SetReleaseDateTimeExplicitNull(b bool) {
	o.ReleaseDateTime = nil
	o.isExplicitNullReleaseDateTime = b
}
// GetAppStoreUrl returns the AppStoreUrl field if non-nil, zero value otherwise.
func (o *IosVppApp) GetAppStoreUrl() string {
	if o == nil || o.AppStoreUrl == nil {
		var ret string
		return ret
	}
	return *o.AppStoreUrl
}

// GetAppStoreUrlOk returns a tuple with the AppStoreUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetAppStoreUrlOk() (string, bool) {
	if o == nil || o.AppStoreUrl == nil {
		var ret string
		return ret, false
	}
	return *o.AppStoreUrl, true
}

// HasAppStoreUrl returns a boolean if a field has been set.
func (o *IosVppApp) HasAppStoreUrl() bool {
	if o != nil && o.AppStoreUrl != nil {
		return true
	}

	return false
}

// SetAppStoreUrl gets a reference to the given string and assigns it to the AppStoreUrl field.
func (o *IosVppApp) SetAppStoreUrl(v string) {
	o.AppStoreUrl = &v
}

// SetAppStoreUrlExplicitNull (un)sets AppStoreUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AppStoreUrl value is set to nil even if false is passed
func (o *IosVppApp) SetAppStoreUrlExplicitNull(b bool) {
	o.AppStoreUrl = nil
	o.isExplicitNullAppStoreUrl = b
}
// GetLicensingType returns the LicensingType field if non-nil, zero value otherwise.
func (o *IosVppApp) GetLicensingType() AnyOfmicrosoftGraphVppLicensingType {
	if o == nil || o.LicensingType == nil {
		var ret AnyOfmicrosoftGraphVppLicensingType
		return ret
	}
	return *o.LicensingType
}

// GetLicensingTypeOk returns a tuple with the LicensingType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetLicensingTypeOk() (AnyOfmicrosoftGraphVppLicensingType, bool) {
	if o == nil || o.LicensingType == nil {
		var ret AnyOfmicrosoftGraphVppLicensingType
		return ret, false
	}
	return *o.LicensingType, true
}

// HasLicensingType returns a boolean if a field has been set.
func (o *IosVppApp) HasLicensingType() bool {
	if o != nil && o.LicensingType != nil {
		return true
	}

	return false
}

// SetLicensingType gets a reference to the given AnyOfmicrosoftGraphVppLicensingType and assigns it to the LicensingType field.
func (o *IosVppApp) SetLicensingType(v AnyOfmicrosoftGraphVppLicensingType) {
	o.LicensingType = &v
}

// SetLicensingTypeExplicitNull (un)sets LicensingType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LicensingType value is set to nil even if false is passed
func (o *IosVppApp) SetLicensingTypeExplicitNull(b bool) {
	o.LicensingType = nil
	o.isExplicitNullLicensingType = b
}
// GetApplicableDeviceType returns the ApplicableDeviceType field if non-nil, zero value otherwise.
func (o *IosVppApp) GetApplicableDeviceType() AnyOfmicrosoftGraphIosDeviceType {
	if o == nil || o.ApplicableDeviceType == nil {
		var ret AnyOfmicrosoftGraphIosDeviceType
		return ret
	}
	return *o.ApplicableDeviceType
}

// GetApplicableDeviceTypeOk returns a tuple with the ApplicableDeviceType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetApplicableDeviceTypeOk() (AnyOfmicrosoftGraphIosDeviceType, bool) {
	if o == nil || o.ApplicableDeviceType == nil {
		var ret AnyOfmicrosoftGraphIosDeviceType
		return ret, false
	}
	return *o.ApplicableDeviceType, true
}

// HasApplicableDeviceType returns a boolean if a field has been set.
func (o *IosVppApp) HasApplicableDeviceType() bool {
	if o != nil && o.ApplicableDeviceType != nil {
		return true
	}

	return false
}

// SetApplicableDeviceType gets a reference to the given AnyOfmicrosoftGraphIosDeviceType and assigns it to the ApplicableDeviceType field.
func (o *IosVppApp) SetApplicableDeviceType(v AnyOfmicrosoftGraphIosDeviceType) {
	o.ApplicableDeviceType = &v
}

// SetApplicableDeviceTypeExplicitNull (un)sets ApplicableDeviceType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ApplicableDeviceType value is set to nil even if false is passed
func (o *IosVppApp) SetApplicableDeviceTypeExplicitNull(b bool) {
	o.ApplicableDeviceType = nil
	o.isExplicitNullApplicableDeviceType = b
}
// GetVppTokenOrganizationName returns the VppTokenOrganizationName field if non-nil, zero value otherwise.
func (o *IosVppApp) GetVppTokenOrganizationName() string {
	if o == nil || o.VppTokenOrganizationName == nil {
		var ret string
		return ret
	}
	return *o.VppTokenOrganizationName
}

// GetVppTokenOrganizationNameOk returns a tuple with the VppTokenOrganizationName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetVppTokenOrganizationNameOk() (string, bool) {
	if o == nil || o.VppTokenOrganizationName == nil {
		var ret string
		return ret, false
	}
	return *o.VppTokenOrganizationName, true
}

// HasVppTokenOrganizationName returns a boolean if a field has been set.
func (o *IosVppApp) HasVppTokenOrganizationName() bool {
	if o != nil && o.VppTokenOrganizationName != nil {
		return true
	}

	return false
}

// SetVppTokenOrganizationName gets a reference to the given string and assigns it to the VppTokenOrganizationName field.
func (o *IosVppApp) SetVppTokenOrganizationName(v string) {
	o.VppTokenOrganizationName = &v
}

// SetVppTokenOrganizationNameExplicitNull (un)sets VppTokenOrganizationName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The VppTokenOrganizationName value is set to nil even if false is passed
func (o *IosVppApp) SetVppTokenOrganizationNameExplicitNull(b bool) {
	o.VppTokenOrganizationName = nil
	o.isExplicitNullVppTokenOrganizationName = b
}
// GetVppTokenAccountType returns the VppTokenAccountType field if non-nil, zero value otherwise.
func (o *IosVppApp) GetVppTokenAccountType() AnyOfmicrosoftGraphVppTokenAccountType {
	if o == nil || o.VppTokenAccountType == nil {
		var ret AnyOfmicrosoftGraphVppTokenAccountType
		return ret
	}
	return *o.VppTokenAccountType
}

// GetVppTokenAccountTypeOk returns a tuple with the VppTokenAccountType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetVppTokenAccountTypeOk() (AnyOfmicrosoftGraphVppTokenAccountType, bool) {
	if o == nil || o.VppTokenAccountType == nil {
		var ret AnyOfmicrosoftGraphVppTokenAccountType
		return ret, false
	}
	return *o.VppTokenAccountType, true
}

// HasVppTokenAccountType returns a boolean if a field has been set.
func (o *IosVppApp) HasVppTokenAccountType() bool {
	if o != nil && o.VppTokenAccountType != nil {
		return true
	}

	return false
}

// SetVppTokenAccountType gets a reference to the given AnyOfmicrosoftGraphVppTokenAccountType and assigns it to the VppTokenAccountType field.
func (o *IosVppApp) SetVppTokenAccountType(v AnyOfmicrosoftGraphVppTokenAccountType) {
	o.VppTokenAccountType = &v
}

// GetVppTokenAppleId returns the VppTokenAppleId field if non-nil, zero value otherwise.
func (o *IosVppApp) GetVppTokenAppleId() string {
	if o == nil || o.VppTokenAppleId == nil {
		var ret string
		return ret
	}
	return *o.VppTokenAppleId
}

// GetVppTokenAppleIdOk returns a tuple with the VppTokenAppleId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetVppTokenAppleIdOk() (string, bool) {
	if o == nil || o.VppTokenAppleId == nil {
		var ret string
		return ret, false
	}
	return *o.VppTokenAppleId, true
}

// HasVppTokenAppleId returns a boolean if a field has been set.
func (o *IosVppApp) HasVppTokenAppleId() bool {
	if o != nil && o.VppTokenAppleId != nil {
		return true
	}

	return false
}

// SetVppTokenAppleId gets a reference to the given string and assigns it to the VppTokenAppleId field.
func (o *IosVppApp) SetVppTokenAppleId(v string) {
	o.VppTokenAppleId = &v
}

// SetVppTokenAppleIdExplicitNull (un)sets VppTokenAppleId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The VppTokenAppleId value is set to nil even if false is passed
func (o *IosVppApp) SetVppTokenAppleIdExplicitNull(b bool) {
	o.VppTokenAppleId = nil
	o.isExplicitNullVppTokenAppleId = b
}
// GetBundleId returns the BundleId field if non-nil, zero value otherwise.
func (o *IosVppApp) GetBundleId() string {
	if o == nil || o.BundleId == nil {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IosVppApp) GetBundleIdOk() (string, bool) {
	if o == nil || o.BundleId == nil {
		var ret string
		return ret, false
	}
	return *o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *IosVppApp) HasBundleId() bool {
	if o != nil && o.BundleId != nil {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *IosVppApp) SetBundleId(v string) {
	o.BundleId = &v
}

// SetBundleIdExplicitNull (un)sets BundleId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The BundleId value is set to nil even if false is passed
func (o *IosVppApp) SetBundleIdExplicitNull(b bool) {
	o.BundleId = nil
	o.isExplicitNullBundleId = b
}

// MarshalJSON returns the JSON representation of the model.
func (o IosVppApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UsedLicenseCount != nil {
		toSerialize["usedLicenseCount"] = o.UsedLicenseCount
	}
	if o.TotalLicenseCount != nil {
		toSerialize["totalLicenseCount"] = o.TotalLicenseCount
	}
	if o.ReleaseDateTime == nil {
		if o.isExplicitNullReleaseDateTime {
			toSerialize["releaseDateTime"] = o.ReleaseDateTime
		}
	} else {
		toSerialize["releaseDateTime"] = o.ReleaseDateTime
	}
	if o.AppStoreUrl == nil {
		if o.isExplicitNullAppStoreUrl {
			toSerialize["appStoreUrl"] = o.AppStoreUrl
		}
	} else {
		toSerialize["appStoreUrl"] = o.AppStoreUrl
	}
	if o.LicensingType == nil {
		if o.isExplicitNullLicensingType {
			toSerialize["licensingType"] = o.LicensingType
		}
	} else {
		toSerialize["licensingType"] = o.LicensingType
	}
	if o.ApplicableDeviceType == nil {
		if o.isExplicitNullApplicableDeviceType {
			toSerialize["applicableDeviceType"] = o.ApplicableDeviceType
		}
	} else {
		toSerialize["applicableDeviceType"] = o.ApplicableDeviceType
	}
	if o.VppTokenOrganizationName == nil {
		if o.isExplicitNullVppTokenOrganizationName {
			toSerialize["vppTokenOrganizationName"] = o.VppTokenOrganizationName
		}
	} else {
		toSerialize["vppTokenOrganizationName"] = o.VppTokenOrganizationName
	}
	if o.VppTokenAccountType != nil {
		toSerialize["vppTokenAccountType"] = o.VppTokenAccountType
	}
	if o.VppTokenAppleId == nil {
		if o.isExplicitNullVppTokenAppleId {
			toSerialize["vppTokenAppleId"] = o.VppTokenAppleId
		}
	} else {
		toSerialize["vppTokenAppleId"] = o.VppTokenAppleId
	}
	if o.BundleId == nil {
		if o.isExplicitNullBundleId {
			toSerialize["bundleId"] = o.BundleId
		}
	} else {
		toSerialize["bundleId"] = o.BundleId
	}
	return json.Marshal(toSerialize)
}


