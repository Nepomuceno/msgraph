/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphWindowsFirewallNetworkProfile struct for MicrosoftGraphWindowsFirewallNetworkProfile
type MicrosoftGraphWindowsFirewallNetworkProfile struct {
	// Configures the host device to allow or block the firewall and advanced security enforcement for the network profile.
	FirewallEnabled *AnyOfmicrosoftGraphStateManagementSetting `json:"firewallEnabled,omitempty"`

	// Prevent the server from operating in stealth mode. When StealthModeRequired and StealthModeBlocked are both true, StealthModeBlocked takes priority.
	StealthModeBlocked *bool `json:"stealthModeBlocked,omitempty"`

	// Configures the firewall to block all incoming traffic regardless of other policy settings. When IncomingTrafficRequired and IncomingTrafficBlocked are both true, IncomingTrafficBlocked takes priority.
	IncomingTrafficBlocked *bool `json:"incomingTrafficBlocked,omitempty"`

	// Configures the firewall to block unicast responses to multicast broadcast traffic. When UnicastResponsesToMulticastBroadcastsRequired and UnicastResponsesToMulticastBroadcastsBlocked are both true, UnicastResponsesToMulticastBroadcastsBlocked takes priority.
	UnicastResponsesToMulticastBroadcastsBlocked *bool `json:"unicastResponsesToMulticastBroadcastsBlocked,omitempty"`

	// Prevents the firewall from displaying notifications when an application is blocked from listening on a port. When InboundNotificationsRequired and InboundNotificationsBlocked are both true, InboundNotificationsBlocked takes priority.
	InboundNotificationsBlocked *bool `json:"inboundNotificationsBlocked,omitempty"`

	// Configures the firewall to merge authorized application rules from group policy with those from local store instead of ignoring the local store rules. When AuthorizedApplicationRulesFromGroupPolicyNotMerged and AuthorizedApplicationRulesFromGroupPolicyMerged are both true, AuthorizedApplicationRulesFromGroupPolicyMerged takes priority.
	AuthorizedApplicationRulesFromGroupPolicyMerged *bool `json:"authorizedApplicationRulesFromGroupPolicyMerged,omitempty"`

	// Configures the firewall to merge global port rules from group policy with those from local store instead of ignoring the local store rules. When GlobalPortRulesFromGroupPolicyNotMerged and GlobalPortRulesFromGroupPolicyMerged are both true, GlobalPortRulesFromGroupPolicyMerged takes priority.
	GlobalPortRulesFromGroupPolicyMerged *bool `json:"globalPortRulesFromGroupPolicyMerged,omitempty"`

	// Configures the firewall to merge connection security rules from group policy with those from local store instead of ignoring the local store rules. When ConnectionSecurityRulesFromGroupPolicyNotMerged and ConnectionSecurityRulesFromGroupPolicyMerged are both true, ConnectionSecurityRulesFromGroupPolicyMerged takes priority.
	ConnectionSecurityRulesFromGroupPolicyMerged *bool `json:"connectionSecurityRulesFromGroupPolicyMerged,omitempty"`

	// Configures the firewall to block all outgoing connections by default. When OutboundConnectionsRequired and OutboundConnectionsBlocked are both true, OutboundConnectionsBlocked takes priority.
	OutboundConnectionsBlocked *bool `json:"outboundConnectionsBlocked,omitempty"`

	// Configures the firewall to block all incoming connections by default. When InboundConnectionsRequired and InboundConnectionsBlocked are both true, InboundConnectionsBlocked takes priority.
	InboundConnectionsBlocked *bool `json:"inboundConnectionsBlocked,omitempty"`

	// Configures the firewall to allow the host computer to respond to unsolicited network traffic of that traffic is secured by IPSec even when stealthModeBlocked is set to true. When SecuredPacketExemptionBlocked and SecuredPacketExemptionAllowed are both true, SecuredPacketExemptionAllowed takes priority.
	SecuredPacketExemptionAllowed *bool `json:"securedPacketExemptionAllowed,omitempty"`

	// Configures the firewall to merge Firewall Rule policies from group policy with those from local store instead of ignoring the local store rules. When PolicyRulesFromGroupPolicyNotMerged and PolicyRulesFromGroupPolicyMerged are both true, PolicyRulesFromGroupPolicyMerged takes priority.
	PolicyRulesFromGroupPolicyMerged *bool `json:"policyRulesFromGroupPolicyMerged,omitempty"`

}

// GetFirewallEnabled returns the FirewallEnabled field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetFirewallEnabled() AnyOfmicrosoftGraphStateManagementSetting {
	if o == nil || o.FirewallEnabled == nil {
		var ret AnyOfmicrosoftGraphStateManagementSetting
		return ret
	}
	return *o.FirewallEnabled
}

// GetFirewallEnabledOk returns a tuple with the FirewallEnabled field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetFirewallEnabledOk() (AnyOfmicrosoftGraphStateManagementSetting, bool) {
	if o == nil || o.FirewallEnabled == nil {
		var ret AnyOfmicrosoftGraphStateManagementSetting
		return ret, false
	}
	return *o.FirewallEnabled, true
}

// HasFirewallEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasFirewallEnabled() bool {
	if o != nil && o.FirewallEnabled != nil {
		return true
	}

	return false
}

// SetFirewallEnabled gets a reference to the given AnyOfmicrosoftGraphStateManagementSetting and assigns it to the FirewallEnabled field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetFirewallEnabled(v AnyOfmicrosoftGraphStateManagementSetting) {
	o.FirewallEnabled = &v
}

// GetStealthModeBlocked returns the StealthModeBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetStealthModeBlocked() bool {
	if o == nil || o.StealthModeBlocked == nil {
		var ret bool
		return ret
	}
	return *o.StealthModeBlocked
}

// GetStealthModeBlockedOk returns a tuple with the StealthModeBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetStealthModeBlockedOk() (bool, bool) {
	if o == nil || o.StealthModeBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.StealthModeBlocked, true
}

// HasStealthModeBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasStealthModeBlocked() bool {
	if o != nil && o.StealthModeBlocked != nil {
		return true
	}

	return false
}

// SetStealthModeBlocked gets a reference to the given bool and assigns it to the StealthModeBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetStealthModeBlocked(v bool) {
	o.StealthModeBlocked = &v
}

// GetIncomingTrafficBlocked returns the IncomingTrafficBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetIncomingTrafficBlocked() bool {
	if o == nil || o.IncomingTrafficBlocked == nil {
		var ret bool
		return ret
	}
	return *o.IncomingTrafficBlocked
}

// GetIncomingTrafficBlockedOk returns a tuple with the IncomingTrafficBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetIncomingTrafficBlockedOk() (bool, bool) {
	if o == nil || o.IncomingTrafficBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.IncomingTrafficBlocked, true
}

// HasIncomingTrafficBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasIncomingTrafficBlocked() bool {
	if o != nil && o.IncomingTrafficBlocked != nil {
		return true
	}

	return false
}

// SetIncomingTrafficBlocked gets a reference to the given bool and assigns it to the IncomingTrafficBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetIncomingTrafficBlocked(v bool) {
	o.IncomingTrafficBlocked = &v
}

// GetUnicastResponsesToMulticastBroadcastsBlocked returns the UnicastResponsesToMulticastBroadcastsBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetUnicastResponsesToMulticastBroadcastsBlocked() bool {
	if o == nil || o.UnicastResponsesToMulticastBroadcastsBlocked == nil {
		var ret bool
		return ret
	}
	return *o.UnicastResponsesToMulticastBroadcastsBlocked
}

// GetUnicastResponsesToMulticastBroadcastsBlockedOk returns a tuple with the UnicastResponsesToMulticastBroadcastsBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetUnicastResponsesToMulticastBroadcastsBlockedOk() (bool, bool) {
	if o == nil || o.UnicastResponsesToMulticastBroadcastsBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.UnicastResponsesToMulticastBroadcastsBlocked, true
}

// HasUnicastResponsesToMulticastBroadcastsBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasUnicastResponsesToMulticastBroadcastsBlocked() bool {
	if o != nil && o.UnicastResponsesToMulticastBroadcastsBlocked != nil {
		return true
	}

	return false
}

// SetUnicastResponsesToMulticastBroadcastsBlocked gets a reference to the given bool and assigns it to the UnicastResponsesToMulticastBroadcastsBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetUnicastResponsesToMulticastBroadcastsBlocked(v bool) {
	o.UnicastResponsesToMulticastBroadcastsBlocked = &v
}

// GetInboundNotificationsBlocked returns the InboundNotificationsBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetInboundNotificationsBlocked() bool {
	if o == nil || o.InboundNotificationsBlocked == nil {
		var ret bool
		return ret
	}
	return *o.InboundNotificationsBlocked
}

// GetInboundNotificationsBlockedOk returns a tuple with the InboundNotificationsBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetInboundNotificationsBlockedOk() (bool, bool) {
	if o == nil || o.InboundNotificationsBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.InboundNotificationsBlocked, true
}

// HasInboundNotificationsBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasInboundNotificationsBlocked() bool {
	if o != nil && o.InboundNotificationsBlocked != nil {
		return true
	}

	return false
}

// SetInboundNotificationsBlocked gets a reference to the given bool and assigns it to the InboundNotificationsBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetInboundNotificationsBlocked(v bool) {
	o.InboundNotificationsBlocked = &v
}

// GetAuthorizedApplicationRulesFromGroupPolicyMerged returns the AuthorizedApplicationRulesFromGroupPolicyMerged field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetAuthorizedApplicationRulesFromGroupPolicyMerged() bool {
	if o == nil || o.AuthorizedApplicationRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret
	}
	return *o.AuthorizedApplicationRulesFromGroupPolicyMerged
}

// GetAuthorizedApplicationRulesFromGroupPolicyMergedOk returns a tuple with the AuthorizedApplicationRulesFromGroupPolicyMerged field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetAuthorizedApplicationRulesFromGroupPolicyMergedOk() (bool, bool) {
	if o == nil || o.AuthorizedApplicationRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret, false
	}
	return *o.AuthorizedApplicationRulesFromGroupPolicyMerged, true
}

// HasAuthorizedApplicationRulesFromGroupPolicyMerged returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasAuthorizedApplicationRulesFromGroupPolicyMerged() bool {
	if o != nil && o.AuthorizedApplicationRulesFromGroupPolicyMerged != nil {
		return true
	}

	return false
}

// SetAuthorizedApplicationRulesFromGroupPolicyMerged gets a reference to the given bool and assigns it to the AuthorizedApplicationRulesFromGroupPolicyMerged field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetAuthorizedApplicationRulesFromGroupPolicyMerged(v bool) {
	o.AuthorizedApplicationRulesFromGroupPolicyMerged = &v
}

// GetGlobalPortRulesFromGroupPolicyMerged returns the GlobalPortRulesFromGroupPolicyMerged field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetGlobalPortRulesFromGroupPolicyMerged() bool {
	if o == nil || o.GlobalPortRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret
	}
	return *o.GlobalPortRulesFromGroupPolicyMerged
}

// GetGlobalPortRulesFromGroupPolicyMergedOk returns a tuple with the GlobalPortRulesFromGroupPolicyMerged field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetGlobalPortRulesFromGroupPolicyMergedOk() (bool, bool) {
	if o == nil || o.GlobalPortRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret, false
	}
	return *o.GlobalPortRulesFromGroupPolicyMerged, true
}

// HasGlobalPortRulesFromGroupPolicyMerged returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasGlobalPortRulesFromGroupPolicyMerged() bool {
	if o != nil && o.GlobalPortRulesFromGroupPolicyMerged != nil {
		return true
	}

	return false
}

// SetGlobalPortRulesFromGroupPolicyMerged gets a reference to the given bool and assigns it to the GlobalPortRulesFromGroupPolicyMerged field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetGlobalPortRulesFromGroupPolicyMerged(v bool) {
	o.GlobalPortRulesFromGroupPolicyMerged = &v
}

// GetConnectionSecurityRulesFromGroupPolicyMerged returns the ConnectionSecurityRulesFromGroupPolicyMerged field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetConnectionSecurityRulesFromGroupPolicyMerged() bool {
	if o == nil || o.ConnectionSecurityRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret
	}
	return *o.ConnectionSecurityRulesFromGroupPolicyMerged
}

// GetConnectionSecurityRulesFromGroupPolicyMergedOk returns a tuple with the ConnectionSecurityRulesFromGroupPolicyMerged field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetConnectionSecurityRulesFromGroupPolicyMergedOk() (bool, bool) {
	if o == nil || o.ConnectionSecurityRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret, false
	}
	return *o.ConnectionSecurityRulesFromGroupPolicyMerged, true
}

// HasConnectionSecurityRulesFromGroupPolicyMerged returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasConnectionSecurityRulesFromGroupPolicyMerged() bool {
	if o != nil && o.ConnectionSecurityRulesFromGroupPolicyMerged != nil {
		return true
	}

	return false
}

// SetConnectionSecurityRulesFromGroupPolicyMerged gets a reference to the given bool and assigns it to the ConnectionSecurityRulesFromGroupPolicyMerged field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetConnectionSecurityRulesFromGroupPolicyMerged(v bool) {
	o.ConnectionSecurityRulesFromGroupPolicyMerged = &v
}

// GetOutboundConnectionsBlocked returns the OutboundConnectionsBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetOutboundConnectionsBlocked() bool {
	if o == nil || o.OutboundConnectionsBlocked == nil {
		var ret bool
		return ret
	}
	return *o.OutboundConnectionsBlocked
}

// GetOutboundConnectionsBlockedOk returns a tuple with the OutboundConnectionsBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetOutboundConnectionsBlockedOk() (bool, bool) {
	if o == nil || o.OutboundConnectionsBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.OutboundConnectionsBlocked, true
}

// HasOutboundConnectionsBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasOutboundConnectionsBlocked() bool {
	if o != nil && o.OutboundConnectionsBlocked != nil {
		return true
	}

	return false
}

// SetOutboundConnectionsBlocked gets a reference to the given bool and assigns it to the OutboundConnectionsBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetOutboundConnectionsBlocked(v bool) {
	o.OutboundConnectionsBlocked = &v
}

// GetInboundConnectionsBlocked returns the InboundConnectionsBlocked field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetInboundConnectionsBlocked() bool {
	if o == nil || o.InboundConnectionsBlocked == nil {
		var ret bool
		return ret
	}
	return *o.InboundConnectionsBlocked
}

// GetInboundConnectionsBlockedOk returns a tuple with the InboundConnectionsBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetInboundConnectionsBlockedOk() (bool, bool) {
	if o == nil || o.InboundConnectionsBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.InboundConnectionsBlocked, true
}

// HasInboundConnectionsBlocked returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasInboundConnectionsBlocked() bool {
	if o != nil && o.InboundConnectionsBlocked != nil {
		return true
	}

	return false
}

// SetInboundConnectionsBlocked gets a reference to the given bool and assigns it to the InboundConnectionsBlocked field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetInboundConnectionsBlocked(v bool) {
	o.InboundConnectionsBlocked = &v
}

// GetSecuredPacketExemptionAllowed returns the SecuredPacketExemptionAllowed field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetSecuredPacketExemptionAllowed() bool {
	if o == nil || o.SecuredPacketExemptionAllowed == nil {
		var ret bool
		return ret
	}
	return *o.SecuredPacketExemptionAllowed
}

// GetSecuredPacketExemptionAllowedOk returns a tuple with the SecuredPacketExemptionAllowed field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetSecuredPacketExemptionAllowedOk() (bool, bool) {
	if o == nil || o.SecuredPacketExemptionAllowed == nil {
		var ret bool
		return ret, false
	}
	return *o.SecuredPacketExemptionAllowed, true
}

// HasSecuredPacketExemptionAllowed returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasSecuredPacketExemptionAllowed() bool {
	if o != nil && o.SecuredPacketExemptionAllowed != nil {
		return true
	}

	return false
}

// SetSecuredPacketExemptionAllowed gets a reference to the given bool and assigns it to the SecuredPacketExemptionAllowed field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetSecuredPacketExemptionAllowed(v bool) {
	o.SecuredPacketExemptionAllowed = &v
}

// GetPolicyRulesFromGroupPolicyMerged returns the PolicyRulesFromGroupPolicyMerged field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetPolicyRulesFromGroupPolicyMerged() bool {
	if o == nil || o.PolicyRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret
	}
	return *o.PolicyRulesFromGroupPolicyMerged
}

// GetPolicyRulesFromGroupPolicyMergedOk returns a tuple with the PolicyRulesFromGroupPolicyMerged field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) GetPolicyRulesFromGroupPolicyMergedOk() (bool, bool) {
	if o == nil || o.PolicyRulesFromGroupPolicyMerged == nil {
		var ret bool
		return ret, false
	}
	return *o.PolicyRulesFromGroupPolicyMerged, true
}

// HasPolicyRulesFromGroupPolicyMerged returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) HasPolicyRulesFromGroupPolicyMerged() bool {
	if o != nil && o.PolicyRulesFromGroupPolicyMerged != nil {
		return true
	}

	return false
}

// SetPolicyRulesFromGroupPolicyMerged gets a reference to the given bool and assigns it to the PolicyRulesFromGroupPolicyMerged field.
func (o *MicrosoftGraphWindowsFirewallNetworkProfile) SetPolicyRulesFromGroupPolicyMerged(v bool) {
	o.PolicyRulesFromGroupPolicyMerged = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphWindowsFirewallNetworkProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirewallEnabled != nil {
		toSerialize["firewallEnabled"] = o.FirewallEnabled
	}
	if o.StealthModeBlocked != nil {
		toSerialize["stealthModeBlocked"] = o.StealthModeBlocked
	}
	if o.IncomingTrafficBlocked != nil {
		toSerialize["incomingTrafficBlocked"] = o.IncomingTrafficBlocked
	}
	if o.UnicastResponsesToMulticastBroadcastsBlocked != nil {
		toSerialize["unicastResponsesToMulticastBroadcastsBlocked"] = o.UnicastResponsesToMulticastBroadcastsBlocked
	}
	if o.InboundNotificationsBlocked != nil {
		toSerialize["inboundNotificationsBlocked"] = o.InboundNotificationsBlocked
	}
	if o.AuthorizedApplicationRulesFromGroupPolicyMerged != nil {
		toSerialize["authorizedApplicationRulesFromGroupPolicyMerged"] = o.AuthorizedApplicationRulesFromGroupPolicyMerged
	}
	if o.GlobalPortRulesFromGroupPolicyMerged != nil {
		toSerialize["globalPortRulesFromGroupPolicyMerged"] = o.GlobalPortRulesFromGroupPolicyMerged
	}
	if o.ConnectionSecurityRulesFromGroupPolicyMerged != nil {
		toSerialize["connectionSecurityRulesFromGroupPolicyMerged"] = o.ConnectionSecurityRulesFromGroupPolicyMerged
	}
	if o.OutboundConnectionsBlocked != nil {
		toSerialize["outboundConnectionsBlocked"] = o.OutboundConnectionsBlocked
	}
	if o.InboundConnectionsBlocked != nil {
		toSerialize["inboundConnectionsBlocked"] = o.InboundConnectionsBlocked
	}
	if o.SecuredPacketExemptionAllowed != nil {
		toSerialize["securedPacketExemptionAllowed"] = o.SecuredPacketExemptionAllowed
	}
	if o.PolicyRulesFromGroupPolicyMerged != nil {
		toSerialize["policyRulesFromGroupPolicyMerged"] = o.PolicyRulesFromGroupPolicyMerged
	}
	return json.Marshal(toSerialize)
}


