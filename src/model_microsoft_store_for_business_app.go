/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftStoreForBusinessApp Microsoft Store for Business Apps. This class does not support Create, Delete, or Update.
type MicrosoftStoreForBusinessApp struct {
	// The number of Microsoft Store for Business licenses in use.
	UsedLicenseCount *int32 `json:"usedLicenseCount,omitempty"`

	// The total number of Microsoft Store for Business licenses.
	TotalLicenseCount *int32 `json:"totalLicenseCount,omitempty"`

	// The app product key
	ProductKey *string `json:"productKey,omitempty"`
	isExplicitNullProductKey bool `json:"-"`
	// The app license type
	LicenseType *AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType `json:"licenseType,omitempty"`

	// The app package identifier
	PackageIdentityName *string `json:"packageIdentityName,omitempty"`
	isExplicitNullPackageIdentityName bool `json:"-"`
}

// GetUsedLicenseCount returns the UsedLicenseCount field if non-nil, zero value otherwise.
func (o *MicrosoftStoreForBusinessApp) GetUsedLicenseCount() int32 {
	if o == nil || o.UsedLicenseCount == nil {
		var ret int32
		return ret
	}
	return *o.UsedLicenseCount
}

// GetUsedLicenseCountOk returns a tuple with the UsedLicenseCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftStoreForBusinessApp) GetUsedLicenseCountOk() (int32, bool) {
	if o == nil || o.UsedLicenseCount == nil {
		var ret int32
		return ret, false
	}
	return *o.UsedLicenseCount, true
}

// HasUsedLicenseCount returns a boolean if a field has been set.
func (o *MicrosoftStoreForBusinessApp) HasUsedLicenseCount() bool {
	if o != nil && o.UsedLicenseCount != nil {
		return true
	}

	return false
}

// SetUsedLicenseCount gets a reference to the given int32 and assigns it to the UsedLicenseCount field.
func (o *MicrosoftStoreForBusinessApp) SetUsedLicenseCount(v int32) {
	o.UsedLicenseCount = &v
}

// GetTotalLicenseCount returns the TotalLicenseCount field if non-nil, zero value otherwise.
func (o *MicrosoftStoreForBusinessApp) GetTotalLicenseCount() int32 {
	if o == nil || o.TotalLicenseCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalLicenseCount
}

// GetTotalLicenseCountOk returns a tuple with the TotalLicenseCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftStoreForBusinessApp) GetTotalLicenseCountOk() (int32, bool) {
	if o == nil || o.TotalLicenseCount == nil {
		var ret int32
		return ret, false
	}
	return *o.TotalLicenseCount, true
}

// HasTotalLicenseCount returns a boolean if a field has been set.
func (o *MicrosoftStoreForBusinessApp) HasTotalLicenseCount() bool {
	if o != nil && o.TotalLicenseCount != nil {
		return true
	}

	return false
}

// SetTotalLicenseCount gets a reference to the given int32 and assigns it to the TotalLicenseCount field.
func (o *MicrosoftStoreForBusinessApp) SetTotalLicenseCount(v int32) {
	o.TotalLicenseCount = &v
}

// GetProductKey returns the ProductKey field if non-nil, zero value otherwise.
func (o *MicrosoftStoreForBusinessApp) GetProductKey() string {
	if o == nil || o.ProductKey == nil {
		var ret string
		return ret
	}
	return *o.ProductKey
}

// GetProductKeyOk returns a tuple with the ProductKey field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftStoreForBusinessApp) GetProductKeyOk() (string, bool) {
	if o == nil || o.ProductKey == nil {
		var ret string
		return ret, false
	}
	return *o.ProductKey, true
}

// HasProductKey returns a boolean if a field has been set.
func (o *MicrosoftStoreForBusinessApp) HasProductKey() bool {
	if o != nil && o.ProductKey != nil {
		return true
	}

	return false
}

// SetProductKey gets a reference to the given string and assigns it to the ProductKey field.
func (o *MicrosoftStoreForBusinessApp) SetProductKey(v string) {
	o.ProductKey = &v
}

// SetProductKeyExplicitNull (un)sets ProductKey to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ProductKey value is set to nil even if false is passed
func (o *MicrosoftStoreForBusinessApp) SetProductKeyExplicitNull(b bool) {
	o.ProductKey = nil
	o.isExplicitNullProductKey = b
}
// GetLicenseType returns the LicenseType field if non-nil, zero value otherwise.
func (o *MicrosoftStoreForBusinessApp) GetLicenseType() AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType {
	if o == nil || o.LicenseType == nil {
		var ret AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftStoreForBusinessApp) GetLicenseTypeOk() (AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType, bool) {
	if o == nil || o.LicenseType == nil {
		var ret AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType
		return ret, false
	}
	return *o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *MicrosoftStoreForBusinessApp) HasLicenseType() bool {
	if o != nil && o.LicenseType != nil {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType and assigns it to the LicenseType field.
func (o *MicrosoftStoreForBusinessApp) SetLicenseType(v AnyOfmicrosoftGraphMicrosoftStoreForBusinessLicenseType) {
	o.LicenseType = &v
}

// GetPackageIdentityName returns the PackageIdentityName field if non-nil, zero value otherwise.
func (o *MicrosoftStoreForBusinessApp) GetPackageIdentityName() string {
	if o == nil || o.PackageIdentityName == nil {
		var ret string
		return ret
	}
	return *o.PackageIdentityName
}

// GetPackageIdentityNameOk returns a tuple with the PackageIdentityName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftStoreForBusinessApp) GetPackageIdentityNameOk() (string, bool) {
	if o == nil || o.PackageIdentityName == nil {
		var ret string
		return ret, false
	}
	return *o.PackageIdentityName, true
}

// HasPackageIdentityName returns a boolean if a field has been set.
func (o *MicrosoftStoreForBusinessApp) HasPackageIdentityName() bool {
	if o != nil && o.PackageIdentityName != nil {
		return true
	}

	return false
}

// SetPackageIdentityName gets a reference to the given string and assigns it to the PackageIdentityName field.
func (o *MicrosoftStoreForBusinessApp) SetPackageIdentityName(v string) {
	o.PackageIdentityName = &v
}

// SetPackageIdentityNameExplicitNull (un)sets PackageIdentityName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PackageIdentityName value is set to nil even if false is passed
func (o *MicrosoftStoreForBusinessApp) SetPackageIdentityNameExplicitNull(b bool) {
	o.PackageIdentityName = nil
	o.isExplicitNullPackageIdentityName = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftStoreForBusinessApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UsedLicenseCount != nil {
		toSerialize["usedLicenseCount"] = o.UsedLicenseCount
	}
	if o.TotalLicenseCount != nil {
		toSerialize["totalLicenseCount"] = o.TotalLicenseCount
	}
	if o.ProductKey == nil {
		if o.isExplicitNullProductKey {
			toSerialize["productKey"] = o.ProductKey
		}
	} else {
		toSerialize["productKey"] = o.ProductKey
	}
	if o.LicenseType != nil {
		toSerialize["licenseType"] = o.LicenseType
	}
	if o.PackageIdentityName == nil {
		if o.isExplicitNullPackageIdentityName {
			toSerialize["packageIdentityName"] = o.PackageIdentityName
		}
	} else {
		toSerialize["packageIdentityName"] = o.PackageIdentityName
	}
	return json.Marshal(toSerialize)
}


