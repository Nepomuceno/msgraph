/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"fmt"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// GroupsOnenotePagesNotebookApiService GroupsOnenotePagesNotebookApi service
type GroupsOnenotePagesNotebookApiService service

// GroupsOnenotePagesGetParentNotebookOpts Optional parameters for the method 'GroupsOnenotePagesGetParentNotebook'
type GroupsOnenotePagesGetParentNotebookOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesGetParentNotebook Get parentNotebook from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param optional nil or *GroupsOnenotePagesGetParentNotebookOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphNotebook
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, localVarOptionals *GroupsOnenotePagesGetParentNotebookOpts) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphNotebook
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param microsoftGraphSectionGroup New navigation property
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookCreateSections Create new navigation property to sections for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param microsoftGraphOnenoteSection New navigation property
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookCreateSections(ctx _context.Context, groupId string, onenotePageId string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookGetSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookGetSectionGroups'
type GroupsOnenotePagesParentNotebookGetSectionGroupsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookGetSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookGetSectionGroupsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookGetSectionGroupsOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookGetSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookGetSections'
type GroupsOnenotePagesParentNotebookGetSectionsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookGetSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookGetSectionsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookGetSectionsOpts) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookListSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookListSectionGroups'
type GroupsOnenotePagesParentNotebookListSectionGroupsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookListSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param optional nil or *GroupsOnenotePagesParentNotebookListSectionGroupsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, localVarOptionals *GroupsOnenotePagesParentNotebookListSectionGroupsOpts) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookListSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookListSections'
type GroupsOnenotePagesParentNotebookListSectionsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookListSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param optional nil or *GroupsOnenotePagesParentNotebookListSectionsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookListSections(ctx _context.Context, groupId string, onenotePageId string, localVarOptionals *GroupsOnenotePagesParentNotebookListSectionsOpts) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphSectionGroup New navigation property
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphOnenoteSection New navigation property
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook'
type GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphNotebook
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookOpts) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphNotebook
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup'
type GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups'
type GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param sectionGroupId1 key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sectionGroups({sectionGroup-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsGetSections'
type GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsOpts) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups'
type GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsOpts) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsListSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsListSections'
type GroupsOnenotePagesParentNotebookSectionGroupsListSectionsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsListSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsListSectionsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsListSectionsOpts) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePages Create new navigation property to pages for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenotePage New navigation property
@return MicrosoftGraphOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, microsoftGraphOnenotePage MicrosoftGraphOnenotePage) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenotePage
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages'
type GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages Get pages from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenotePageId1 key: onenotePage-id of onenotePage
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesOpts) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/pages({onenotePage-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook'
type GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook Get parentNotebook from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphNotebook
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookOpts) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphNotebook
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup'
type GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages'
type GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages Get pages from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesOpts) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages Update the navigation property pages in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenotePageId1 key: onenotePage-id of onenotePage
 * @param microsoftGraphOnenotePage New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string, microsoftGraphOnenotePage MicrosoftGraphOnenotePage) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/pages({onenotePage-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenotePage
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphNotebook New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, microsoftGraphNotebook MicrosoftGraphNotebook) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphNotebook
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphNotebook New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, microsoftGraphNotebook MicrosoftGraphNotebook) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphNotebook
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param sectionGroupId1 key: sectionGroup-id of sectionGroup
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sectionGroups({sectionGroup-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenoteSection New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})/sections({onenoteSection-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsCreatePages Create new navigation property to pages for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenotePage New navigation property
@return MicrosoftGraphOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsCreatePages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphOnenotePage MicrosoftGraphOnenotePage) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenotePage
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsGetPagesOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsGetPages'
type GroupsOnenotePagesParentNotebookSectionsGetPagesOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsGetPages Get pages from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenotePageId1 key: onenotePage-id of onenotePage
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsGetPagesOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsGetPages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsGetPagesOpts) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/pages({onenotePage-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsGetParentNotebookOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsGetParentNotebook'
type GroupsOnenotePagesParentNotebookSectionsGetParentNotebookOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsGetParentNotebook Get parentNotebook from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsGetParentNotebookOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphNotebook
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsGetParentNotebookOpts) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphNotebook
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup'
type GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsListPagesOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsListPages'
type GroupsOnenotePagesParentNotebookSectionsListPagesOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsListPages Get pages from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsListPagesOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfOnenotePage
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsListPages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsListPagesOpts) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfOnenotePage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphSectionGroup New navigation property
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections Create new navigation property to sections for groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenoteSection New navigation property
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook Get parentNotebook from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphNotebook
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookOpts) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphNotebook
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, sectionGroupId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsOpts) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sectionGroups({sectionGroup-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsOpts struct {
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenoteSectionId1 key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsOpts - Optional Parameters:
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return MicrosoftGraphOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsOpts) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sections({onenoteSection-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MicrosoftGraphOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups Get sectionGroups from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfSectionGroup
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsOpts) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfSectionGroup
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsOpts Optional parameters for the method 'GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections'
type GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsOpts struct {
    Top optional.Int32
    Skip optional.Int32
    Search optional.String
    Filter optional.String
    Count optional.Bool
    Orderby optional.Interface
    Select_ optional.Interface
    Expand optional.Interface
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections Get sections from groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param optional nil or *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsOpts - Optional Parameters:
 * @param "Top" (optional.Int32) -  Show only the first n items
 * @param "Skip" (optional.Int32) -  Skip the first n items
 * @param "Search" (optional.String) -  Search items by search phrases
 * @param "Filter" (optional.String) -  Filter items by property values
 * @param "Count" (optional.Bool) -  Include count of items
 * @param "Orderby" (optional.Interface of []string) -  Order items by property values
 * @param "Select_" (optional.Interface of []string) -  Select properties to be returned
 * @param "Expand" (optional.Interface of []string) -  Expand related entities
@return CollectionOfOnenoteSection
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, localVarOptionals *GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsOpts) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("$search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("$filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("$count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orderby.IsSet() {
		localVarQueryParams.Add("$orderby", parameterToString(localVarOptionals.Orderby.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Select_.IsSet() {
		localVarQueryParams.Add("$select", parameterToString(localVarOptionals.Select_.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.Expand.IsSet() {
		localVarQueryParams.Add("$expand", parameterToString(localVarOptionals.Expand.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CollectionOfOnenoteSection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphNotebook New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphNotebook MicrosoftGraphNotebook) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphNotebook
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, sectionGroupId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sectionGroups({sectionGroup-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections Update the navigation property sections in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenoteSectionId1 key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenoteSection New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup/sections({onenoteSection-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdatePages Update the navigation property pages in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param onenotePageId1 key: onenotePage-id of onenotePage
 * @param microsoftGraphOnenotePage New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsUpdatePages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string, microsoftGraphOnenotePage MicrosoftGraphOnenotePage) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/pages({onenotePage-id1})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId1)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenotePage
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphNotebook New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphNotebook MicrosoftGraphNotebook) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphNotebook
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param sectionGroupId key: sectionGroup-id of sectionGroup
 * @param microsoftGraphSectionGroup New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, microsoftGraphSectionGroup MicrosoftGraphSectionGroup) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sectionGroups({sectionGroup-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", sectionGroupId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphSectionGroup
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesParentNotebookUpdateSections Update the navigation property sections in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param onenoteSectionId key: onenoteSection-id of onenoteSection
 * @param microsoftGraphOnenoteSection New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesParentNotebookUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook/sections({onenoteSection-id})"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenoteSectionId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphOnenoteSection
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GroupsOnenotePagesUpdateParentNotebook Update the navigation property parentNotebook in groups
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param groupId key: group-id of group
 * @param onenotePageId key: onenotePage-id of onenotePage
 * @param microsoftGraphNotebook New navigation property values
*/
func (a *GroupsOnenotePagesNotebookApiService) GroupsOnenotePagesUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, microsoftGraphNotebook MicrosoftGraphNotebook) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/groups({group-id})/onenote/pages({onenotePage-id})/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", groupId)), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.QueryEscape(fmt.Sprintf("%v", onenotePageId)), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &microsoftGraphNotebook
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 0 {
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
