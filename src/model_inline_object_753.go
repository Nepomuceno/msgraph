/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject753 struct for InlineObject753
type InlineObject753 struct {
	Cost *AnyOfobject `json:"cost,omitempty"`
	isExplicitNullCost bool `json:"-"`
	DatePurchased *AnyOfobject `json:"datePurchased,omitempty"`
	isExplicitNullDatePurchased bool `json:"-"`
	FirstPeriod *AnyOfobject `json:"firstPeriod,omitempty"`
	isExplicitNullFirstPeriod bool `json:"-"`
	Salvage *AnyOfobject `json:"salvage,omitempty"`
	isExplicitNullSalvage bool `json:"-"`
	Period *AnyOfobject `json:"period,omitempty"`
	isExplicitNullPeriod bool `json:"-"`
	Rate *AnyOfobject `json:"rate,omitempty"`
	isExplicitNullRate bool `json:"-"`
	Basis *AnyOfobject `json:"basis,omitempty"`
	isExplicitNullBasis bool `json:"-"`
}

// GetCost returns the Cost field if non-nil, zero value otherwise.
func (o *InlineObject753) GetCost() AnyOfobject {
	if o == nil || o.Cost == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetCostOk() (AnyOfobject, bool) {
	if o == nil || o.Cost == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *InlineObject753) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given AnyOfobject and assigns it to the Cost field.
func (o *InlineObject753) SetCost(v AnyOfobject) {
	o.Cost = &v
}

// SetCostExplicitNull (un)sets Cost to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Cost value is set to nil even if false is passed
func (o *InlineObject753) SetCostExplicitNull(b bool) {
	o.Cost = nil
	o.isExplicitNullCost = b
}
// GetDatePurchased returns the DatePurchased field if non-nil, zero value otherwise.
func (o *InlineObject753) GetDatePurchased() AnyOfobject {
	if o == nil || o.DatePurchased == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.DatePurchased
}

// GetDatePurchasedOk returns a tuple with the DatePurchased field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetDatePurchasedOk() (AnyOfobject, bool) {
	if o == nil || o.DatePurchased == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.DatePurchased, true
}

// HasDatePurchased returns a boolean if a field has been set.
func (o *InlineObject753) HasDatePurchased() bool {
	if o != nil && o.DatePurchased != nil {
		return true
	}

	return false
}

// SetDatePurchased gets a reference to the given AnyOfobject and assigns it to the DatePurchased field.
func (o *InlineObject753) SetDatePurchased(v AnyOfobject) {
	o.DatePurchased = &v
}

// SetDatePurchasedExplicitNull (un)sets DatePurchased to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DatePurchased value is set to nil even if false is passed
func (o *InlineObject753) SetDatePurchasedExplicitNull(b bool) {
	o.DatePurchased = nil
	o.isExplicitNullDatePurchased = b
}
// GetFirstPeriod returns the FirstPeriod field if non-nil, zero value otherwise.
func (o *InlineObject753) GetFirstPeriod() AnyOfobject {
	if o == nil || o.FirstPeriod == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.FirstPeriod
}

// GetFirstPeriodOk returns a tuple with the FirstPeriod field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetFirstPeriodOk() (AnyOfobject, bool) {
	if o == nil || o.FirstPeriod == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.FirstPeriod, true
}

// HasFirstPeriod returns a boolean if a field has been set.
func (o *InlineObject753) HasFirstPeriod() bool {
	if o != nil && o.FirstPeriod != nil {
		return true
	}

	return false
}

// SetFirstPeriod gets a reference to the given AnyOfobject and assigns it to the FirstPeriod field.
func (o *InlineObject753) SetFirstPeriod(v AnyOfobject) {
	o.FirstPeriod = &v
}

// SetFirstPeriodExplicitNull (un)sets FirstPeriod to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FirstPeriod value is set to nil even if false is passed
func (o *InlineObject753) SetFirstPeriodExplicitNull(b bool) {
	o.FirstPeriod = nil
	o.isExplicitNullFirstPeriod = b
}
// GetSalvage returns the Salvage field if non-nil, zero value otherwise.
func (o *InlineObject753) GetSalvage() AnyOfobject {
	if o == nil || o.Salvage == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Salvage
}

// GetSalvageOk returns a tuple with the Salvage field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetSalvageOk() (AnyOfobject, bool) {
	if o == nil || o.Salvage == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Salvage, true
}

// HasSalvage returns a boolean if a field has been set.
func (o *InlineObject753) HasSalvage() bool {
	if o != nil && o.Salvage != nil {
		return true
	}

	return false
}

// SetSalvage gets a reference to the given AnyOfobject and assigns it to the Salvage field.
func (o *InlineObject753) SetSalvage(v AnyOfobject) {
	o.Salvage = &v
}

// SetSalvageExplicitNull (un)sets Salvage to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Salvage value is set to nil even if false is passed
func (o *InlineObject753) SetSalvageExplicitNull(b bool) {
	o.Salvage = nil
	o.isExplicitNullSalvage = b
}
// GetPeriod returns the Period field if non-nil, zero value otherwise.
func (o *InlineObject753) GetPeriod() AnyOfobject {
	if o == nil || o.Period == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetPeriodOk() (AnyOfobject, bool) {
	if o == nil || o.Period == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *InlineObject753) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given AnyOfobject and assigns it to the Period field.
func (o *InlineObject753) SetPeriod(v AnyOfobject) {
	o.Period = &v
}

// SetPeriodExplicitNull (un)sets Period to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Period value is set to nil even if false is passed
func (o *InlineObject753) SetPeriodExplicitNull(b bool) {
	o.Period = nil
	o.isExplicitNullPeriod = b
}
// GetRate returns the Rate field if non-nil, zero value otherwise.
func (o *InlineObject753) GetRate() AnyOfobject {
	if o == nil || o.Rate == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetRateOk() (AnyOfobject, bool) {
	if o == nil || o.Rate == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InlineObject753) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given AnyOfobject and assigns it to the Rate field.
func (o *InlineObject753) SetRate(v AnyOfobject) {
	o.Rate = &v
}

// SetRateExplicitNull (un)sets Rate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Rate value is set to nil even if false is passed
func (o *InlineObject753) SetRateExplicitNull(b bool) {
	o.Rate = nil
	o.isExplicitNullRate = b
}
// GetBasis returns the Basis field if non-nil, zero value otherwise.
func (o *InlineObject753) GetBasis() AnyOfobject {
	if o == nil || o.Basis == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Basis
}

// GetBasisOk returns a tuple with the Basis field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject753) GetBasisOk() (AnyOfobject, bool) {
	if o == nil || o.Basis == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *InlineObject753) HasBasis() bool {
	if o != nil && o.Basis != nil {
		return true
	}

	return false
}

// SetBasis gets a reference to the given AnyOfobject and assigns it to the Basis field.
func (o *InlineObject753) SetBasis(v AnyOfobject) {
	o.Basis = &v
}

// SetBasisExplicitNull (un)sets Basis to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Basis value is set to nil even if false is passed
func (o *InlineObject753) SetBasisExplicitNull(b bool) {
	o.Basis = nil
	o.isExplicitNullBasis = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject753) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost == nil {
		if o.isExplicitNullCost {
			toSerialize["cost"] = o.Cost
		}
	} else {
		toSerialize["cost"] = o.Cost
	}
	if o.DatePurchased == nil {
		if o.isExplicitNullDatePurchased {
			toSerialize["datePurchased"] = o.DatePurchased
		}
	} else {
		toSerialize["datePurchased"] = o.DatePurchased
	}
	if o.FirstPeriod == nil {
		if o.isExplicitNullFirstPeriod {
			toSerialize["firstPeriod"] = o.FirstPeriod
		}
	} else {
		toSerialize["firstPeriod"] = o.FirstPeriod
	}
	if o.Salvage == nil {
		if o.isExplicitNullSalvage {
			toSerialize["salvage"] = o.Salvage
		}
	} else {
		toSerialize["salvage"] = o.Salvage
	}
	if o.Period == nil {
		if o.isExplicitNullPeriod {
			toSerialize["period"] = o.Period
		}
	} else {
		toSerialize["period"] = o.Period
	}
	if o.Rate == nil {
		if o.isExplicitNullRate {
			toSerialize["rate"] = o.Rate
		}
	} else {
		toSerialize["rate"] = o.Rate
	}
	if o.Basis == nil {
		if o.isExplicitNullBasis {
			toSerialize["basis"] = o.Basis
		}
	} else {
		toSerialize["basis"] = o.Basis
	}
	return json.Marshal(toSerialize)
}


