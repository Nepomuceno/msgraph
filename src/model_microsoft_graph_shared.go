/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphShared struct for MicrosoftGraphShared
type MicrosoftGraphShared struct {
	Owner *AnyOfmicrosoftGraphIdentitySet `json:"owner,omitempty"`
	isExplicitNullOwner bool `json:"-"`
	Scope *string `json:"scope,omitempty"`
	isExplicitNullScope bool `json:"-"`
	SharedBy *AnyOfmicrosoftGraphIdentitySet `json:"sharedBy,omitempty"`
	isExplicitNullSharedBy bool `json:"-"`
	SharedDateTime *time.Time `json:"sharedDateTime,omitempty"`
	isExplicitNullSharedDateTime bool `json:"-"`
}

// GetOwner returns the Owner field if non-nil, zero value otherwise.
func (o *MicrosoftGraphShared) GetOwner() AnyOfmicrosoftGraphIdentitySet {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphShared) GetOwnerOk() (AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret, false
	}
	return *o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the Owner field.
func (o *MicrosoftGraphShared) SetOwner(v AnyOfmicrosoftGraphIdentitySet) {
	o.Owner = &v
}

// SetOwnerExplicitNull (un)sets Owner to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Owner value is set to nil even if false is passed
func (o *MicrosoftGraphShared) SetOwnerExplicitNull(b bool) {
	o.Owner = nil
	o.isExplicitNullOwner = b
}
// GetScope returns the Scope field if non-nil, zero value otherwise.
func (o *MicrosoftGraphShared) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphShared) GetScopeOk() (string, bool) {
	if o == nil || o.Scope == nil {
		var ret string
		return ret, false
	}
	return *o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *MicrosoftGraphShared) SetScope(v string) {
	o.Scope = &v
}

// SetScopeExplicitNull (un)sets Scope to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Scope value is set to nil even if false is passed
func (o *MicrosoftGraphShared) SetScopeExplicitNull(b bool) {
	o.Scope = nil
	o.isExplicitNullScope = b
}
// GetSharedBy returns the SharedBy field if non-nil, zero value otherwise.
func (o *MicrosoftGraphShared) GetSharedBy() AnyOfmicrosoftGraphIdentitySet {
	if o == nil || o.SharedBy == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return *o.SharedBy
}

// GetSharedByOk returns a tuple with the SharedBy field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphShared) GetSharedByOk() (AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.SharedBy == nil {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret, false
	}
	return *o.SharedBy, true
}

// HasSharedBy returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasSharedBy() bool {
	if o != nil && o.SharedBy != nil {
		return true
	}

	return false
}

// SetSharedBy gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the SharedBy field.
func (o *MicrosoftGraphShared) SetSharedBy(v AnyOfmicrosoftGraphIdentitySet) {
	o.SharedBy = &v
}

// SetSharedByExplicitNull (un)sets SharedBy to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SharedBy value is set to nil even if false is passed
func (o *MicrosoftGraphShared) SetSharedByExplicitNull(b bool) {
	o.SharedBy = nil
	o.isExplicitNullSharedBy = b
}
// GetSharedDateTime returns the SharedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphShared) GetSharedDateTime() time.Time {
	if o == nil || o.SharedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.SharedDateTime
}

// GetSharedDateTimeOk returns a tuple with the SharedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphShared) GetSharedDateTimeOk() (time.Time, bool) {
	if o == nil || o.SharedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.SharedDateTime, true
}

// HasSharedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasSharedDateTime() bool {
	if o != nil && o.SharedDateTime != nil {
		return true
	}

	return false
}

// SetSharedDateTime gets a reference to the given time.Time and assigns it to the SharedDateTime field.
func (o *MicrosoftGraphShared) SetSharedDateTime(v time.Time) {
	o.SharedDateTime = &v
}

// SetSharedDateTimeExplicitNull (un)sets SharedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SharedDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphShared) SetSharedDateTimeExplicitNull(b bool) {
	o.SharedDateTime = nil
	o.isExplicitNullSharedDateTime = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Owner == nil {
		if o.isExplicitNullOwner {
			toSerialize["owner"] = o.Owner
		}
	} else {
		toSerialize["owner"] = o.Owner
	}
	if o.Scope == nil {
		if o.isExplicitNullScope {
			toSerialize["scope"] = o.Scope
		}
	} else {
		toSerialize["scope"] = o.Scope
	}
	if o.SharedBy == nil {
		if o.isExplicitNullSharedBy {
			toSerialize["sharedBy"] = o.SharedBy
		}
	} else {
		toSerialize["sharedBy"] = o.SharedBy
	}
	if o.SharedDateTime == nil {
		if o.isExplicitNullSharedDateTime {
			toSerialize["sharedDateTime"] = o.SharedDateTime
		}
	} else {
		toSerialize["sharedDateTime"] = o.SharedDateTime
	}
	return json.Marshal(toSerialize)
}


