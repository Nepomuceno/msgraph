/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// Conversation struct for Conversation
type Conversation struct {
	Topic *string `json:"topic,omitempty"`

	HasAttachments *bool `json:"hasAttachments,omitempty"`

	LastDeliveredDateTime *time.Time `json:"lastDeliveredDateTime,omitempty"`

	UniqueSenders *[]string `json:"uniqueSenders,omitempty"`

	Preview *string `json:"preview,omitempty"`

	Threads *[]MicrosoftGraphConversationThread `json:"threads,omitempty"`

}

// GetTopic returns the Topic field if non-nil, zero value otherwise.
func (o *Conversation) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetTopicOk() (string, bool) {
	if o == nil || o.Topic == nil {
		var ret string
		return ret, false
	}
	return *o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *Conversation) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *Conversation) SetTopic(v string) {
	o.Topic = &v
}

// GetHasAttachments returns the HasAttachments field if non-nil, zero value otherwise.
func (o *Conversation) GetHasAttachments() bool {
	if o == nil || o.HasAttachments == nil {
		var ret bool
		return ret
	}
	return *o.HasAttachments
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetHasAttachmentsOk() (bool, bool) {
	if o == nil || o.HasAttachments == nil {
		var ret bool
		return ret, false
	}
	return *o.HasAttachments, true
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *Conversation) HasHasAttachments() bool {
	if o != nil && o.HasAttachments != nil {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given bool and assigns it to the HasAttachments field.
func (o *Conversation) SetHasAttachments(v bool) {
	o.HasAttachments = &v
}

// GetLastDeliveredDateTime returns the LastDeliveredDateTime field if non-nil, zero value otherwise.
func (o *Conversation) GetLastDeliveredDateTime() time.Time {
	if o == nil || o.LastDeliveredDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastDeliveredDateTime
}

// GetLastDeliveredDateTimeOk returns a tuple with the LastDeliveredDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetLastDeliveredDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastDeliveredDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastDeliveredDateTime, true
}

// HasLastDeliveredDateTime returns a boolean if a field has been set.
func (o *Conversation) HasLastDeliveredDateTime() bool {
	if o != nil && o.LastDeliveredDateTime != nil {
		return true
	}

	return false
}

// SetLastDeliveredDateTime gets a reference to the given time.Time and assigns it to the LastDeliveredDateTime field.
func (o *Conversation) SetLastDeliveredDateTime(v time.Time) {
	o.LastDeliveredDateTime = &v
}

// GetUniqueSenders returns the UniqueSenders field if non-nil, zero value otherwise.
func (o *Conversation) GetUniqueSenders() []string {
	if o == nil || o.UniqueSenders == nil {
		var ret []string
		return ret
	}
	return *o.UniqueSenders
}

// GetUniqueSendersOk returns a tuple with the UniqueSenders field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetUniqueSendersOk() ([]string, bool) {
	if o == nil || o.UniqueSenders == nil {
		var ret []string
		return ret, false
	}
	return *o.UniqueSenders, true
}

// HasUniqueSenders returns a boolean if a field has been set.
func (o *Conversation) HasUniqueSenders() bool {
	if o != nil && o.UniqueSenders != nil {
		return true
	}

	return false
}

// SetUniqueSenders gets a reference to the given []string and assigns it to the UniqueSenders field.
func (o *Conversation) SetUniqueSenders(v []string) {
	o.UniqueSenders = &v
}

// GetPreview returns the Preview field if non-nil, zero value otherwise.
func (o *Conversation) GetPreview() string {
	if o == nil || o.Preview == nil {
		var ret string
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetPreviewOk() (string, bool) {
	if o == nil || o.Preview == nil {
		var ret string
		return ret, false
	}
	return *o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *Conversation) HasPreview() bool {
	if o != nil && o.Preview != nil {
		return true
	}

	return false
}

// SetPreview gets a reference to the given string and assigns it to the Preview field.
func (o *Conversation) SetPreview(v string) {
	o.Preview = &v
}

// GetThreads returns the Threads field if non-nil, zero value otherwise.
func (o *Conversation) GetThreads() []MicrosoftGraphConversationThread {
	if o == nil || o.Threads == nil {
		var ret []MicrosoftGraphConversationThread
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetThreadsOk() ([]MicrosoftGraphConversationThread, bool) {
	if o == nil || o.Threads == nil {
		var ret []MicrosoftGraphConversationThread
		return ret, false
	}
	return *o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *Conversation) HasThreads() bool {
	if o != nil && o.Threads != nil {
		return true
	}

	return false
}

// SetThreads gets a reference to the given []MicrosoftGraphConversationThread and assigns it to the Threads field.
func (o *Conversation) SetThreads(v []MicrosoftGraphConversationThread) {
	o.Threads = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o Conversation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.HasAttachments != nil {
		toSerialize["hasAttachments"] = o.HasAttachments
	}
	if o.LastDeliveredDateTime != nil {
		toSerialize["lastDeliveredDateTime"] = o.LastDeliveredDateTime
	}
	if o.UniqueSenders != nil {
		toSerialize["uniqueSenders"] = o.UniqueSenders
	}
	if o.Preview != nil {
		toSerialize["preview"] = o.Preview
	}
	if o.Threads != nil {
		toSerialize["threads"] = o.Threads
	}
	return json.Marshal(toSerialize)
}


