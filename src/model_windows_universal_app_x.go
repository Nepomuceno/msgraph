/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// WindowsUniversalAppX Contains properties and inherited properties for Windows Universal AppX Line Of Business apps.
type WindowsUniversalAppX struct {
	// The Windows architecture(s) for which this app can run on.
	ApplicableArchitectures *AnyOfmicrosoftGraphWindowsArchitecture `json:"applicableArchitectures,omitempty"`

	// The Windows device type(s) for which this app can run on.
	ApplicableDeviceTypes *AnyOfmicrosoftGraphWindowsDeviceType `json:"applicableDeviceTypes,omitempty"`

	// The Identity Name.
	IdentityName *string `json:"identityName,omitempty"`
	isExplicitNullIdentityName bool `json:"-"`
	// The Identity Publisher Hash.
	IdentityPublisherHash *string `json:"identityPublisherHash,omitempty"`

	// The Identity Resource Identifier.
	IdentityResourceIdentifier *string `json:"identityResourceIdentifier,omitempty"`
	isExplicitNullIdentityResourceIdentifier bool `json:"-"`
	// Whether or not the app is a bundle.
	IsBundle *bool `json:"isBundle,omitempty"`

	MinimumSupportedOperatingSystem *MicrosoftGraphWindowsMinimumOperatingSystem `json:"minimumSupportedOperatingSystem,omitempty"`

	// The identity version.
	IdentityVersion *string `json:"identityVersion,omitempty"`
	isExplicitNullIdentityVersion bool `json:"-"`
}

// GetApplicableArchitectures returns the ApplicableArchitectures field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetApplicableArchitectures() AnyOfmicrosoftGraphWindowsArchitecture {
	if o == nil || o.ApplicableArchitectures == nil {
		var ret AnyOfmicrosoftGraphWindowsArchitecture
		return ret
	}
	return *o.ApplicableArchitectures
}

// GetApplicableArchitecturesOk returns a tuple with the ApplicableArchitectures field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetApplicableArchitecturesOk() (AnyOfmicrosoftGraphWindowsArchitecture, bool) {
	if o == nil || o.ApplicableArchitectures == nil {
		var ret AnyOfmicrosoftGraphWindowsArchitecture
		return ret, false
	}
	return *o.ApplicableArchitectures, true
}

// HasApplicableArchitectures returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasApplicableArchitectures() bool {
	if o != nil && o.ApplicableArchitectures != nil {
		return true
	}

	return false
}

// SetApplicableArchitectures gets a reference to the given AnyOfmicrosoftGraphWindowsArchitecture and assigns it to the ApplicableArchitectures field.
func (o *WindowsUniversalAppX) SetApplicableArchitectures(v AnyOfmicrosoftGraphWindowsArchitecture) {
	o.ApplicableArchitectures = &v
}

// GetApplicableDeviceTypes returns the ApplicableDeviceTypes field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetApplicableDeviceTypes() AnyOfmicrosoftGraphWindowsDeviceType {
	if o == nil || o.ApplicableDeviceTypes == nil {
		var ret AnyOfmicrosoftGraphWindowsDeviceType
		return ret
	}
	return *o.ApplicableDeviceTypes
}

// GetApplicableDeviceTypesOk returns a tuple with the ApplicableDeviceTypes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetApplicableDeviceTypesOk() (AnyOfmicrosoftGraphWindowsDeviceType, bool) {
	if o == nil || o.ApplicableDeviceTypes == nil {
		var ret AnyOfmicrosoftGraphWindowsDeviceType
		return ret, false
	}
	return *o.ApplicableDeviceTypes, true
}

// HasApplicableDeviceTypes returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasApplicableDeviceTypes() bool {
	if o != nil && o.ApplicableDeviceTypes != nil {
		return true
	}

	return false
}

// SetApplicableDeviceTypes gets a reference to the given AnyOfmicrosoftGraphWindowsDeviceType and assigns it to the ApplicableDeviceTypes field.
func (o *WindowsUniversalAppX) SetApplicableDeviceTypes(v AnyOfmicrosoftGraphWindowsDeviceType) {
	o.ApplicableDeviceTypes = &v
}

// GetIdentityName returns the IdentityName field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetIdentityName() string {
	if o == nil || o.IdentityName == nil {
		var ret string
		return ret
	}
	return *o.IdentityName
}

// GetIdentityNameOk returns a tuple with the IdentityName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetIdentityNameOk() (string, bool) {
	if o == nil || o.IdentityName == nil {
		var ret string
		return ret, false
	}
	return *o.IdentityName, true
}

// HasIdentityName returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasIdentityName() bool {
	if o != nil && o.IdentityName != nil {
		return true
	}

	return false
}

// SetIdentityName gets a reference to the given string and assigns it to the IdentityName field.
func (o *WindowsUniversalAppX) SetIdentityName(v string) {
	o.IdentityName = &v
}

// SetIdentityNameExplicitNull (un)sets IdentityName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IdentityName value is set to nil even if false is passed
func (o *WindowsUniversalAppX) SetIdentityNameExplicitNull(b bool) {
	o.IdentityName = nil
	o.isExplicitNullIdentityName = b
}
// GetIdentityPublisherHash returns the IdentityPublisherHash field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetIdentityPublisherHash() string {
	if o == nil || o.IdentityPublisherHash == nil {
		var ret string
		return ret
	}
	return *o.IdentityPublisherHash
}

// GetIdentityPublisherHashOk returns a tuple with the IdentityPublisherHash field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetIdentityPublisherHashOk() (string, bool) {
	if o == nil || o.IdentityPublisherHash == nil {
		var ret string
		return ret, false
	}
	return *o.IdentityPublisherHash, true
}

// HasIdentityPublisherHash returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasIdentityPublisherHash() bool {
	if o != nil && o.IdentityPublisherHash != nil {
		return true
	}

	return false
}

// SetIdentityPublisherHash gets a reference to the given string and assigns it to the IdentityPublisherHash field.
func (o *WindowsUniversalAppX) SetIdentityPublisherHash(v string) {
	o.IdentityPublisherHash = &v
}

// GetIdentityResourceIdentifier returns the IdentityResourceIdentifier field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetIdentityResourceIdentifier() string {
	if o == nil || o.IdentityResourceIdentifier == nil {
		var ret string
		return ret
	}
	return *o.IdentityResourceIdentifier
}

// GetIdentityResourceIdentifierOk returns a tuple with the IdentityResourceIdentifier field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetIdentityResourceIdentifierOk() (string, bool) {
	if o == nil || o.IdentityResourceIdentifier == nil {
		var ret string
		return ret, false
	}
	return *o.IdentityResourceIdentifier, true
}

// HasIdentityResourceIdentifier returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasIdentityResourceIdentifier() bool {
	if o != nil && o.IdentityResourceIdentifier != nil {
		return true
	}

	return false
}

// SetIdentityResourceIdentifier gets a reference to the given string and assigns it to the IdentityResourceIdentifier field.
func (o *WindowsUniversalAppX) SetIdentityResourceIdentifier(v string) {
	o.IdentityResourceIdentifier = &v
}

// SetIdentityResourceIdentifierExplicitNull (un)sets IdentityResourceIdentifier to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IdentityResourceIdentifier value is set to nil even if false is passed
func (o *WindowsUniversalAppX) SetIdentityResourceIdentifierExplicitNull(b bool) {
	o.IdentityResourceIdentifier = nil
	o.isExplicitNullIdentityResourceIdentifier = b
}
// GetIsBundle returns the IsBundle field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetIsBundle() bool {
	if o == nil || o.IsBundle == nil {
		var ret bool
		return ret
	}
	return *o.IsBundle
}

// GetIsBundleOk returns a tuple with the IsBundle field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetIsBundleOk() (bool, bool) {
	if o == nil || o.IsBundle == nil {
		var ret bool
		return ret, false
	}
	return *o.IsBundle, true
}

// HasIsBundle returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasIsBundle() bool {
	if o != nil && o.IsBundle != nil {
		return true
	}

	return false
}

// SetIsBundle gets a reference to the given bool and assigns it to the IsBundle field.
func (o *WindowsUniversalAppX) SetIsBundle(v bool) {
	o.IsBundle = &v
}

// GetMinimumSupportedOperatingSystem returns the MinimumSupportedOperatingSystem field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetMinimumSupportedOperatingSystem() MicrosoftGraphWindowsMinimumOperatingSystem {
	if o == nil || o.MinimumSupportedOperatingSystem == nil {
		var ret MicrosoftGraphWindowsMinimumOperatingSystem
		return ret
	}
	return *o.MinimumSupportedOperatingSystem
}

// GetMinimumSupportedOperatingSystemOk returns a tuple with the MinimumSupportedOperatingSystem field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetMinimumSupportedOperatingSystemOk() (MicrosoftGraphWindowsMinimumOperatingSystem, bool) {
	if o == nil || o.MinimumSupportedOperatingSystem == nil {
		var ret MicrosoftGraphWindowsMinimumOperatingSystem
		return ret, false
	}
	return *o.MinimumSupportedOperatingSystem, true
}

// HasMinimumSupportedOperatingSystem returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasMinimumSupportedOperatingSystem() bool {
	if o != nil && o.MinimumSupportedOperatingSystem != nil {
		return true
	}

	return false
}

// SetMinimumSupportedOperatingSystem gets a reference to the given MicrosoftGraphWindowsMinimumOperatingSystem and assigns it to the MinimumSupportedOperatingSystem field.
func (o *WindowsUniversalAppX) SetMinimumSupportedOperatingSystem(v MicrosoftGraphWindowsMinimumOperatingSystem) {
	o.MinimumSupportedOperatingSystem = &v
}

// GetIdentityVersion returns the IdentityVersion field if non-nil, zero value otherwise.
func (o *WindowsUniversalAppX) GetIdentityVersion() string {
	if o == nil || o.IdentityVersion == nil {
		var ret string
		return ret
	}
	return *o.IdentityVersion
}

// GetIdentityVersionOk returns a tuple with the IdentityVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsUniversalAppX) GetIdentityVersionOk() (string, bool) {
	if o == nil || o.IdentityVersion == nil {
		var ret string
		return ret, false
	}
	return *o.IdentityVersion, true
}

// HasIdentityVersion returns a boolean if a field has been set.
func (o *WindowsUniversalAppX) HasIdentityVersion() bool {
	if o != nil && o.IdentityVersion != nil {
		return true
	}

	return false
}

// SetIdentityVersion gets a reference to the given string and assigns it to the IdentityVersion field.
func (o *WindowsUniversalAppX) SetIdentityVersion(v string) {
	o.IdentityVersion = &v
}

// SetIdentityVersionExplicitNull (un)sets IdentityVersion to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IdentityVersion value is set to nil even if false is passed
func (o *WindowsUniversalAppX) SetIdentityVersionExplicitNull(b bool) {
	o.IdentityVersion = nil
	o.isExplicitNullIdentityVersion = b
}

// MarshalJSON returns the JSON representation of the model.
func (o WindowsUniversalAppX) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicableArchitectures != nil {
		toSerialize["applicableArchitectures"] = o.ApplicableArchitectures
	}
	if o.ApplicableDeviceTypes != nil {
		toSerialize["applicableDeviceTypes"] = o.ApplicableDeviceTypes
	}
	if o.IdentityName == nil {
		if o.isExplicitNullIdentityName {
			toSerialize["identityName"] = o.IdentityName
		}
	} else {
		toSerialize["identityName"] = o.IdentityName
	}
	if o.IdentityPublisherHash != nil {
		toSerialize["identityPublisherHash"] = o.IdentityPublisherHash
	}
	if o.IdentityResourceIdentifier == nil {
		if o.isExplicitNullIdentityResourceIdentifier {
			toSerialize["identityResourceIdentifier"] = o.IdentityResourceIdentifier
		}
	} else {
		toSerialize["identityResourceIdentifier"] = o.IdentityResourceIdentifier
	}
	if o.IsBundle != nil {
		toSerialize["isBundle"] = o.IsBundle
	}
	if o.MinimumSupportedOperatingSystem != nil {
		toSerialize["minimumSupportedOperatingSystem"] = o.MinimumSupportedOperatingSystem
	}
	if o.IdentityVersion == nil {
		if o.isExplicitNullIdentityVersion {
			toSerialize["identityVersion"] = o.IdentityVersion
		}
	} else {
		toSerialize["identityVersion"] = o.IdentityVersion
	}
	return json.Marshal(toSerialize)
}


