/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject780 struct for InlineObject780
type InlineObject780 struct {
	Trials *AnyOfobject `json:"trials,omitempty"`
	isExplicitNullTrials bool `json:"-"`
	ProbabilityS *AnyOfobject `json:"probabilityS,omitempty"`
	isExplicitNullProbabilityS bool `json:"-"`
	NumberS *AnyOfobject `json:"numberS,omitempty"`
	isExplicitNullNumberS bool `json:"-"`
	NumberS2 *AnyOfobject `json:"numberS2,omitempty"`
	isExplicitNullNumberS2 bool `json:"-"`
}

// GetTrials returns the Trials field if non-nil, zero value otherwise.
func (o *InlineObject780) GetTrials() AnyOfobject {
	if o == nil || o.Trials == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Trials
}

// GetTrialsOk returns a tuple with the Trials field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject780) GetTrialsOk() (AnyOfobject, bool) {
	if o == nil || o.Trials == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Trials, true
}

// HasTrials returns a boolean if a field has been set.
func (o *InlineObject780) HasTrials() bool {
	if o != nil && o.Trials != nil {
		return true
	}

	return false
}

// SetTrials gets a reference to the given AnyOfobject and assigns it to the Trials field.
func (o *InlineObject780) SetTrials(v AnyOfobject) {
	o.Trials = &v
}

// SetTrialsExplicitNull (un)sets Trials to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Trials value is set to nil even if false is passed
func (o *InlineObject780) SetTrialsExplicitNull(b bool) {
	o.Trials = nil
	o.isExplicitNullTrials = b
}
// GetProbabilityS returns the ProbabilityS field if non-nil, zero value otherwise.
func (o *InlineObject780) GetProbabilityS() AnyOfobject {
	if o == nil || o.ProbabilityS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.ProbabilityS
}

// GetProbabilitySOk returns a tuple with the ProbabilityS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject780) GetProbabilitySOk() (AnyOfobject, bool) {
	if o == nil || o.ProbabilityS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.ProbabilityS, true
}

// HasProbabilityS returns a boolean if a field has been set.
func (o *InlineObject780) HasProbabilityS() bool {
	if o != nil && o.ProbabilityS != nil {
		return true
	}

	return false
}

// SetProbabilityS gets a reference to the given AnyOfobject and assigns it to the ProbabilityS field.
func (o *InlineObject780) SetProbabilityS(v AnyOfobject) {
	o.ProbabilityS = &v
}

// SetProbabilitySExplicitNull (un)sets ProbabilityS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ProbabilityS value is set to nil even if false is passed
func (o *InlineObject780) SetProbabilitySExplicitNull(b bool) {
	o.ProbabilityS = nil
	o.isExplicitNullProbabilityS = b
}
// GetNumberS returns the NumberS field if non-nil, zero value otherwise.
func (o *InlineObject780) GetNumberS() AnyOfobject {
	if o == nil || o.NumberS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberS
}

// GetNumberSOk returns a tuple with the NumberS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject780) GetNumberSOk() (AnyOfobject, bool) {
	if o == nil || o.NumberS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberS, true
}

// HasNumberS returns a boolean if a field has been set.
func (o *InlineObject780) HasNumberS() bool {
	if o != nil && o.NumberS != nil {
		return true
	}

	return false
}

// SetNumberS gets a reference to the given AnyOfobject and assigns it to the NumberS field.
func (o *InlineObject780) SetNumberS(v AnyOfobject) {
	o.NumberS = &v
}

// SetNumberSExplicitNull (un)sets NumberS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberS value is set to nil even if false is passed
func (o *InlineObject780) SetNumberSExplicitNull(b bool) {
	o.NumberS = nil
	o.isExplicitNullNumberS = b
}
// GetNumberS2 returns the NumberS2 field if non-nil, zero value otherwise.
func (o *InlineObject780) GetNumberS2() AnyOfobject {
	if o == nil || o.NumberS2 == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberS2
}

// GetNumberS2Ok returns a tuple with the NumberS2 field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject780) GetNumberS2Ok() (AnyOfobject, bool) {
	if o == nil || o.NumberS2 == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberS2, true
}

// HasNumberS2 returns a boolean if a field has been set.
func (o *InlineObject780) HasNumberS2() bool {
	if o != nil && o.NumberS2 != nil {
		return true
	}

	return false
}

// SetNumberS2 gets a reference to the given AnyOfobject and assigns it to the NumberS2 field.
func (o *InlineObject780) SetNumberS2(v AnyOfobject) {
	o.NumberS2 = &v
}

// SetNumberS2ExplicitNull (un)sets NumberS2 to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberS2 value is set to nil even if false is passed
func (o *InlineObject780) SetNumberS2ExplicitNull(b bool) {
	o.NumberS2 = nil
	o.isExplicitNullNumberS2 = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject780) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Trials == nil {
		if o.isExplicitNullTrials {
			toSerialize["trials"] = o.Trials
		}
	} else {
		toSerialize["trials"] = o.Trials
	}
	if o.ProbabilityS == nil {
		if o.isExplicitNullProbabilityS {
			toSerialize["probabilityS"] = o.ProbabilityS
		}
	} else {
		toSerialize["probabilityS"] = o.ProbabilityS
	}
	if o.NumberS == nil {
		if o.isExplicitNullNumberS {
			toSerialize["numberS"] = o.NumberS
		}
	} else {
		toSerialize["numberS"] = o.NumberS
	}
	if o.NumberS2 == nil {
		if o.isExplicitNullNumberS2 {
			toSerialize["numberS2"] = o.NumberS2
		}
	} else {
		toSerialize["numberS2"] = o.NumberS2
	}
	return json.Marshal(toSerialize)
}


