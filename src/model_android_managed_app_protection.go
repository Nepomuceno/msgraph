/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// AndroidManagedAppProtection Policy used to configure detailed management settings targeted to specific security groups and for a specified set of apps on an Android device
type AndroidManagedAppProtection struct {
	// Indicates whether a managed user can take screen captures of managed apps
	ScreenCaptureBlocked *bool `json:"screenCaptureBlocked,omitempty"`

	// When this setting is enabled, app level encryption is disabled if device level encryption is enabled
	DisableAppEncryptionIfDeviceEncryptionIsEnabled *bool `json:"disableAppEncryptionIfDeviceEncryptionIsEnabled,omitempty"`

	// Indicates whether application data for managed apps should be encrypted
	EncryptAppData *bool `json:"encryptAppData,omitempty"`

	// Count of apps to which the current policy is deployed.
	DeployedAppCount *int32 `json:"deployedAppCount,omitempty"`

	// Define the oldest required Android security patch level a user can have to gain secure access to the app.
	MinimumRequiredPatchVersion *string `json:"minimumRequiredPatchVersion,omitempty"`
	isExplicitNullMinimumRequiredPatchVersion bool `json:"-"`
	// Define the oldest recommended Android security patch level a user can have for secure access to the app.
	MinimumWarningPatchVersion *string `json:"minimumWarningPatchVersion,omitempty"`
	isExplicitNullMinimumWarningPatchVersion bool `json:"-"`
	Apps *[]MicrosoftGraphManagedMobileApp `json:"apps,omitempty"`

	DeploymentSummary *AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary `json:"deploymentSummary,omitempty"`
	isExplicitNullDeploymentSummary bool `json:"-"`
}

// GetScreenCaptureBlocked returns the ScreenCaptureBlocked field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetScreenCaptureBlocked() bool {
	if o == nil || o.ScreenCaptureBlocked == nil {
		var ret bool
		return ret
	}
	return *o.ScreenCaptureBlocked
}

// GetScreenCaptureBlockedOk returns a tuple with the ScreenCaptureBlocked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetScreenCaptureBlockedOk() (bool, bool) {
	if o == nil || o.ScreenCaptureBlocked == nil {
		var ret bool
		return ret, false
	}
	return *o.ScreenCaptureBlocked, true
}

// HasScreenCaptureBlocked returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasScreenCaptureBlocked() bool {
	if o != nil && o.ScreenCaptureBlocked != nil {
		return true
	}

	return false
}

// SetScreenCaptureBlocked gets a reference to the given bool and assigns it to the ScreenCaptureBlocked field.
func (o *AndroidManagedAppProtection) SetScreenCaptureBlocked(v bool) {
	o.ScreenCaptureBlocked = &v
}

// GetDisableAppEncryptionIfDeviceEncryptionIsEnabled returns the DisableAppEncryptionIfDeviceEncryptionIsEnabled field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetDisableAppEncryptionIfDeviceEncryptionIsEnabled() bool {
	if o == nil || o.DisableAppEncryptionIfDeviceEncryptionIsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DisableAppEncryptionIfDeviceEncryptionIsEnabled
}

// GetDisableAppEncryptionIfDeviceEncryptionIsEnabledOk returns a tuple with the DisableAppEncryptionIfDeviceEncryptionIsEnabled field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetDisableAppEncryptionIfDeviceEncryptionIsEnabledOk() (bool, bool) {
	if o == nil || o.DisableAppEncryptionIfDeviceEncryptionIsEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.DisableAppEncryptionIfDeviceEncryptionIsEnabled, true
}

// HasDisableAppEncryptionIfDeviceEncryptionIsEnabled returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasDisableAppEncryptionIfDeviceEncryptionIsEnabled() bool {
	if o != nil && o.DisableAppEncryptionIfDeviceEncryptionIsEnabled != nil {
		return true
	}

	return false
}

// SetDisableAppEncryptionIfDeviceEncryptionIsEnabled gets a reference to the given bool and assigns it to the DisableAppEncryptionIfDeviceEncryptionIsEnabled field.
func (o *AndroidManagedAppProtection) SetDisableAppEncryptionIfDeviceEncryptionIsEnabled(v bool) {
	o.DisableAppEncryptionIfDeviceEncryptionIsEnabled = &v
}

// GetEncryptAppData returns the EncryptAppData field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetEncryptAppData() bool {
	if o == nil || o.EncryptAppData == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAppData
}

// GetEncryptAppDataOk returns a tuple with the EncryptAppData field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetEncryptAppDataOk() (bool, bool) {
	if o == nil || o.EncryptAppData == nil {
		var ret bool
		return ret, false
	}
	return *o.EncryptAppData, true
}

// HasEncryptAppData returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasEncryptAppData() bool {
	if o != nil && o.EncryptAppData != nil {
		return true
	}

	return false
}

// SetEncryptAppData gets a reference to the given bool and assigns it to the EncryptAppData field.
func (o *AndroidManagedAppProtection) SetEncryptAppData(v bool) {
	o.EncryptAppData = &v
}

// GetDeployedAppCount returns the DeployedAppCount field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetDeployedAppCount() int32 {
	if o == nil || o.DeployedAppCount == nil {
		var ret int32
		return ret
	}
	return *o.DeployedAppCount
}

// GetDeployedAppCountOk returns a tuple with the DeployedAppCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetDeployedAppCountOk() (int32, bool) {
	if o == nil || o.DeployedAppCount == nil {
		var ret int32
		return ret, false
	}
	return *o.DeployedAppCount, true
}

// HasDeployedAppCount returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasDeployedAppCount() bool {
	if o != nil && o.DeployedAppCount != nil {
		return true
	}

	return false
}

// SetDeployedAppCount gets a reference to the given int32 and assigns it to the DeployedAppCount field.
func (o *AndroidManagedAppProtection) SetDeployedAppCount(v int32) {
	o.DeployedAppCount = &v
}

// GetMinimumRequiredPatchVersion returns the MinimumRequiredPatchVersion field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetMinimumRequiredPatchVersion() string {
	if o == nil || o.MinimumRequiredPatchVersion == nil {
		var ret string
		return ret
	}
	return *o.MinimumRequiredPatchVersion
}

// GetMinimumRequiredPatchVersionOk returns a tuple with the MinimumRequiredPatchVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetMinimumRequiredPatchVersionOk() (string, bool) {
	if o == nil || o.MinimumRequiredPatchVersion == nil {
		var ret string
		return ret, false
	}
	return *o.MinimumRequiredPatchVersion, true
}

// HasMinimumRequiredPatchVersion returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasMinimumRequiredPatchVersion() bool {
	if o != nil && o.MinimumRequiredPatchVersion != nil {
		return true
	}

	return false
}

// SetMinimumRequiredPatchVersion gets a reference to the given string and assigns it to the MinimumRequiredPatchVersion field.
func (o *AndroidManagedAppProtection) SetMinimumRequiredPatchVersion(v string) {
	o.MinimumRequiredPatchVersion = &v
}

// SetMinimumRequiredPatchVersionExplicitNull (un)sets MinimumRequiredPatchVersion to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MinimumRequiredPatchVersion value is set to nil even if false is passed
func (o *AndroidManagedAppProtection) SetMinimumRequiredPatchVersionExplicitNull(b bool) {
	o.MinimumRequiredPatchVersion = nil
	o.isExplicitNullMinimumRequiredPatchVersion = b
}
// GetMinimumWarningPatchVersion returns the MinimumWarningPatchVersion field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetMinimumWarningPatchVersion() string {
	if o == nil || o.MinimumWarningPatchVersion == nil {
		var ret string
		return ret
	}
	return *o.MinimumWarningPatchVersion
}

// GetMinimumWarningPatchVersionOk returns a tuple with the MinimumWarningPatchVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetMinimumWarningPatchVersionOk() (string, bool) {
	if o == nil || o.MinimumWarningPatchVersion == nil {
		var ret string
		return ret, false
	}
	return *o.MinimumWarningPatchVersion, true
}

// HasMinimumWarningPatchVersion returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasMinimumWarningPatchVersion() bool {
	if o != nil && o.MinimumWarningPatchVersion != nil {
		return true
	}

	return false
}

// SetMinimumWarningPatchVersion gets a reference to the given string and assigns it to the MinimumWarningPatchVersion field.
func (o *AndroidManagedAppProtection) SetMinimumWarningPatchVersion(v string) {
	o.MinimumWarningPatchVersion = &v
}

// SetMinimumWarningPatchVersionExplicitNull (un)sets MinimumWarningPatchVersion to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MinimumWarningPatchVersion value is set to nil even if false is passed
func (o *AndroidManagedAppProtection) SetMinimumWarningPatchVersionExplicitNull(b bool) {
	o.MinimumWarningPatchVersion = nil
	o.isExplicitNullMinimumWarningPatchVersion = b
}
// GetApps returns the Apps field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetApps() []MicrosoftGraphManagedMobileApp {
	if o == nil || o.Apps == nil {
		var ret []MicrosoftGraphManagedMobileApp
		return ret
	}
	return *o.Apps
}

// GetAppsOk returns a tuple with the Apps field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetAppsOk() ([]MicrosoftGraphManagedMobileApp, bool) {
	if o == nil || o.Apps == nil {
		var ret []MicrosoftGraphManagedMobileApp
		return ret, false
	}
	return *o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasApps() bool {
	if o != nil && o.Apps != nil {
		return true
	}

	return false
}

// SetApps gets a reference to the given []MicrosoftGraphManagedMobileApp and assigns it to the Apps field.
func (o *AndroidManagedAppProtection) SetApps(v []MicrosoftGraphManagedMobileApp) {
	o.Apps = &v
}

// GetDeploymentSummary returns the DeploymentSummary field if non-nil, zero value otherwise.
func (o *AndroidManagedAppProtection) GetDeploymentSummary() AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary {
	if o == nil || o.DeploymentSummary == nil {
		var ret AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary
		return ret
	}
	return *o.DeploymentSummary
}

// GetDeploymentSummaryOk returns a tuple with the DeploymentSummary field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AndroidManagedAppProtection) GetDeploymentSummaryOk() (AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary, bool) {
	if o == nil || o.DeploymentSummary == nil {
		var ret AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary
		return ret, false
	}
	return *o.DeploymentSummary, true
}

// HasDeploymentSummary returns a boolean if a field has been set.
func (o *AndroidManagedAppProtection) HasDeploymentSummary() bool {
	if o != nil && o.DeploymentSummary != nil {
		return true
	}

	return false
}

// SetDeploymentSummary gets a reference to the given AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary and assigns it to the DeploymentSummary field.
func (o *AndroidManagedAppProtection) SetDeploymentSummary(v AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary) {
	o.DeploymentSummary = &v
}

// SetDeploymentSummaryExplicitNull (un)sets DeploymentSummary to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeploymentSummary value is set to nil even if false is passed
func (o *AndroidManagedAppProtection) SetDeploymentSummaryExplicitNull(b bool) {
	o.DeploymentSummary = nil
	o.isExplicitNullDeploymentSummary = b
}

// MarshalJSON returns the JSON representation of the model.
func (o AndroidManagedAppProtection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScreenCaptureBlocked != nil {
		toSerialize["screenCaptureBlocked"] = o.ScreenCaptureBlocked
	}
	if o.DisableAppEncryptionIfDeviceEncryptionIsEnabled != nil {
		toSerialize["disableAppEncryptionIfDeviceEncryptionIsEnabled"] = o.DisableAppEncryptionIfDeviceEncryptionIsEnabled
	}
	if o.EncryptAppData != nil {
		toSerialize["encryptAppData"] = o.EncryptAppData
	}
	if o.DeployedAppCount != nil {
		toSerialize["deployedAppCount"] = o.DeployedAppCount
	}
	if o.MinimumRequiredPatchVersion == nil {
		if o.isExplicitNullMinimumRequiredPatchVersion {
			toSerialize["minimumRequiredPatchVersion"] = o.MinimumRequiredPatchVersion
		}
	} else {
		toSerialize["minimumRequiredPatchVersion"] = o.MinimumRequiredPatchVersion
	}
	if o.MinimumWarningPatchVersion == nil {
		if o.isExplicitNullMinimumWarningPatchVersion {
			toSerialize["minimumWarningPatchVersion"] = o.MinimumWarningPatchVersion
		}
	} else {
		toSerialize["minimumWarningPatchVersion"] = o.MinimumWarningPatchVersion
	}
	if o.Apps != nil {
		toSerialize["apps"] = o.Apps
	}
	if o.DeploymentSummary == nil {
		if o.isExplicitNullDeploymentSummary {
			toSerialize["deploymentSummary"] = o.DeploymentSummary
		}
	} else {
		toSerialize["deploymentSummary"] = o.DeploymentSummary
	}
	return json.Marshal(toSerialize)
}


