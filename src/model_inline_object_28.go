/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject28 struct for InlineObject28
type InlineObject28 struct {
	EntityType *string `json:"entityType,omitempty"`
	isExplicitNullEntityType bool `json:"-"`
	DisplayName *string `json:"displayName,omitempty"`
	isExplicitNullDisplayName bool `json:"-"`
	MailNickname *string `json:"mailNickname,omitempty"`
	isExplicitNullMailNickname bool `json:"-"`
	OnBehalfOfUserId *string `json:"onBehalfOfUserId,omitempty"`
	isExplicitNullOnBehalfOfUserId bool `json:"-"`
}

// GetEntityType returns the EntityType field if non-nil, zero value otherwise.
func (o *InlineObject28) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject28) GetEntityTypeOk() (string, bool) {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret, false
	}
	return *o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *InlineObject28) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *InlineObject28) SetEntityType(v string) {
	o.EntityType = &v
}

// SetEntityTypeExplicitNull (un)sets EntityType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The EntityType value is set to nil even if false is passed
func (o *InlineObject28) SetEntityTypeExplicitNull(b bool) {
	o.EntityType = nil
	o.isExplicitNullEntityType = b
}
// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *InlineObject28) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject28) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *InlineObject28) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *InlineObject28) SetDisplayName(v string) {
	o.DisplayName = &v
}

// SetDisplayNameExplicitNull (un)sets DisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DisplayName value is set to nil even if false is passed
func (o *InlineObject28) SetDisplayNameExplicitNull(b bool) {
	o.DisplayName = nil
	o.isExplicitNullDisplayName = b
}
// GetMailNickname returns the MailNickname field if non-nil, zero value otherwise.
func (o *InlineObject28) GetMailNickname() string {
	if o == nil || o.MailNickname == nil {
		var ret string
		return ret
	}
	return *o.MailNickname
}

// GetMailNicknameOk returns a tuple with the MailNickname field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject28) GetMailNicknameOk() (string, bool) {
	if o == nil || o.MailNickname == nil {
		var ret string
		return ret, false
	}
	return *o.MailNickname, true
}

// HasMailNickname returns a boolean if a field has been set.
func (o *InlineObject28) HasMailNickname() bool {
	if o != nil && o.MailNickname != nil {
		return true
	}

	return false
}

// SetMailNickname gets a reference to the given string and assigns it to the MailNickname field.
func (o *InlineObject28) SetMailNickname(v string) {
	o.MailNickname = &v
}

// SetMailNicknameExplicitNull (un)sets MailNickname to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MailNickname value is set to nil even if false is passed
func (o *InlineObject28) SetMailNicknameExplicitNull(b bool) {
	o.MailNickname = nil
	o.isExplicitNullMailNickname = b
}
// GetOnBehalfOfUserId returns the OnBehalfOfUserId field if non-nil, zero value otherwise.
func (o *InlineObject28) GetOnBehalfOfUserId() string {
	if o == nil || o.OnBehalfOfUserId == nil {
		var ret string
		return ret
	}
	return *o.OnBehalfOfUserId
}

// GetOnBehalfOfUserIdOk returns a tuple with the OnBehalfOfUserId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject28) GetOnBehalfOfUserIdOk() (string, bool) {
	if o == nil || o.OnBehalfOfUserId == nil {
		var ret string
		return ret, false
	}
	return *o.OnBehalfOfUserId, true
}

// HasOnBehalfOfUserId returns a boolean if a field has been set.
func (o *InlineObject28) HasOnBehalfOfUserId() bool {
	if o != nil && o.OnBehalfOfUserId != nil {
		return true
	}

	return false
}

// SetOnBehalfOfUserId gets a reference to the given string and assigns it to the OnBehalfOfUserId field.
func (o *InlineObject28) SetOnBehalfOfUserId(v string) {
	o.OnBehalfOfUserId = &v
}

// SetOnBehalfOfUserIdExplicitNull (un)sets OnBehalfOfUserId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OnBehalfOfUserId value is set to nil even if false is passed
func (o *InlineObject28) SetOnBehalfOfUserIdExplicitNull(b bool) {
	o.OnBehalfOfUserId = nil
	o.isExplicitNullOnBehalfOfUserId = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject28) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityType == nil {
		if o.isExplicitNullEntityType {
			toSerialize["entityType"] = o.EntityType
		}
	} else {
		toSerialize["entityType"] = o.EntityType
	}
	if o.DisplayName == nil {
		if o.isExplicitNullDisplayName {
			toSerialize["displayName"] = o.DisplayName
		}
	} else {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.MailNickname == nil {
		if o.isExplicitNullMailNickname {
			toSerialize["mailNickname"] = o.MailNickname
		}
	} else {
		toSerialize["mailNickname"] = o.MailNickname
	}
	if o.OnBehalfOfUserId == nil {
		if o.isExplicitNullOnBehalfOfUserId {
			toSerialize["onBehalfOfUserId"] = o.OnBehalfOfUserId
		}
	} else {
		toSerialize["onBehalfOfUserId"] = o.OnBehalfOfUserId
	}
	return json.Marshal(toSerialize)
}


