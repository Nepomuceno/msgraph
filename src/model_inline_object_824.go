/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject824 struct for InlineObject824
type InlineObject824 struct {
	Year *AnyOfobject `json:"year,omitempty"`
	isExplicitNullYear bool `json:"-"`
	Month *AnyOfobject `json:"month,omitempty"`
	isExplicitNullMonth bool `json:"-"`
	Day *AnyOfobject `json:"day,omitempty"`
	isExplicitNullDay bool `json:"-"`
}

// GetYear returns the Year field if non-nil, zero value otherwise.
func (o *InlineObject824) GetYear() AnyOfobject {
	if o == nil || o.Year == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject824) GetYearOk() (AnyOfobject, bool) {
	if o == nil || o.Year == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *InlineObject824) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given AnyOfobject and assigns it to the Year field.
func (o *InlineObject824) SetYear(v AnyOfobject) {
	o.Year = &v
}

// SetYearExplicitNull (un)sets Year to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Year value is set to nil even if false is passed
func (o *InlineObject824) SetYearExplicitNull(b bool) {
	o.Year = nil
	o.isExplicitNullYear = b
}
// GetMonth returns the Month field if non-nil, zero value otherwise.
func (o *InlineObject824) GetMonth() AnyOfobject {
	if o == nil || o.Month == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject824) GetMonthOk() (AnyOfobject, bool) {
	if o == nil || o.Month == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *InlineObject824) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given AnyOfobject and assigns it to the Month field.
func (o *InlineObject824) SetMonth(v AnyOfobject) {
	o.Month = &v
}

// SetMonthExplicitNull (un)sets Month to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Month value is set to nil even if false is passed
func (o *InlineObject824) SetMonthExplicitNull(b bool) {
	o.Month = nil
	o.isExplicitNullMonth = b
}
// GetDay returns the Day field if non-nil, zero value otherwise.
func (o *InlineObject824) GetDay() AnyOfobject {
	if o == nil || o.Day == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject824) GetDayOk() (AnyOfobject, bool) {
	if o == nil || o.Day == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *InlineObject824) HasDay() bool {
	if o != nil && o.Day != nil {
		return true
	}

	return false
}

// SetDay gets a reference to the given AnyOfobject and assigns it to the Day field.
func (o *InlineObject824) SetDay(v AnyOfobject) {
	o.Day = &v
}

// SetDayExplicitNull (un)sets Day to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Day value is set to nil even if false is passed
func (o *InlineObject824) SetDayExplicitNull(b bool) {
	o.Day = nil
	o.isExplicitNullDay = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject824) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Year == nil {
		if o.isExplicitNullYear {
			toSerialize["year"] = o.Year
		}
	} else {
		toSerialize["year"] = o.Year
	}
	if o.Month == nil {
		if o.isExplicitNullMonth {
			toSerialize["month"] = o.Month
		}
	} else {
		toSerialize["month"] = o.Month
	}
	if o.Day == nil {
		if o.isExplicitNullDay {
			toSerialize["day"] = o.Day
		}
	} else {
		toSerialize["day"] = o.Day
	}
	return json.Marshal(toSerialize)
}


