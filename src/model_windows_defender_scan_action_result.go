/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// WindowsDefenderScanActionResult struct for WindowsDefenderScanActionResult
type WindowsDefenderScanActionResult struct {
	// Scan type either full scan or quick scan
	ScanType *string `json:"scanType,omitempty"`
	isExplicitNullScanType bool `json:"-"`
}

// GetScanType returns the ScanType field if non-nil, zero value otherwise.
func (o *WindowsDefenderScanActionResult) GetScanType() string {
	if o == nil || o.ScanType == nil {
		var ret string
		return ret
	}
	return *o.ScanType
}

// GetScanTypeOk returns a tuple with the ScanType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WindowsDefenderScanActionResult) GetScanTypeOk() (string, bool) {
	if o == nil || o.ScanType == nil {
		var ret string
		return ret, false
	}
	return *o.ScanType, true
}

// HasScanType returns a boolean if a field has been set.
func (o *WindowsDefenderScanActionResult) HasScanType() bool {
	if o != nil && o.ScanType != nil {
		return true
	}

	return false
}

// SetScanType gets a reference to the given string and assigns it to the ScanType field.
func (o *WindowsDefenderScanActionResult) SetScanType(v string) {
	o.ScanType = &v
}

// SetScanTypeExplicitNull (un)sets ScanType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ScanType value is set to nil even if false is passed
func (o *WindowsDefenderScanActionResult) SetScanTypeExplicitNull(b bool) {
	o.ScanType = nil
	o.isExplicitNullScanType = b
}

// MarshalJSON returns the JSON representation of the model.
func (o WindowsDefenderScanActionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScanType == nil {
		if o.isExplicitNullScanType {
			toSerialize["scanType"] = o.ScanType
		}
	} else {
		toSerialize["scanType"] = o.ScanType
	}
	return json.Marshal(toSerialize)
}


