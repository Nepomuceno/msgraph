/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject977 struct for InlineObject977
type InlineObject977 struct {
	StartDate *AnyOfobject `json:"startDate,omitempty"`
	isExplicitNullStartDate bool `json:"-"`
	EndDate *AnyOfobject `json:"endDate,omitempty"`
	isExplicitNullEndDate bool `json:"-"`
	Weekend *AnyOfobject `json:"weekend,omitempty"`
	isExplicitNullWeekend bool `json:"-"`
	Holidays *AnyOfobject `json:"holidays,omitempty"`
	isExplicitNullHolidays bool `json:"-"`
}

// GetStartDate returns the StartDate field if non-nil, zero value otherwise.
func (o *InlineObject977) GetStartDate() AnyOfobject {
	if o == nil || o.StartDate == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject977) GetStartDateOk() (AnyOfobject, bool) {
	if o == nil || o.StartDate == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InlineObject977) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given AnyOfobject and assigns it to the StartDate field.
func (o *InlineObject977) SetStartDate(v AnyOfobject) {
	o.StartDate = &v
}

// SetStartDateExplicitNull (un)sets StartDate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The StartDate value is set to nil even if false is passed
func (o *InlineObject977) SetStartDateExplicitNull(b bool) {
	o.StartDate = nil
	o.isExplicitNullStartDate = b
}
// GetEndDate returns the EndDate field if non-nil, zero value otherwise.
func (o *InlineObject977) GetEndDate() AnyOfobject {
	if o == nil || o.EndDate == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject977) GetEndDateOk() (AnyOfobject, bool) {
	if o == nil || o.EndDate == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *InlineObject977) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given AnyOfobject and assigns it to the EndDate field.
func (o *InlineObject977) SetEndDate(v AnyOfobject) {
	o.EndDate = &v
}

// SetEndDateExplicitNull (un)sets EndDate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The EndDate value is set to nil even if false is passed
func (o *InlineObject977) SetEndDateExplicitNull(b bool) {
	o.EndDate = nil
	o.isExplicitNullEndDate = b
}
// GetWeekend returns the Weekend field if non-nil, zero value otherwise.
func (o *InlineObject977) GetWeekend() AnyOfobject {
	if o == nil || o.Weekend == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Weekend
}

// GetWeekendOk returns a tuple with the Weekend field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject977) GetWeekendOk() (AnyOfobject, bool) {
	if o == nil || o.Weekend == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Weekend, true
}

// HasWeekend returns a boolean if a field has been set.
func (o *InlineObject977) HasWeekend() bool {
	if o != nil && o.Weekend != nil {
		return true
	}

	return false
}

// SetWeekend gets a reference to the given AnyOfobject and assigns it to the Weekend field.
func (o *InlineObject977) SetWeekend(v AnyOfobject) {
	o.Weekend = &v
}

// SetWeekendExplicitNull (un)sets Weekend to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Weekend value is set to nil even if false is passed
func (o *InlineObject977) SetWeekendExplicitNull(b bool) {
	o.Weekend = nil
	o.isExplicitNullWeekend = b
}
// GetHolidays returns the Holidays field if non-nil, zero value otherwise.
func (o *InlineObject977) GetHolidays() AnyOfobject {
	if o == nil || o.Holidays == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Holidays
}

// GetHolidaysOk returns a tuple with the Holidays field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject977) GetHolidaysOk() (AnyOfobject, bool) {
	if o == nil || o.Holidays == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Holidays, true
}

// HasHolidays returns a boolean if a field has been set.
func (o *InlineObject977) HasHolidays() bool {
	if o != nil && o.Holidays != nil {
		return true
	}

	return false
}

// SetHolidays gets a reference to the given AnyOfobject and assigns it to the Holidays field.
func (o *InlineObject977) SetHolidays(v AnyOfobject) {
	o.Holidays = &v
}

// SetHolidaysExplicitNull (un)sets Holidays to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Holidays value is set to nil even if false is passed
func (o *InlineObject977) SetHolidaysExplicitNull(b bool) {
	o.Holidays = nil
	o.isExplicitNullHolidays = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject977) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartDate == nil {
		if o.isExplicitNullStartDate {
			toSerialize["startDate"] = o.StartDate
		}
	} else {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate == nil {
		if o.isExplicitNullEndDate {
			toSerialize["endDate"] = o.EndDate
		}
	} else {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Weekend == nil {
		if o.isExplicitNullWeekend {
			toSerialize["weekend"] = o.Weekend
		}
	} else {
		toSerialize["weekend"] = o.Weekend
	}
	if o.Holidays == nil {
		if o.isExplicitNullHolidays {
			toSerialize["holidays"] = o.Holidays
		}
	} else {
		toSerialize["holidays"] = o.Holidays
	}
	return json.Marshal(toSerialize)
}


