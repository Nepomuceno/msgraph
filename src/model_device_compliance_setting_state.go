/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// DeviceComplianceSettingState Device compliance setting State for a given device.
type DeviceComplianceSettingState struct {
	// The setting class name and property name.
	Setting *string `json:"setting,omitempty"`
	isExplicitNullSetting bool `json:"-"`
	// The Setting Name that is being reported
	SettingName *string `json:"settingName,omitempty"`
	isExplicitNullSettingName bool `json:"-"`
	// The Device Id that is being reported
	DeviceId *string `json:"deviceId,omitempty"`
	isExplicitNullDeviceId bool `json:"-"`
	// The Device Name that is being reported
	DeviceName *string `json:"deviceName,omitempty"`
	isExplicitNullDeviceName bool `json:"-"`
	// The user Id that is being reported
	UserId *string `json:"userId,omitempty"`
	isExplicitNullUserId bool `json:"-"`
	// The User email address that is being reported
	UserEmail *string `json:"userEmail,omitempty"`
	isExplicitNullUserEmail bool `json:"-"`
	// The User Name that is being reported
	UserName *string `json:"userName,omitempty"`
	isExplicitNullUserName bool `json:"-"`
	// The User PrincipalName that is being reported
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	isExplicitNullUserPrincipalName bool `json:"-"`
	// The device model that is being reported
	DeviceModel *string `json:"deviceModel,omitempty"`
	isExplicitNullDeviceModel bool `json:"-"`
	// The compliance state of the setting
	State *AnyOfmicrosoftGraphComplianceStatus `json:"state,omitempty"`

	// The DateTime when device compliance grace period expires
	ComplianceGracePeriodExpirationDateTime *time.Time `json:"complianceGracePeriodExpirationDateTime,omitempty"`

}

// GetSetting returns the Setting field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetSetting() string {
	if o == nil || o.Setting == nil {
		var ret string
		return ret
	}
	return *o.Setting
}

// GetSettingOk returns a tuple with the Setting field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetSettingOk() (string, bool) {
	if o == nil || o.Setting == nil {
		var ret string
		return ret, false
	}
	return *o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasSetting() bool {
	if o != nil && o.Setting != nil {
		return true
	}

	return false
}

// SetSetting gets a reference to the given string and assigns it to the Setting field.
func (o *DeviceComplianceSettingState) SetSetting(v string) {
	o.Setting = &v
}

// SetSettingExplicitNull (un)sets Setting to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Setting value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetSettingExplicitNull(b bool) {
	o.Setting = nil
	o.isExplicitNullSetting = b
}
// GetSettingName returns the SettingName field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetSettingName() string {
	if o == nil || o.SettingName == nil {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetSettingNameOk() (string, bool) {
	if o == nil || o.SettingName == nil {
		var ret string
		return ret, false
	}
	return *o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasSettingName() bool {
	if o != nil && o.SettingName != nil {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *DeviceComplianceSettingState) SetSettingName(v string) {
	o.SettingName = &v
}

// SetSettingNameExplicitNull (un)sets SettingName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SettingName value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetSettingNameExplicitNull(b bool) {
	o.SettingName = nil
	o.isExplicitNullSettingName = b
}
// GetDeviceId returns the DeviceId field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetDeviceIdOk() (string, bool) {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret, false
	}
	return *o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceComplianceSettingState) SetDeviceId(v string) {
	o.DeviceId = &v
}

// SetDeviceIdExplicitNull (un)sets DeviceId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeviceId value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetDeviceIdExplicitNull(b bool) {
	o.DeviceId = nil
	o.isExplicitNullDeviceId = b
}
// GetDeviceName returns the DeviceName field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetDeviceNameOk() (string, bool) {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret, false
	}
	return *o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DeviceComplianceSettingState) SetDeviceName(v string) {
	o.DeviceName = &v
}

// SetDeviceNameExplicitNull (un)sets DeviceName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeviceName value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetDeviceNameExplicitNull(b bool) {
	o.DeviceName = nil
	o.isExplicitNullDeviceName = b
}
// GetUserId returns the UserId field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetUserIdOk() (string, bool) {
	if o == nil || o.UserId == nil {
		var ret string
		return ret, false
	}
	return *o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DeviceComplianceSettingState) SetUserId(v string) {
	o.UserId = &v
}

// SetUserIdExplicitNull (un)sets UserId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserId value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetUserIdExplicitNull(b bool) {
	o.UserId = nil
	o.isExplicitNullUserId = b
}
// GetUserEmail returns the UserEmail field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetUserEmail() string {
	if o == nil || o.UserEmail == nil {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetUserEmailOk() (string, bool) {
	if o == nil || o.UserEmail == nil {
		var ret string
		return ret, false
	}
	return *o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasUserEmail() bool {
	if o != nil && o.UserEmail != nil {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *DeviceComplianceSettingState) SetUserEmail(v string) {
	o.UserEmail = &v
}

// SetUserEmailExplicitNull (un)sets UserEmail to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserEmail value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetUserEmailExplicitNull(b bool) {
	o.UserEmail = nil
	o.isExplicitNullUserEmail = b
}
// GetUserName returns the UserName field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetUserNameOk() (string, bool) {
	if o == nil || o.UserName == nil {
		var ret string
		return ret, false
	}
	return *o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *DeviceComplianceSettingState) SetUserName(v string) {
	o.UserName = &v
}

// SetUserNameExplicitNull (un)sets UserName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserName value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetUserNameExplicitNull(b bool) {
	o.UserName = nil
	o.isExplicitNullUserName = b
}
// GetUserPrincipalName returns the UserPrincipalName field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetUserPrincipalNameOk() (string, bool) {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret, false
	}
	return *o.UserPrincipalName, true
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName != nil {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given string and assigns it to the UserPrincipalName field.
func (o *DeviceComplianceSettingState) SetUserPrincipalName(v string) {
	o.UserPrincipalName = &v
}

// SetUserPrincipalNameExplicitNull (un)sets UserPrincipalName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserPrincipalName value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetUserPrincipalNameExplicitNull(b bool) {
	o.UserPrincipalName = nil
	o.isExplicitNullUserPrincipalName = b
}
// GetDeviceModel returns the DeviceModel field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetDeviceModel() string {
	if o == nil || o.DeviceModel == nil {
		var ret string
		return ret
	}
	return *o.DeviceModel
}

// GetDeviceModelOk returns a tuple with the DeviceModel field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetDeviceModelOk() (string, bool) {
	if o == nil || o.DeviceModel == nil {
		var ret string
		return ret, false
	}
	return *o.DeviceModel, true
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasDeviceModel() bool {
	if o != nil && o.DeviceModel != nil {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given string and assigns it to the DeviceModel field.
func (o *DeviceComplianceSettingState) SetDeviceModel(v string) {
	o.DeviceModel = &v
}

// SetDeviceModelExplicitNull (un)sets DeviceModel to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeviceModel value is set to nil even if false is passed
func (o *DeviceComplianceSettingState) SetDeviceModelExplicitNull(b bool) {
	o.DeviceModel = nil
	o.isExplicitNullDeviceModel = b
}
// GetState returns the State field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetState() AnyOfmicrosoftGraphComplianceStatus {
	if o == nil || o.State == nil {
		var ret AnyOfmicrosoftGraphComplianceStatus
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetStateOk() (AnyOfmicrosoftGraphComplianceStatus, bool) {
	if o == nil || o.State == nil {
		var ret AnyOfmicrosoftGraphComplianceStatus
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given AnyOfmicrosoftGraphComplianceStatus and assigns it to the State field.
func (o *DeviceComplianceSettingState) SetState(v AnyOfmicrosoftGraphComplianceStatus) {
	o.State = &v
}

// GetComplianceGracePeriodExpirationDateTime returns the ComplianceGracePeriodExpirationDateTime field if non-nil, zero value otherwise.
func (o *DeviceComplianceSettingState) GetComplianceGracePeriodExpirationDateTime() time.Time {
	if o == nil || o.ComplianceGracePeriodExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ComplianceGracePeriodExpirationDateTime
}

// GetComplianceGracePeriodExpirationDateTimeOk returns a tuple with the ComplianceGracePeriodExpirationDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceSettingState) GetComplianceGracePeriodExpirationDateTimeOk() (time.Time, bool) {
	if o == nil || o.ComplianceGracePeriodExpirationDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ComplianceGracePeriodExpirationDateTime, true
}

// HasComplianceGracePeriodExpirationDateTime returns a boolean if a field has been set.
func (o *DeviceComplianceSettingState) HasComplianceGracePeriodExpirationDateTime() bool {
	if o != nil && o.ComplianceGracePeriodExpirationDateTime != nil {
		return true
	}

	return false
}

// SetComplianceGracePeriodExpirationDateTime gets a reference to the given time.Time and assigns it to the ComplianceGracePeriodExpirationDateTime field.
func (o *DeviceComplianceSettingState) SetComplianceGracePeriodExpirationDateTime(v time.Time) {
	o.ComplianceGracePeriodExpirationDateTime = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o DeviceComplianceSettingState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Setting == nil {
		if o.isExplicitNullSetting {
			toSerialize["setting"] = o.Setting
		}
	} else {
		toSerialize["setting"] = o.Setting
	}
	if o.SettingName == nil {
		if o.isExplicitNullSettingName {
			toSerialize["settingName"] = o.SettingName
		}
	} else {
		toSerialize["settingName"] = o.SettingName
	}
	if o.DeviceId == nil {
		if o.isExplicitNullDeviceId {
			toSerialize["deviceId"] = o.DeviceId
		}
	} else {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.DeviceName == nil {
		if o.isExplicitNullDeviceName {
			toSerialize["deviceName"] = o.DeviceName
		}
	} else {
		toSerialize["deviceName"] = o.DeviceName
	}
	if o.UserId == nil {
		if o.isExplicitNullUserId {
			toSerialize["userId"] = o.UserId
		}
	} else {
		toSerialize["userId"] = o.UserId
	}
	if o.UserEmail == nil {
		if o.isExplicitNullUserEmail {
			toSerialize["userEmail"] = o.UserEmail
		}
	} else {
		toSerialize["userEmail"] = o.UserEmail
	}
	if o.UserName == nil {
		if o.isExplicitNullUserName {
			toSerialize["userName"] = o.UserName
		}
	} else {
		toSerialize["userName"] = o.UserName
	}
	if o.UserPrincipalName == nil {
		if o.isExplicitNullUserPrincipalName {
			toSerialize["userPrincipalName"] = o.UserPrincipalName
		}
	} else {
		toSerialize["userPrincipalName"] = o.UserPrincipalName
	}
	if o.DeviceModel == nil {
		if o.isExplicitNullDeviceModel {
			toSerialize["deviceModel"] = o.DeviceModel
		}
	} else {
		toSerialize["deviceModel"] = o.DeviceModel
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.ComplianceGracePeriodExpirationDateTime != nil {
		toSerialize["complianceGracePeriodExpirationDateTime"] = o.ComplianceGracePeriodExpirationDateTime
	}
	return json.Marshal(toSerialize)
}


