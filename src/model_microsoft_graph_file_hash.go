/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphFileHash struct for MicrosoftGraphFileHash
type MicrosoftGraphFileHash struct {
	HashType *AnyOfmicrosoftGraphFileHashType `json:"hashType,omitempty"`
	isExplicitNullHashType bool `json:"-"`
	HashValue *string `json:"hashValue,omitempty"`
	isExplicitNullHashValue bool `json:"-"`
}

// GetHashType returns the HashType field if non-nil, zero value otherwise.
func (o *MicrosoftGraphFileHash) GetHashType() AnyOfmicrosoftGraphFileHashType {
	if o == nil || o.HashType == nil {
		var ret AnyOfmicrosoftGraphFileHashType
		return ret
	}
	return *o.HashType
}

// GetHashTypeOk returns a tuple with the HashType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphFileHash) GetHashTypeOk() (AnyOfmicrosoftGraphFileHashType, bool) {
	if o == nil || o.HashType == nil {
		var ret AnyOfmicrosoftGraphFileHashType
		return ret, false
	}
	return *o.HashType, true
}

// HasHashType returns a boolean if a field has been set.
func (o *MicrosoftGraphFileHash) HasHashType() bool {
	if o != nil && o.HashType != nil {
		return true
	}

	return false
}

// SetHashType gets a reference to the given AnyOfmicrosoftGraphFileHashType and assigns it to the HashType field.
func (o *MicrosoftGraphFileHash) SetHashType(v AnyOfmicrosoftGraphFileHashType) {
	o.HashType = &v
}

// SetHashTypeExplicitNull (un)sets HashType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The HashType value is set to nil even if false is passed
func (o *MicrosoftGraphFileHash) SetHashTypeExplicitNull(b bool) {
	o.HashType = nil
	o.isExplicitNullHashType = b
}
// GetHashValue returns the HashValue field if non-nil, zero value otherwise.
func (o *MicrosoftGraphFileHash) GetHashValue() string {
	if o == nil || o.HashValue == nil {
		var ret string
		return ret
	}
	return *o.HashValue
}

// GetHashValueOk returns a tuple with the HashValue field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphFileHash) GetHashValueOk() (string, bool) {
	if o == nil || o.HashValue == nil {
		var ret string
		return ret, false
	}
	return *o.HashValue, true
}

// HasHashValue returns a boolean if a field has been set.
func (o *MicrosoftGraphFileHash) HasHashValue() bool {
	if o != nil && o.HashValue != nil {
		return true
	}

	return false
}

// SetHashValue gets a reference to the given string and assigns it to the HashValue field.
func (o *MicrosoftGraphFileHash) SetHashValue(v string) {
	o.HashValue = &v
}

// SetHashValueExplicitNull (un)sets HashValue to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The HashValue value is set to nil even if false is passed
func (o *MicrosoftGraphFileHash) SetHashValueExplicitNull(b bool) {
	o.HashValue = nil
	o.isExplicitNullHashValue = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphFileHash) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HashType == nil {
		if o.isExplicitNullHashType {
			toSerialize["hashType"] = o.HashType
		}
	} else {
		toSerialize["hashType"] = o.HashType
	}
	if o.HashValue == nil {
		if o.isExplicitNullHashValue {
			toSerialize["hashValue"] = o.HashValue
		}
	} else {
		toSerialize["hashValue"] = o.HashValue
	}
	return json.Marshal(toSerialize)
}


