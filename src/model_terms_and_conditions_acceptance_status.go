/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// TermsAndConditionsAcceptanceStatus A termsAndConditionsAcceptanceStatus entity represents the acceptance status of a given Terms and Conditions (T&C) policy by a given user. Users must accept the most up-to-date version of the terms in order to retain access to the Company Portal.
type TermsAndConditionsAcceptanceStatus struct {
	// Display name of the user whose acceptance the entity represents.
	UserDisplayName *string `json:"userDisplayName,omitempty"`
	isExplicitNullUserDisplayName bool `json:"-"`
	// Most recent version number of the T&C accepted by the user.
	AcceptedVersion *int32 `json:"acceptedVersion,omitempty"`

	// DateTime when the terms were last accepted by the user.
	AcceptedDateTime *time.Time `json:"acceptedDateTime,omitempty"`

	TermsAndConditions *AnyOfmicrosoftGraphTermsAndConditions `json:"termsAndConditions,omitempty"`
	isExplicitNullTermsAndConditions bool `json:"-"`
}

// GetUserDisplayName returns the UserDisplayName field if non-nil, zero value otherwise.
func (o *TermsAndConditionsAcceptanceStatus) GetUserDisplayName() string {
	if o == nil || o.UserDisplayName == nil {
		var ret string
		return ret
	}
	return *o.UserDisplayName
}

// GetUserDisplayNameOk returns a tuple with the UserDisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TermsAndConditionsAcceptanceStatus) GetUserDisplayNameOk() (string, bool) {
	if o == nil || o.UserDisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.UserDisplayName, true
}

// HasUserDisplayName returns a boolean if a field has been set.
func (o *TermsAndConditionsAcceptanceStatus) HasUserDisplayName() bool {
	if o != nil && o.UserDisplayName != nil {
		return true
	}

	return false
}

// SetUserDisplayName gets a reference to the given string and assigns it to the UserDisplayName field.
func (o *TermsAndConditionsAcceptanceStatus) SetUserDisplayName(v string) {
	o.UserDisplayName = &v
}

// SetUserDisplayNameExplicitNull (un)sets UserDisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserDisplayName value is set to nil even if false is passed
func (o *TermsAndConditionsAcceptanceStatus) SetUserDisplayNameExplicitNull(b bool) {
	o.UserDisplayName = nil
	o.isExplicitNullUserDisplayName = b
}
// GetAcceptedVersion returns the AcceptedVersion field if non-nil, zero value otherwise.
func (o *TermsAndConditionsAcceptanceStatus) GetAcceptedVersion() int32 {
	if o == nil || o.AcceptedVersion == nil {
		var ret int32
		return ret
	}
	return *o.AcceptedVersion
}

// GetAcceptedVersionOk returns a tuple with the AcceptedVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TermsAndConditionsAcceptanceStatus) GetAcceptedVersionOk() (int32, bool) {
	if o == nil || o.AcceptedVersion == nil {
		var ret int32
		return ret, false
	}
	return *o.AcceptedVersion, true
}

// HasAcceptedVersion returns a boolean if a field has been set.
func (o *TermsAndConditionsAcceptanceStatus) HasAcceptedVersion() bool {
	if o != nil && o.AcceptedVersion != nil {
		return true
	}

	return false
}

// SetAcceptedVersion gets a reference to the given int32 and assigns it to the AcceptedVersion field.
func (o *TermsAndConditionsAcceptanceStatus) SetAcceptedVersion(v int32) {
	o.AcceptedVersion = &v
}

// GetAcceptedDateTime returns the AcceptedDateTime field if non-nil, zero value otherwise.
func (o *TermsAndConditionsAcceptanceStatus) GetAcceptedDateTime() time.Time {
	if o == nil || o.AcceptedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.AcceptedDateTime
}

// GetAcceptedDateTimeOk returns a tuple with the AcceptedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TermsAndConditionsAcceptanceStatus) GetAcceptedDateTimeOk() (time.Time, bool) {
	if o == nil || o.AcceptedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AcceptedDateTime, true
}

// HasAcceptedDateTime returns a boolean if a field has been set.
func (o *TermsAndConditionsAcceptanceStatus) HasAcceptedDateTime() bool {
	if o != nil && o.AcceptedDateTime != nil {
		return true
	}

	return false
}

// SetAcceptedDateTime gets a reference to the given time.Time and assigns it to the AcceptedDateTime field.
func (o *TermsAndConditionsAcceptanceStatus) SetAcceptedDateTime(v time.Time) {
	o.AcceptedDateTime = &v
}

// GetTermsAndConditions returns the TermsAndConditions field if non-nil, zero value otherwise.
func (o *TermsAndConditionsAcceptanceStatus) GetTermsAndConditions() AnyOfmicrosoftGraphTermsAndConditions {
	if o == nil || o.TermsAndConditions == nil {
		var ret AnyOfmicrosoftGraphTermsAndConditions
		return ret
	}
	return *o.TermsAndConditions
}

// GetTermsAndConditionsOk returns a tuple with the TermsAndConditions field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TermsAndConditionsAcceptanceStatus) GetTermsAndConditionsOk() (AnyOfmicrosoftGraphTermsAndConditions, bool) {
	if o == nil || o.TermsAndConditions == nil {
		var ret AnyOfmicrosoftGraphTermsAndConditions
		return ret, false
	}
	return *o.TermsAndConditions, true
}

// HasTermsAndConditions returns a boolean if a field has been set.
func (o *TermsAndConditionsAcceptanceStatus) HasTermsAndConditions() bool {
	if o != nil && o.TermsAndConditions != nil {
		return true
	}

	return false
}

// SetTermsAndConditions gets a reference to the given AnyOfmicrosoftGraphTermsAndConditions and assigns it to the TermsAndConditions field.
func (o *TermsAndConditionsAcceptanceStatus) SetTermsAndConditions(v AnyOfmicrosoftGraphTermsAndConditions) {
	o.TermsAndConditions = &v
}

// SetTermsAndConditionsExplicitNull (un)sets TermsAndConditions to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The TermsAndConditions value is set to nil even if false is passed
func (o *TermsAndConditionsAcceptanceStatus) SetTermsAndConditionsExplicitNull(b bool) {
	o.TermsAndConditions = nil
	o.isExplicitNullTermsAndConditions = b
}

// MarshalJSON returns the JSON representation of the model.
func (o TermsAndConditionsAcceptanceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserDisplayName == nil {
		if o.isExplicitNullUserDisplayName {
			toSerialize["userDisplayName"] = o.UserDisplayName
		}
	} else {
		toSerialize["userDisplayName"] = o.UserDisplayName
	}
	if o.AcceptedVersion != nil {
		toSerialize["acceptedVersion"] = o.AcceptedVersion
	}
	if o.AcceptedDateTime != nil {
		toSerialize["acceptedDateTime"] = o.AcceptedDateTime
	}
	if o.TermsAndConditions == nil {
		if o.isExplicitNullTermsAndConditions {
			toSerialize["termsAndConditions"] = o.TermsAndConditions
		}
	} else {
		toSerialize["termsAndConditions"] = o.TermsAndConditions
	}
	return json.Marshal(toSerialize)
}


