/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphVppLicensingType struct for MicrosoftGraphVppLicensingType
type MicrosoftGraphVppLicensingType struct {
	// Whether the program supports the user licensing type.
	SupportsUserLicensing *bool `json:"supportsUserLicensing,omitempty"`

	// Whether the program supports the device licensing type.
	SupportsDeviceLicensing *bool `json:"supportsDeviceLicensing,omitempty"`

}

// GetSupportsUserLicensing returns the SupportsUserLicensing field if non-nil, zero value otherwise.
func (o *MicrosoftGraphVppLicensingType) GetSupportsUserLicensing() bool {
	if o == nil || o.SupportsUserLicensing == nil {
		var ret bool
		return ret
	}
	return *o.SupportsUserLicensing
}

// GetSupportsUserLicensingOk returns a tuple with the SupportsUserLicensing field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphVppLicensingType) GetSupportsUserLicensingOk() (bool, bool) {
	if o == nil || o.SupportsUserLicensing == nil {
		var ret bool
		return ret, false
	}
	return *o.SupportsUserLicensing, true
}

// HasSupportsUserLicensing returns a boolean if a field has been set.
func (o *MicrosoftGraphVppLicensingType) HasSupportsUserLicensing() bool {
	if o != nil && o.SupportsUserLicensing != nil {
		return true
	}

	return false
}

// SetSupportsUserLicensing gets a reference to the given bool and assigns it to the SupportsUserLicensing field.
func (o *MicrosoftGraphVppLicensingType) SetSupportsUserLicensing(v bool) {
	o.SupportsUserLicensing = &v
}

// GetSupportsDeviceLicensing returns the SupportsDeviceLicensing field if non-nil, zero value otherwise.
func (o *MicrosoftGraphVppLicensingType) GetSupportsDeviceLicensing() bool {
	if o == nil || o.SupportsDeviceLicensing == nil {
		var ret bool
		return ret
	}
	return *o.SupportsDeviceLicensing
}

// GetSupportsDeviceLicensingOk returns a tuple with the SupportsDeviceLicensing field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphVppLicensingType) GetSupportsDeviceLicensingOk() (bool, bool) {
	if o == nil || o.SupportsDeviceLicensing == nil {
		var ret bool
		return ret, false
	}
	return *o.SupportsDeviceLicensing, true
}

// HasSupportsDeviceLicensing returns a boolean if a field has been set.
func (o *MicrosoftGraphVppLicensingType) HasSupportsDeviceLicensing() bool {
	if o != nil && o.SupportsDeviceLicensing != nil {
		return true
	}

	return false
}

// SetSupportsDeviceLicensing gets a reference to the given bool and assigns it to the SupportsDeviceLicensing field.
func (o *MicrosoftGraphVppLicensingType) SetSupportsDeviceLicensing(v bool) {
	o.SupportsDeviceLicensing = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphVppLicensingType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SupportsUserLicensing != nil {
		toSerialize["supportsUserLicensing"] = o.SupportsUserLicensing
	}
	if o.SupportsDeviceLicensing != nil {
		toSerialize["supportsDeviceLicensing"] = o.SupportsDeviceLicensing
	}
	return json.Marshal(toSerialize)
}


