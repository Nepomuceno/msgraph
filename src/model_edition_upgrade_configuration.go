/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// EditionUpgradeConfiguration Windows 10 Edition Upgrade configuration.
type EditionUpgradeConfiguration struct {
	// Edition Upgrade License Type.
	LicenseType *AnyOfmicrosoftGraphEditionUpgradeLicenseType `json:"licenseType,omitempty"`

	// Edition Upgrade Target Edition.
	TargetEdition *AnyOfmicrosoftGraphWindows10EditionType `json:"targetEdition,omitempty"`

	// Edition Upgrade License File Content.
	License *string `json:"license,omitempty"`
	isExplicitNullLicense bool `json:"-"`
	// Edition Upgrade Product Key.
	ProductKey *string `json:"productKey,omitempty"`
	isExplicitNullProductKey bool `json:"-"`
}

// GetLicenseType returns the LicenseType field if non-nil, zero value otherwise.
func (o *EditionUpgradeConfiguration) GetLicenseType() AnyOfmicrosoftGraphEditionUpgradeLicenseType {
	if o == nil || o.LicenseType == nil {
		var ret AnyOfmicrosoftGraphEditionUpgradeLicenseType
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EditionUpgradeConfiguration) GetLicenseTypeOk() (AnyOfmicrosoftGraphEditionUpgradeLicenseType, bool) {
	if o == nil || o.LicenseType == nil {
		var ret AnyOfmicrosoftGraphEditionUpgradeLicenseType
		return ret, false
	}
	return *o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *EditionUpgradeConfiguration) HasLicenseType() bool {
	if o != nil && o.LicenseType != nil {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given AnyOfmicrosoftGraphEditionUpgradeLicenseType and assigns it to the LicenseType field.
func (o *EditionUpgradeConfiguration) SetLicenseType(v AnyOfmicrosoftGraphEditionUpgradeLicenseType) {
	o.LicenseType = &v
}

// GetTargetEdition returns the TargetEdition field if non-nil, zero value otherwise.
func (o *EditionUpgradeConfiguration) GetTargetEdition() AnyOfmicrosoftGraphWindows10EditionType {
	if o == nil || o.TargetEdition == nil {
		var ret AnyOfmicrosoftGraphWindows10EditionType
		return ret
	}
	return *o.TargetEdition
}

// GetTargetEditionOk returns a tuple with the TargetEdition field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EditionUpgradeConfiguration) GetTargetEditionOk() (AnyOfmicrosoftGraphWindows10EditionType, bool) {
	if o == nil || o.TargetEdition == nil {
		var ret AnyOfmicrosoftGraphWindows10EditionType
		return ret, false
	}
	return *o.TargetEdition, true
}

// HasTargetEdition returns a boolean if a field has been set.
func (o *EditionUpgradeConfiguration) HasTargetEdition() bool {
	if o != nil && o.TargetEdition != nil {
		return true
	}

	return false
}

// SetTargetEdition gets a reference to the given AnyOfmicrosoftGraphWindows10EditionType and assigns it to the TargetEdition field.
func (o *EditionUpgradeConfiguration) SetTargetEdition(v AnyOfmicrosoftGraphWindows10EditionType) {
	o.TargetEdition = &v
}

// GetLicense returns the License field if non-nil, zero value otherwise.
func (o *EditionUpgradeConfiguration) GetLicense() string {
	if o == nil || o.License == nil {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EditionUpgradeConfiguration) GetLicenseOk() (string, bool) {
	if o == nil || o.License == nil {
		var ret string
		return ret, false
	}
	return *o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *EditionUpgradeConfiguration) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *EditionUpgradeConfiguration) SetLicense(v string) {
	o.License = &v
}

// SetLicenseExplicitNull (un)sets License to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The License value is set to nil even if false is passed
func (o *EditionUpgradeConfiguration) SetLicenseExplicitNull(b bool) {
	o.License = nil
	o.isExplicitNullLicense = b
}
// GetProductKey returns the ProductKey field if non-nil, zero value otherwise.
func (o *EditionUpgradeConfiguration) GetProductKey() string {
	if o == nil || o.ProductKey == nil {
		var ret string
		return ret
	}
	return *o.ProductKey
}

// GetProductKeyOk returns a tuple with the ProductKey field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EditionUpgradeConfiguration) GetProductKeyOk() (string, bool) {
	if o == nil || o.ProductKey == nil {
		var ret string
		return ret, false
	}
	return *o.ProductKey, true
}

// HasProductKey returns a boolean if a field has been set.
func (o *EditionUpgradeConfiguration) HasProductKey() bool {
	if o != nil && o.ProductKey != nil {
		return true
	}

	return false
}

// SetProductKey gets a reference to the given string and assigns it to the ProductKey field.
func (o *EditionUpgradeConfiguration) SetProductKey(v string) {
	o.ProductKey = &v
}

// SetProductKeyExplicitNull (un)sets ProductKey to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ProductKey value is set to nil even if false is passed
func (o *EditionUpgradeConfiguration) SetProductKeyExplicitNull(b bool) {
	o.ProductKey = nil
	o.isExplicitNullProductKey = b
}

// MarshalJSON returns the JSON representation of the model.
func (o EditionUpgradeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LicenseType != nil {
		toSerialize["licenseType"] = o.LicenseType
	}
	if o.TargetEdition != nil {
		toSerialize["targetEdition"] = o.TargetEdition
	}
	if o.License == nil {
		if o.isExplicitNullLicense {
			toSerialize["license"] = o.License
		}
	} else {
		toSerialize["license"] = o.License
	}
	if o.ProductKey == nil {
		if o.isExplicitNullProductKey {
			toSerialize["productKey"] = o.ProductKey
		}
	} else {
		toSerialize["productKey"] = o.ProductKey
	}
	return json.Marshal(toSerialize)
}


