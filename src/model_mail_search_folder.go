/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MailSearchFolder struct for MailSearchFolder
type MailSearchFolder struct {
	IsSupported *bool `json:"isSupported,omitempty"`
	isExplicitNullIsSupported bool `json:"-"`
	IncludeNestedFolders *bool `json:"includeNestedFolders,omitempty"`
	isExplicitNullIncludeNestedFolders bool `json:"-"`
	SourceFolderIds *[]string `json:"sourceFolderIds,omitempty"`

	FilterQuery *string `json:"filterQuery,omitempty"`
	isExplicitNullFilterQuery bool `json:"-"`
}

// GetIsSupported returns the IsSupported field if non-nil, zero value otherwise.
func (o *MailSearchFolder) GetIsSupported() bool {
	if o == nil || o.IsSupported == nil {
		var ret bool
		return ret
	}
	return *o.IsSupported
}

// GetIsSupportedOk returns a tuple with the IsSupported field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MailSearchFolder) GetIsSupportedOk() (bool, bool) {
	if o == nil || o.IsSupported == nil {
		var ret bool
		return ret, false
	}
	return *o.IsSupported, true
}

// HasIsSupported returns a boolean if a field has been set.
func (o *MailSearchFolder) HasIsSupported() bool {
	if o != nil && o.IsSupported != nil {
		return true
	}

	return false
}

// SetIsSupported gets a reference to the given bool and assigns it to the IsSupported field.
func (o *MailSearchFolder) SetIsSupported(v bool) {
	o.IsSupported = &v
}

// SetIsSupportedExplicitNull (un)sets IsSupported to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IsSupported value is set to nil even if false is passed
func (o *MailSearchFolder) SetIsSupportedExplicitNull(b bool) {
	o.IsSupported = nil
	o.isExplicitNullIsSupported = b
}
// GetIncludeNestedFolders returns the IncludeNestedFolders field if non-nil, zero value otherwise.
func (o *MailSearchFolder) GetIncludeNestedFolders() bool {
	if o == nil || o.IncludeNestedFolders == nil {
		var ret bool
		return ret
	}
	return *o.IncludeNestedFolders
}

// GetIncludeNestedFoldersOk returns a tuple with the IncludeNestedFolders field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MailSearchFolder) GetIncludeNestedFoldersOk() (bool, bool) {
	if o == nil || o.IncludeNestedFolders == nil {
		var ret bool
		return ret, false
	}
	return *o.IncludeNestedFolders, true
}

// HasIncludeNestedFolders returns a boolean if a field has been set.
func (o *MailSearchFolder) HasIncludeNestedFolders() bool {
	if o != nil && o.IncludeNestedFolders != nil {
		return true
	}

	return false
}

// SetIncludeNestedFolders gets a reference to the given bool and assigns it to the IncludeNestedFolders field.
func (o *MailSearchFolder) SetIncludeNestedFolders(v bool) {
	o.IncludeNestedFolders = &v
}

// SetIncludeNestedFoldersExplicitNull (un)sets IncludeNestedFolders to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The IncludeNestedFolders value is set to nil even if false is passed
func (o *MailSearchFolder) SetIncludeNestedFoldersExplicitNull(b bool) {
	o.IncludeNestedFolders = nil
	o.isExplicitNullIncludeNestedFolders = b
}
// GetSourceFolderIds returns the SourceFolderIds field if non-nil, zero value otherwise.
func (o *MailSearchFolder) GetSourceFolderIds() []string {
	if o == nil || o.SourceFolderIds == nil {
		var ret []string
		return ret
	}
	return *o.SourceFolderIds
}

// GetSourceFolderIdsOk returns a tuple with the SourceFolderIds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MailSearchFolder) GetSourceFolderIdsOk() ([]string, bool) {
	if o == nil || o.SourceFolderIds == nil {
		var ret []string
		return ret, false
	}
	return *o.SourceFolderIds, true
}

// HasSourceFolderIds returns a boolean if a field has been set.
func (o *MailSearchFolder) HasSourceFolderIds() bool {
	if o != nil && o.SourceFolderIds != nil {
		return true
	}

	return false
}

// SetSourceFolderIds gets a reference to the given []string and assigns it to the SourceFolderIds field.
func (o *MailSearchFolder) SetSourceFolderIds(v []string) {
	o.SourceFolderIds = &v
}

// GetFilterQuery returns the FilterQuery field if non-nil, zero value otherwise.
func (o *MailSearchFolder) GetFilterQuery() string {
	if o == nil || o.FilterQuery == nil {
		var ret string
		return ret
	}
	return *o.FilterQuery
}

// GetFilterQueryOk returns a tuple with the FilterQuery field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MailSearchFolder) GetFilterQueryOk() (string, bool) {
	if o == nil || o.FilterQuery == nil {
		var ret string
		return ret, false
	}
	return *o.FilterQuery, true
}

// HasFilterQuery returns a boolean if a field has been set.
func (o *MailSearchFolder) HasFilterQuery() bool {
	if o != nil && o.FilterQuery != nil {
		return true
	}

	return false
}

// SetFilterQuery gets a reference to the given string and assigns it to the FilterQuery field.
func (o *MailSearchFolder) SetFilterQuery(v string) {
	o.FilterQuery = &v
}

// SetFilterQueryExplicitNull (un)sets FilterQuery to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FilterQuery value is set to nil even if false is passed
func (o *MailSearchFolder) SetFilterQueryExplicitNull(b bool) {
	o.FilterQuery = nil
	o.isExplicitNullFilterQuery = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MailSearchFolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsSupported == nil {
		if o.isExplicitNullIsSupported {
			toSerialize["isSupported"] = o.IsSupported
		}
	} else {
		toSerialize["isSupported"] = o.IsSupported
	}
	if o.IncludeNestedFolders == nil {
		if o.isExplicitNullIncludeNestedFolders {
			toSerialize["includeNestedFolders"] = o.IncludeNestedFolders
		}
	} else {
		toSerialize["includeNestedFolders"] = o.IncludeNestedFolders
	}
	if o.SourceFolderIds != nil {
		toSerialize["sourceFolderIds"] = o.SourceFolderIds
	}
	if o.FilterQuery == nil {
		if o.isExplicitNullFilterQuery {
			toSerialize["filterQuery"] = o.FilterQuery
		}
	} else {
		toSerialize["filterQuery"] = o.FilterQuery
	}
	return json.Marshal(toSerialize)
}


