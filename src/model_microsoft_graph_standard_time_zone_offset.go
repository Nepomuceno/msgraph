/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphStandardTimeZoneOffset struct for MicrosoftGraphStandardTimeZoneOffset
type MicrosoftGraphStandardTimeZoneOffset struct {
	Time *string `json:"time,omitempty"`
	isExplicitNullTime bool `json:"-"`
	DayOccurrence *int32 `json:"dayOccurrence,omitempty"`
	isExplicitNullDayOccurrence bool `json:"-"`
	DayOfWeek *AnyOfmicrosoftGraphDayOfWeek `json:"dayOfWeek,omitempty"`
	isExplicitNullDayOfWeek bool `json:"-"`
	Month *int32 `json:"month,omitempty"`
	isExplicitNullMonth bool `json:"-"`
	Year *int32 `json:"year,omitempty"`
	isExplicitNullYear bool `json:"-"`
}

// GetTime returns the Time field if non-nil, zero value otherwise.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetTime() string {
	if o == nil || o.Time == nil {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetTimeOk() (string, bool) {
	if o == nil || o.Time == nil {
		var ret string
		return ret, false
	}
	return *o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *MicrosoftGraphStandardTimeZoneOffset) SetTime(v string) {
	o.Time = &v
}

// SetTimeExplicitNull (un)sets Time to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Time value is set to nil even if false is passed
func (o *MicrosoftGraphStandardTimeZoneOffset) SetTimeExplicitNull(b bool) {
	o.Time = nil
	o.isExplicitNullTime = b
}
// GetDayOccurrence returns the DayOccurrence field if non-nil, zero value otherwise.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetDayOccurrence() int32 {
	if o == nil || o.DayOccurrence == nil {
		var ret int32
		return ret
	}
	return *o.DayOccurrence
}

// GetDayOccurrenceOk returns a tuple with the DayOccurrence field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetDayOccurrenceOk() (int32, bool) {
	if o == nil || o.DayOccurrence == nil {
		var ret int32
		return ret, false
	}
	return *o.DayOccurrence, true
}

// HasDayOccurrence returns a boolean if a field has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) HasDayOccurrence() bool {
	if o != nil && o.DayOccurrence != nil {
		return true
	}

	return false
}

// SetDayOccurrence gets a reference to the given int32 and assigns it to the DayOccurrence field.
func (o *MicrosoftGraphStandardTimeZoneOffset) SetDayOccurrence(v int32) {
	o.DayOccurrence = &v
}

// SetDayOccurrenceExplicitNull (un)sets DayOccurrence to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DayOccurrence value is set to nil even if false is passed
func (o *MicrosoftGraphStandardTimeZoneOffset) SetDayOccurrenceExplicitNull(b bool) {
	o.DayOccurrence = nil
	o.isExplicitNullDayOccurrence = b
}
// GetDayOfWeek returns the DayOfWeek field if non-nil, zero value otherwise.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetDayOfWeek() AnyOfmicrosoftGraphDayOfWeek {
	if o == nil || o.DayOfWeek == nil {
		var ret AnyOfmicrosoftGraphDayOfWeek
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetDayOfWeekOk() (AnyOfmicrosoftGraphDayOfWeek, bool) {
	if o == nil || o.DayOfWeek == nil {
		var ret AnyOfmicrosoftGraphDayOfWeek
		return ret, false
	}
	return *o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek != nil {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given AnyOfmicrosoftGraphDayOfWeek and assigns it to the DayOfWeek field.
func (o *MicrosoftGraphStandardTimeZoneOffset) SetDayOfWeek(v AnyOfmicrosoftGraphDayOfWeek) {
	o.DayOfWeek = &v
}

// SetDayOfWeekExplicitNull (un)sets DayOfWeek to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DayOfWeek value is set to nil even if false is passed
func (o *MicrosoftGraphStandardTimeZoneOffset) SetDayOfWeekExplicitNull(b bool) {
	o.DayOfWeek = nil
	o.isExplicitNullDayOfWeek = b
}
// GetMonth returns the Month field if non-nil, zero value otherwise.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetMonth() int32 {
	if o == nil || o.Month == nil {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetMonthOk() (int32, bool) {
	if o == nil || o.Month == nil {
		var ret int32
		return ret, false
	}
	return *o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MicrosoftGraphStandardTimeZoneOffset) SetMonth(v int32) {
	o.Month = &v
}

// SetMonthExplicitNull (un)sets Month to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Month value is set to nil even if false is passed
func (o *MicrosoftGraphStandardTimeZoneOffset) SetMonthExplicitNull(b bool) {
	o.Month = nil
	o.isExplicitNullMonth = b
}
// GetYear returns the Year field if non-nil, zero value otherwise.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetYear() int32 {
	if o == nil || o.Year == nil {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) GetYearOk() (int32, bool) {
	if o == nil || o.Year == nil {
		var ret int32
		return ret, false
	}
	return *o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *MicrosoftGraphStandardTimeZoneOffset) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *MicrosoftGraphStandardTimeZoneOffset) SetYear(v int32) {
	o.Year = &v
}

// SetYearExplicitNull (un)sets Year to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Year value is set to nil even if false is passed
func (o *MicrosoftGraphStandardTimeZoneOffset) SetYearExplicitNull(b bool) {
	o.Year = nil
	o.isExplicitNullYear = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphStandardTimeZoneOffset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Time == nil {
		if o.isExplicitNullTime {
			toSerialize["time"] = o.Time
		}
	} else {
		toSerialize["time"] = o.Time
	}
	if o.DayOccurrence == nil {
		if o.isExplicitNullDayOccurrence {
			toSerialize["dayOccurrence"] = o.DayOccurrence
		}
	} else {
		toSerialize["dayOccurrence"] = o.DayOccurrence
	}
	if o.DayOfWeek == nil {
		if o.isExplicitNullDayOfWeek {
			toSerialize["dayOfWeek"] = o.DayOfWeek
		}
	} else {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if o.Month == nil {
		if o.isExplicitNullMonth {
			toSerialize["month"] = o.Month
		}
	} else {
		toSerialize["month"] = o.Month
	}
	if o.Year == nil {
		if o.isExplicitNullYear {
			toSerialize["year"] = o.Year
		}
	} else {
		toSerialize["year"] = o.Year
	}
	return json.Marshal(toSerialize)
}


