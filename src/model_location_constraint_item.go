/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// LocationConstraintItem struct for LocationConstraintItem
type LocationConstraintItem struct {
	ResolveAvailability *bool `json:"resolveAvailability,omitempty"`
	isExplicitNullResolveAvailability bool `json:"-"`
}

// GetResolveAvailability returns the ResolveAvailability field if non-nil, zero value otherwise.
func (o *LocationConstraintItem) GetResolveAvailability() bool {
	if o == nil || o.ResolveAvailability == nil {
		var ret bool
		return ret
	}
	return *o.ResolveAvailability
}

// GetResolveAvailabilityOk returns a tuple with the ResolveAvailability field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LocationConstraintItem) GetResolveAvailabilityOk() (bool, bool) {
	if o == nil || o.ResolveAvailability == nil {
		var ret bool
		return ret, false
	}
	return *o.ResolveAvailability, true
}

// HasResolveAvailability returns a boolean if a field has been set.
func (o *LocationConstraintItem) HasResolveAvailability() bool {
	if o != nil && o.ResolveAvailability != nil {
		return true
	}

	return false
}

// SetResolveAvailability gets a reference to the given bool and assigns it to the ResolveAvailability field.
func (o *LocationConstraintItem) SetResolveAvailability(v bool) {
	o.ResolveAvailability = &v
}

// SetResolveAvailabilityExplicitNull (un)sets ResolveAvailability to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ResolveAvailability value is set to nil even if false is passed
func (o *LocationConstraintItem) SetResolveAvailabilityExplicitNull(b bool) {
	o.ResolveAvailability = nil
	o.isExplicitNullResolveAvailability = b
}

// MarshalJSON returns the JSON representation of the model.
func (o LocationConstraintItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResolveAvailability == nil {
		if o.isExplicitNullResolveAvailability {
			toSerialize["resolveAvailability"] = o.ResolveAvailability
		}
	} else {
		toSerialize["resolveAvailability"] = o.ResolveAvailability
	}
	return json.Marshal(toSerialize)
}


