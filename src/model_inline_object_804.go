/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject804 struct for InlineObject804
type InlineObject804 struct {
	Number *AnyOfobject `json:"number,omitempty"`
	isExplicitNullNumber bool `json:"-"`
	FromUnit *AnyOfobject `json:"fromUnit,omitempty"`
	isExplicitNullFromUnit bool `json:"-"`
	ToUnit *AnyOfobject `json:"toUnit,omitempty"`
	isExplicitNullToUnit bool `json:"-"`
}

// GetNumber returns the Number field if non-nil, zero value otherwise.
func (o *InlineObject804) GetNumber() AnyOfobject {
	if o == nil || o.Number == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject804) GetNumberOk() (AnyOfobject, bool) {
	if o == nil || o.Number == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *InlineObject804) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given AnyOfobject and assigns it to the Number field.
func (o *InlineObject804) SetNumber(v AnyOfobject) {
	o.Number = &v
}

// SetNumberExplicitNull (un)sets Number to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Number value is set to nil even if false is passed
func (o *InlineObject804) SetNumberExplicitNull(b bool) {
	o.Number = nil
	o.isExplicitNullNumber = b
}
// GetFromUnit returns the FromUnit field if non-nil, zero value otherwise.
func (o *InlineObject804) GetFromUnit() AnyOfobject {
	if o == nil || o.FromUnit == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.FromUnit
}

// GetFromUnitOk returns a tuple with the FromUnit field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject804) GetFromUnitOk() (AnyOfobject, bool) {
	if o == nil || o.FromUnit == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.FromUnit, true
}

// HasFromUnit returns a boolean if a field has been set.
func (o *InlineObject804) HasFromUnit() bool {
	if o != nil && o.FromUnit != nil {
		return true
	}

	return false
}

// SetFromUnit gets a reference to the given AnyOfobject and assigns it to the FromUnit field.
func (o *InlineObject804) SetFromUnit(v AnyOfobject) {
	o.FromUnit = &v
}

// SetFromUnitExplicitNull (un)sets FromUnit to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FromUnit value is set to nil even if false is passed
func (o *InlineObject804) SetFromUnitExplicitNull(b bool) {
	o.FromUnit = nil
	o.isExplicitNullFromUnit = b
}
// GetToUnit returns the ToUnit field if non-nil, zero value otherwise.
func (o *InlineObject804) GetToUnit() AnyOfobject {
	if o == nil || o.ToUnit == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.ToUnit
}

// GetToUnitOk returns a tuple with the ToUnit field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject804) GetToUnitOk() (AnyOfobject, bool) {
	if o == nil || o.ToUnit == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.ToUnit, true
}

// HasToUnit returns a boolean if a field has been set.
func (o *InlineObject804) HasToUnit() bool {
	if o != nil && o.ToUnit != nil {
		return true
	}

	return false
}

// SetToUnit gets a reference to the given AnyOfobject and assigns it to the ToUnit field.
func (o *InlineObject804) SetToUnit(v AnyOfobject) {
	o.ToUnit = &v
}

// SetToUnitExplicitNull (un)sets ToUnit to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ToUnit value is set to nil even if false is passed
func (o *InlineObject804) SetToUnitExplicitNull(b bool) {
	o.ToUnit = nil
	o.isExplicitNullToUnit = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject804) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number == nil {
		if o.isExplicitNullNumber {
			toSerialize["number"] = o.Number
		}
	} else {
		toSerialize["number"] = o.Number
	}
	if o.FromUnit == nil {
		if o.isExplicitNullFromUnit {
			toSerialize["fromUnit"] = o.FromUnit
		}
	} else {
		toSerialize["fromUnit"] = o.FromUnit
	}
	if o.ToUnit == nil {
		if o.isExplicitNullToUnit {
			toSerialize["toUnit"] = o.ToUnit
		}
	} else {
		toSerialize["toUnit"] = o.ToUnit
	}
	return json.Marshal(toSerialize)
}


