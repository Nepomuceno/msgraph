/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphMessageRuleActions struct for MicrosoftGraphMessageRuleActions
type MicrosoftGraphMessageRuleActions struct {
	MoveToFolder *string `json:"moveToFolder,omitempty"`
	isExplicitNullMoveToFolder bool `json:"-"`
	CopyToFolder *string `json:"copyToFolder,omitempty"`
	isExplicitNullCopyToFolder bool `json:"-"`
	Delete *bool `json:"delete,omitempty"`
	isExplicitNullDelete bool `json:"-"`
	PermanentDelete *bool `json:"permanentDelete,omitempty"`
	isExplicitNullPermanentDelete bool `json:"-"`
	MarkAsRead *bool `json:"markAsRead,omitempty"`
	isExplicitNullMarkAsRead bool `json:"-"`
	MarkImportance *AnyOfmicrosoftGraphImportance `json:"markImportance,omitempty"`
	isExplicitNullMarkImportance bool `json:"-"`
	ForwardTo *[]AnyOfmicrosoftGraphRecipient `json:"forwardTo,omitempty"`

	ForwardAsAttachmentTo *[]AnyOfmicrosoftGraphRecipient `json:"forwardAsAttachmentTo,omitempty"`

	RedirectTo *[]AnyOfmicrosoftGraphRecipient `json:"redirectTo,omitempty"`

	AssignCategories *[]string `json:"assignCategories,omitempty"`

	StopProcessingRules *bool `json:"stopProcessingRules,omitempty"`
	isExplicitNullStopProcessingRules bool `json:"-"`
}

// GetMoveToFolder returns the MoveToFolder field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetMoveToFolder() string {
	if o == nil || o.MoveToFolder == nil {
		var ret string
		return ret
	}
	return *o.MoveToFolder
}

// GetMoveToFolderOk returns a tuple with the MoveToFolder field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetMoveToFolderOk() (string, bool) {
	if o == nil || o.MoveToFolder == nil {
		var ret string
		return ret, false
	}
	return *o.MoveToFolder, true
}

// HasMoveToFolder returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasMoveToFolder() bool {
	if o != nil && o.MoveToFolder != nil {
		return true
	}

	return false
}

// SetMoveToFolder gets a reference to the given string and assigns it to the MoveToFolder field.
func (o *MicrosoftGraphMessageRuleActions) SetMoveToFolder(v string) {
	o.MoveToFolder = &v
}

// SetMoveToFolderExplicitNull (un)sets MoveToFolder to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MoveToFolder value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetMoveToFolderExplicitNull(b bool) {
	o.MoveToFolder = nil
	o.isExplicitNullMoveToFolder = b
}
// GetCopyToFolder returns the CopyToFolder field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetCopyToFolder() string {
	if o == nil || o.CopyToFolder == nil {
		var ret string
		return ret
	}
	return *o.CopyToFolder
}

// GetCopyToFolderOk returns a tuple with the CopyToFolder field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetCopyToFolderOk() (string, bool) {
	if o == nil || o.CopyToFolder == nil {
		var ret string
		return ret, false
	}
	return *o.CopyToFolder, true
}

// HasCopyToFolder returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasCopyToFolder() bool {
	if o != nil && o.CopyToFolder != nil {
		return true
	}

	return false
}

// SetCopyToFolder gets a reference to the given string and assigns it to the CopyToFolder field.
func (o *MicrosoftGraphMessageRuleActions) SetCopyToFolder(v string) {
	o.CopyToFolder = &v
}

// SetCopyToFolderExplicitNull (un)sets CopyToFolder to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CopyToFolder value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetCopyToFolderExplicitNull(b bool) {
	o.CopyToFolder = nil
	o.isExplicitNullCopyToFolder = b
}
// GetDelete returns the Delete field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetDelete() bool {
	if o == nil || o.Delete == nil {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetDeleteOk() (bool, bool) {
	if o == nil || o.Delete == nil {
		var ret bool
		return ret, false
	}
	return *o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasDelete() bool {
	if o != nil && o.Delete != nil {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *MicrosoftGraphMessageRuleActions) SetDelete(v bool) {
	o.Delete = &v
}

// SetDeleteExplicitNull (un)sets Delete to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Delete value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetDeleteExplicitNull(b bool) {
	o.Delete = nil
	o.isExplicitNullDelete = b
}
// GetPermanentDelete returns the PermanentDelete field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetPermanentDelete() bool {
	if o == nil || o.PermanentDelete == nil {
		var ret bool
		return ret
	}
	return *o.PermanentDelete
}

// GetPermanentDeleteOk returns a tuple with the PermanentDelete field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetPermanentDeleteOk() (bool, bool) {
	if o == nil || o.PermanentDelete == nil {
		var ret bool
		return ret, false
	}
	return *o.PermanentDelete, true
}

// HasPermanentDelete returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasPermanentDelete() bool {
	if o != nil && o.PermanentDelete != nil {
		return true
	}

	return false
}

// SetPermanentDelete gets a reference to the given bool and assigns it to the PermanentDelete field.
func (o *MicrosoftGraphMessageRuleActions) SetPermanentDelete(v bool) {
	o.PermanentDelete = &v
}

// SetPermanentDeleteExplicitNull (un)sets PermanentDelete to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PermanentDelete value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetPermanentDeleteExplicitNull(b bool) {
	o.PermanentDelete = nil
	o.isExplicitNullPermanentDelete = b
}
// GetMarkAsRead returns the MarkAsRead field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetMarkAsRead() bool {
	if o == nil || o.MarkAsRead == nil {
		var ret bool
		return ret
	}
	return *o.MarkAsRead
}

// GetMarkAsReadOk returns a tuple with the MarkAsRead field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetMarkAsReadOk() (bool, bool) {
	if o == nil || o.MarkAsRead == nil {
		var ret bool
		return ret, false
	}
	return *o.MarkAsRead, true
}

// HasMarkAsRead returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasMarkAsRead() bool {
	if o != nil && o.MarkAsRead != nil {
		return true
	}

	return false
}

// SetMarkAsRead gets a reference to the given bool and assigns it to the MarkAsRead field.
func (o *MicrosoftGraphMessageRuleActions) SetMarkAsRead(v bool) {
	o.MarkAsRead = &v
}

// SetMarkAsReadExplicitNull (un)sets MarkAsRead to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MarkAsRead value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetMarkAsReadExplicitNull(b bool) {
	o.MarkAsRead = nil
	o.isExplicitNullMarkAsRead = b
}
// GetMarkImportance returns the MarkImportance field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetMarkImportance() AnyOfmicrosoftGraphImportance {
	if o == nil || o.MarkImportance == nil {
		var ret AnyOfmicrosoftGraphImportance
		return ret
	}
	return *o.MarkImportance
}

// GetMarkImportanceOk returns a tuple with the MarkImportance field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetMarkImportanceOk() (AnyOfmicrosoftGraphImportance, bool) {
	if o == nil || o.MarkImportance == nil {
		var ret AnyOfmicrosoftGraphImportance
		return ret, false
	}
	return *o.MarkImportance, true
}

// HasMarkImportance returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasMarkImportance() bool {
	if o != nil && o.MarkImportance != nil {
		return true
	}

	return false
}

// SetMarkImportance gets a reference to the given AnyOfmicrosoftGraphImportance and assigns it to the MarkImportance field.
func (o *MicrosoftGraphMessageRuleActions) SetMarkImportance(v AnyOfmicrosoftGraphImportance) {
	o.MarkImportance = &v
}

// SetMarkImportanceExplicitNull (un)sets MarkImportance to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MarkImportance value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetMarkImportanceExplicitNull(b bool) {
	o.MarkImportance = nil
	o.isExplicitNullMarkImportance = b
}
// GetForwardTo returns the ForwardTo field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetForwardTo() []AnyOfmicrosoftGraphRecipient {
	if o == nil || o.ForwardTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret
	}
	return *o.ForwardTo
}

// GetForwardToOk returns a tuple with the ForwardTo field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetForwardToOk() ([]AnyOfmicrosoftGraphRecipient, bool) {
	if o == nil || o.ForwardTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret, false
	}
	return *o.ForwardTo, true
}

// HasForwardTo returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasForwardTo() bool {
	if o != nil && o.ForwardTo != nil {
		return true
	}

	return false
}

// SetForwardTo gets a reference to the given []AnyOfmicrosoftGraphRecipient and assigns it to the ForwardTo field.
func (o *MicrosoftGraphMessageRuleActions) SetForwardTo(v []AnyOfmicrosoftGraphRecipient) {
	o.ForwardTo = &v
}

// GetForwardAsAttachmentTo returns the ForwardAsAttachmentTo field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetForwardAsAttachmentTo() []AnyOfmicrosoftGraphRecipient {
	if o == nil || o.ForwardAsAttachmentTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret
	}
	return *o.ForwardAsAttachmentTo
}

// GetForwardAsAttachmentToOk returns a tuple with the ForwardAsAttachmentTo field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetForwardAsAttachmentToOk() ([]AnyOfmicrosoftGraphRecipient, bool) {
	if o == nil || o.ForwardAsAttachmentTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret, false
	}
	return *o.ForwardAsAttachmentTo, true
}

// HasForwardAsAttachmentTo returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasForwardAsAttachmentTo() bool {
	if o != nil && o.ForwardAsAttachmentTo != nil {
		return true
	}

	return false
}

// SetForwardAsAttachmentTo gets a reference to the given []AnyOfmicrosoftGraphRecipient and assigns it to the ForwardAsAttachmentTo field.
func (o *MicrosoftGraphMessageRuleActions) SetForwardAsAttachmentTo(v []AnyOfmicrosoftGraphRecipient) {
	o.ForwardAsAttachmentTo = &v
}

// GetRedirectTo returns the RedirectTo field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetRedirectTo() []AnyOfmicrosoftGraphRecipient {
	if o == nil || o.RedirectTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret
	}
	return *o.RedirectTo
}

// GetRedirectToOk returns a tuple with the RedirectTo field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetRedirectToOk() ([]AnyOfmicrosoftGraphRecipient, bool) {
	if o == nil || o.RedirectTo == nil {
		var ret []AnyOfmicrosoftGraphRecipient
		return ret, false
	}
	return *o.RedirectTo, true
}

// HasRedirectTo returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasRedirectTo() bool {
	if o != nil && o.RedirectTo != nil {
		return true
	}

	return false
}

// SetRedirectTo gets a reference to the given []AnyOfmicrosoftGraphRecipient and assigns it to the RedirectTo field.
func (o *MicrosoftGraphMessageRuleActions) SetRedirectTo(v []AnyOfmicrosoftGraphRecipient) {
	o.RedirectTo = &v
}

// GetAssignCategories returns the AssignCategories field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetAssignCategories() []string {
	if o == nil || o.AssignCategories == nil {
		var ret []string
		return ret
	}
	return *o.AssignCategories
}

// GetAssignCategoriesOk returns a tuple with the AssignCategories field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetAssignCategoriesOk() ([]string, bool) {
	if o == nil || o.AssignCategories == nil {
		var ret []string
		return ret, false
	}
	return *o.AssignCategories, true
}

// HasAssignCategories returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasAssignCategories() bool {
	if o != nil && o.AssignCategories != nil {
		return true
	}

	return false
}

// SetAssignCategories gets a reference to the given []string and assigns it to the AssignCategories field.
func (o *MicrosoftGraphMessageRuleActions) SetAssignCategories(v []string) {
	o.AssignCategories = &v
}

// GetStopProcessingRules returns the StopProcessingRules field if non-nil, zero value otherwise.
func (o *MicrosoftGraphMessageRuleActions) GetStopProcessingRules() bool {
	if o == nil || o.StopProcessingRules == nil {
		var ret bool
		return ret
	}
	return *o.StopProcessingRules
}

// GetStopProcessingRulesOk returns a tuple with the StopProcessingRules field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphMessageRuleActions) GetStopProcessingRulesOk() (bool, bool) {
	if o == nil || o.StopProcessingRules == nil {
		var ret bool
		return ret, false
	}
	return *o.StopProcessingRules, true
}

// HasStopProcessingRules returns a boolean if a field has been set.
func (o *MicrosoftGraphMessageRuleActions) HasStopProcessingRules() bool {
	if o != nil && o.StopProcessingRules != nil {
		return true
	}

	return false
}

// SetStopProcessingRules gets a reference to the given bool and assigns it to the StopProcessingRules field.
func (o *MicrosoftGraphMessageRuleActions) SetStopProcessingRules(v bool) {
	o.StopProcessingRules = &v
}

// SetStopProcessingRulesExplicitNull (un)sets StopProcessingRules to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The StopProcessingRules value is set to nil even if false is passed
func (o *MicrosoftGraphMessageRuleActions) SetStopProcessingRulesExplicitNull(b bool) {
	o.StopProcessingRules = nil
	o.isExplicitNullStopProcessingRules = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphMessageRuleActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MoveToFolder == nil {
		if o.isExplicitNullMoveToFolder {
			toSerialize["moveToFolder"] = o.MoveToFolder
		}
	} else {
		toSerialize["moveToFolder"] = o.MoveToFolder
	}
	if o.CopyToFolder == nil {
		if o.isExplicitNullCopyToFolder {
			toSerialize["copyToFolder"] = o.CopyToFolder
		}
	} else {
		toSerialize["copyToFolder"] = o.CopyToFolder
	}
	if o.Delete == nil {
		if o.isExplicitNullDelete {
			toSerialize["delete"] = o.Delete
		}
	} else {
		toSerialize["delete"] = o.Delete
	}
	if o.PermanentDelete == nil {
		if o.isExplicitNullPermanentDelete {
			toSerialize["permanentDelete"] = o.PermanentDelete
		}
	} else {
		toSerialize["permanentDelete"] = o.PermanentDelete
	}
	if o.MarkAsRead == nil {
		if o.isExplicitNullMarkAsRead {
			toSerialize["markAsRead"] = o.MarkAsRead
		}
	} else {
		toSerialize["markAsRead"] = o.MarkAsRead
	}
	if o.MarkImportance == nil {
		if o.isExplicitNullMarkImportance {
			toSerialize["markImportance"] = o.MarkImportance
		}
	} else {
		toSerialize["markImportance"] = o.MarkImportance
	}
	if o.ForwardTo != nil {
		toSerialize["forwardTo"] = o.ForwardTo
	}
	if o.ForwardAsAttachmentTo != nil {
		toSerialize["forwardAsAttachmentTo"] = o.ForwardAsAttachmentTo
	}
	if o.RedirectTo != nil {
		toSerialize["redirectTo"] = o.RedirectTo
	}
	if o.AssignCategories != nil {
		toSerialize["assignCategories"] = o.AssignCategories
	}
	if o.StopProcessingRules == nil {
		if o.isExplicitNullStopProcessingRules {
			toSerialize["stopProcessingRules"] = o.StopProcessingRules
		}
	} else {
		toSerialize["stopProcessingRules"] = o.StopProcessingRules
	}
	return json.Marshal(toSerialize)
}


