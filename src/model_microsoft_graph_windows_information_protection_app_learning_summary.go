/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphWindowsInformationProtectionAppLearningSummary struct for MicrosoftGraphWindowsInformationProtectionAppLearningSummary
type MicrosoftGraphWindowsInformationProtectionAppLearningSummary struct {
	Id *string `json:"id,omitempty"`

	// Application Name
	ApplicationName *string `json:"applicationName,omitempty"`
	isExplicitNullApplicationName bool `json:"-"`
	// Application Type
	ApplicationType *AnyOfmicrosoftGraphApplicationType `json:"applicationType,omitempty"`

	// Device Count
	DeviceCount *int32 `json:"deviceCount,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) SetId(v string) {
	o.Id = &v
}

// GetApplicationName returns the ApplicationName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetApplicationName() string {
	if o == nil || o.ApplicationName == nil {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetApplicationNameOk() (string, bool) {
	if o == nil || o.ApplicationName == nil {
		var ret string
		return ret, false
	}
	return *o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) HasApplicationName() bool {
	if o != nil && o.ApplicationName != nil {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// SetApplicationNameExplicitNull (un)sets ApplicationName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ApplicationName value is set to nil even if false is passed
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) SetApplicationNameExplicitNull(b bool) {
	o.ApplicationName = nil
	o.isExplicitNullApplicationName = b
}
// GetApplicationType returns the ApplicationType field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetApplicationType() AnyOfmicrosoftGraphApplicationType {
	if o == nil || o.ApplicationType == nil {
		var ret AnyOfmicrosoftGraphApplicationType
		return ret
	}
	return *o.ApplicationType
}

// GetApplicationTypeOk returns a tuple with the ApplicationType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetApplicationTypeOk() (AnyOfmicrosoftGraphApplicationType, bool) {
	if o == nil || o.ApplicationType == nil {
		var ret AnyOfmicrosoftGraphApplicationType
		return ret, false
	}
	return *o.ApplicationType, true
}

// HasApplicationType returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) HasApplicationType() bool {
	if o != nil && o.ApplicationType != nil {
		return true
	}

	return false
}

// SetApplicationType gets a reference to the given AnyOfmicrosoftGraphApplicationType and assigns it to the ApplicationType field.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) SetApplicationType(v AnyOfmicrosoftGraphApplicationType) {
	o.ApplicationType = &v
}

// GetDeviceCount returns the DeviceCount field if non-nil, zero value otherwise.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetDeviceCount() int32 {
	if o == nil || o.DeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) GetDeviceCountOk() (int32, bool) {
	if o == nil || o.DeviceCount == nil {
		var ret int32
		return ret, false
	}
	return *o.DeviceCount, true
}

// HasDeviceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) HasDeviceCount() bool {
	if o != nil && o.DeviceCount != nil {
		return true
	}

	return false
}

// SetDeviceCount gets a reference to the given int32 and assigns it to the DeviceCount field.
func (o *MicrosoftGraphWindowsInformationProtectionAppLearningSummary) SetDeviceCount(v int32) {
	o.DeviceCount = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphWindowsInformationProtectionAppLearningSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ApplicationName == nil {
		if o.isExplicitNullApplicationName {
			toSerialize["applicationName"] = o.ApplicationName
		}
	} else {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if o.ApplicationType != nil {
		toSerialize["applicationType"] = o.ApplicationType
	}
	if o.DeviceCount != nil {
		toSerialize["deviceCount"] = o.DeviceCount
	}
	return json.Marshal(toSerialize)
}


