/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphRegistryKeyState struct for MicrosoftGraphRegistryKeyState
type MicrosoftGraphRegistryKeyState struct {
	Hive *AnyOfmicrosoftGraphRegistryHive `json:"hive,omitempty"`
	isExplicitNullHive bool `json:"-"`
	Key *string `json:"key,omitempty"`
	isExplicitNullKey bool `json:"-"`
	OldKey *string `json:"oldKey,omitempty"`
	isExplicitNullOldKey bool `json:"-"`
	OldValueData *string `json:"oldValueData,omitempty"`
	isExplicitNullOldValueData bool `json:"-"`
	OldValueName *string `json:"oldValueName,omitempty"`
	isExplicitNullOldValueName bool `json:"-"`
	Operation *AnyOfmicrosoftGraphRegistryOperation `json:"operation,omitempty"`
	isExplicitNullOperation bool `json:"-"`
	ProcessId *int32 `json:"processId,omitempty"`
	isExplicitNullProcessId bool `json:"-"`
	ValueData *string `json:"valueData,omitempty"`
	isExplicitNullValueData bool `json:"-"`
	ValueName *string `json:"valueName,omitempty"`
	isExplicitNullValueName bool `json:"-"`
	ValueType *AnyOfmicrosoftGraphRegistryValueType `json:"valueType,omitempty"`
	isExplicitNullValueType bool `json:"-"`
}

// GetHive returns the Hive field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetHive() AnyOfmicrosoftGraphRegistryHive {
	if o == nil || o.Hive == nil {
		var ret AnyOfmicrosoftGraphRegistryHive
		return ret
	}
	return *o.Hive
}

// GetHiveOk returns a tuple with the Hive field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetHiveOk() (AnyOfmicrosoftGraphRegistryHive, bool) {
	if o == nil || o.Hive == nil {
		var ret AnyOfmicrosoftGraphRegistryHive
		return ret, false
	}
	return *o.Hive, true
}

// HasHive returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasHive() bool {
	if o != nil && o.Hive != nil {
		return true
	}

	return false
}

// SetHive gets a reference to the given AnyOfmicrosoftGraphRegistryHive and assigns it to the Hive field.
func (o *MicrosoftGraphRegistryKeyState) SetHive(v AnyOfmicrosoftGraphRegistryHive) {
	o.Hive = &v
}

// SetHiveExplicitNull (un)sets Hive to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Hive value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetHiveExplicitNull(b bool) {
	o.Hive = nil
	o.isExplicitNullHive = b
}
// GetKey returns the Key field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetKeyOk() (string, bool) {
	if o == nil || o.Key == nil {
		var ret string
		return ret, false
	}
	return *o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MicrosoftGraphRegistryKeyState) SetKey(v string) {
	o.Key = &v
}

// SetKeyExplicitNull (un)sets Key to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Key value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetKeyExplicitNull(b bool) {
	o.Key = nil
	o.isExplicitNullKey = b
}
// GetOldKey returns the OldKey field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetOldKey() string {
	if o == nil || o.OldKey == nil {
		var ret string
		return ret
	}
	return *o.OldKey
}

// GetOldKeyOk returns a tuple with the OldKey field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetOldKeyOk() (string, bool) {
	if o == nil || o.OldKey == nil {
		var ret string
		return ret, false
	}
	return *o.OldKey, true
}

// HasOldKey returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasOldKey() bool {
	if o != nil && o.OldKey != nil {
		return true
	}

	return false
}

// SetOldKey gets a reference to the given string and assigns it to the OldKey field.
func (o *MicrosoftGraphRegistryKeyState) SetOldKey(v string) {
	o.OldKey = &v
}

// SetOldKeyExplicitNull (un)sets OldKey to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OldKey value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetOldKeyExplicitNull(b bool) {
	o.OldKey = nil
	o.isExplicitNullOldKey = b
}
// GetOldValueData returns the OldValueData field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetOldValueData() string {
	if o == nil || o.OldValueData == nil {
		var ret string
		return ret
	}
	return *o.OldValueData
}

// GetOldValueDataOk returns a tuple with the OldValueData field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetOldValueDataOk() (string, bool) {
	if o == nil || o.OldValueData == nil {
		var ret string
		return ret, false
	}
	return *o.OldValueData, true
}

// HasOldValueData returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasOldValueData() bool {
	if o != nil && o.OldValueData != nil {
		return true
	}

	return false
}

// SetOldValueData gets a reference to the given string and assigns it to the OldValueData field.
func (o *MicrosoftGraphRegistryKeyState) SetOldValueData(v string) {
	o.OldValueData = &v
}

// SetOldValueDataExplicitNull (un)sets OldValueData to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OldValueData value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetOldValueDataExplicitNull(b bool) {
	o.OldValueData = nil
	o.isExplicitNullOldValueData = b
}
// GetOldValueName returns the OldValueName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetOldValueName() string {
	if o == nil || o.OldValueName == nil {
		var ret string
		return ret
	}
	return *o.OldValueName
}

// GetOldValueNameOk returns a tuple with the OldValueName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetOldValueNameOk() (string, bool) {
	if o == nil || o.OldValueName == nil {
		var ret string
		return ret, false
	}
	return *o.OldValueName, true
}

// HasOldValueName returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasOldValueName() bool {
	if o != nil && o.OldValueName != nil {
		return true
	}

	return false
}

// SetOldValueName gets a reference to the given string and assigns it to the OldValueName field.
func (o *MicrosoftGraphRegistryKeyState) SetOldValueName(v string) {
	o.OldValueName = &v
}

// SetOldValueNameExplicitNull (un)sets OldValueName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OldValueName value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetOldValueNameExplicitNull(b bool) {
	o.OldValueName = nil
	o.isExplicitNullOldValueName = b
}
// GetOperation returns the Operation field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetOperation() AnyOfmicrosoftGraphRegistryOperation {
	if o == nil || o.Operation == nil {
		var ret AnyOfmicrosoftGraphRegistryOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetOperationOk() (AnyOfmicrosoftGraphRegistryOperation, bool) {
	if o == nil || o.Operation == nil {
		var ret AnyOfmicrosoftGraphRegistryOperation
		return ret, false
	}
	return *o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given AnyOfmicrosoftGraphRegistryOperation and assigns it to the Operation field.
func (o *MicrosoftGraphRegistryKeyState) SetOperation(v AnyOfmicrosoftGraphRegistryOperation) {
	o.Operation = &v
}

// SetOperationExplicitNull (un)sets Operation to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Operation value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetOperationExplicitNull(b bool) {
	o.Operation = nil
	o.isExplicitNullOperation = b
}
// GetProcessId returns the ProcessId field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetProcessId() int32 {
	if o == nil || o.ProcessId == nil {
		var ret int32
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetProcessIdOk() (int32, bool) {
	if o == nil || o.ProcessId == nil {
		var ret int32
		return ret, false
	}
	return *o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasProcessId() bool {
	if o != nil && o.ProcessId != nil {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given int32 and assigns it to the ProcessId field.
func (o *MicrosoftGraphRegistryKeyState) SetProcessId(v int32) {
	o.ProcessId = &v
}

// SetProcessIdExplicitNull (un)sets ProcessId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ProcessId value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetProcessIdExplicitNull(b bool) {
	o.ProcessId = nil
	o.isExplicitNullProcessId = b
}
// GetValueData returns the ValueData field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetValueData() string {
	if o == nil || o.ValueData == nil {
		var ret string
		return ret
	}
	return *o.ValueData
}

// GetValueDataOk returns a tuple with the ValueData field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetValueDataOk() (string, bool) {
	if o == nil || o.ValueData == nil {
		var ret string
		return ret, false
	}
	return *o.ValueData, true
}

// HasValueData returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasValueData() bool {
	if o != nil && o.ValueData != nil {
		return true
	}

	return false
}

// SetValueData gets a reference to the given string and assigns it to the ValueData field.
func (o *MicrosoftGraphRegistryKeyState) SetValueData(v string) {
	o.ValueData = &v
}

// SetValueDataExplicitNull (un)sets ValueData to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ValueData value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetValueDataExplicitNull(b bool) {
	o.ValueData = nil
	o.isExplicitNullValueData = b
}
// GetValueName returns the ValueName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetValueName() string {
	if o == nil || o.ValueName == nil {
		var ret string
		return ret
	}
	return *o.ValueName
}

// GetValueNameOk returns a tuple with the ValueName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetValueNameOk() (string, bool) {
	if o == nil || o.ValueName == nil {
		var ret string
		return ret, false
	}
	return *o.ValueName, true
}

// HasValueName returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasValueName() bool {
	if o != nil && o.ValueName != nil {
		return true
	}

	return false
}

// SetValueName gets a reference to the given string and assigns it to the ValueName field.
func (o *MicrosoftGraphRegistryKeyState) SetValueName(v string) {
	o.ValueName = &v
}

// SetValueNameExplicitNull (un)sets ValueName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ValueName value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetValueNameExplicitNull(b bool) {
	o.ValueName = nil
	o.isExplicitNullValueName = b
}
// GetValueType returns the ValueType field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRegistryKeyState) GetValueType() AnyOfmicrosoftGraphRegistryValueType {
	if o == nil || o.ValueType == nil {
		var ret AnyOfmicrosoftGraphRegistryValueType
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRegistryKeyState) GetValueTypeOk() (AnyOfmicrosoftGraphRegistryValueType, bool) {
	if o == nil || o.ValueType == nil {
		var ret AnyOfmicrosoftGraphRegistryValueType
		return ret, false
	}
	return *o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *MicrosoftGraphRegistryKeyState) HasValueType() bool {
	if o != nil && o.ValueType != nil {
		return true
	}

	return false
}

// SetValueType gets a reference to the given AnyOfmicrosoftGraphRegistryValueType and assigns it to the ValueType field.
func (o *MicrosoftGraphRegistryKeyState) SetValueType(v AnyOfmicrosoftGraphRegistryValueType) {
	o.ValueType = &v
}

// SetValueTypeExplicitNull (un)sets ValueType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ValueType value is set to nil even if false is passed
func (o *MicrosoftGraphRegistryKeyState) SetValueTypeExplicitNull(b bool) {
	o.ValueType = nil
	o.isExplicitNullValueType = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphRegistryKeyState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hive == nil {
		if o.isExplicitNullHive {
			toSerialize["hive"] = o.Hive
		}
	} else {
		toSerialize["hive"] = o.Hive
	}
	if o.Key == nil {
		if o.isExplicitNullKey {
			toSerialize["key"] = o.Key
		}
	} else {
		toSerialize["key"] = o.Key
	}
	if o.OldKey == nil {
		if o.isExplicitNullOldKey {
			toSerialize["oldKey"] = o.OldKey
		}
	} else {
		toSerialize["oldKey"] = o.OldKey
	}
	if o.OldValueData == nil {
		if o.isExplicitNullOldValueData {
			toSerialize["oldValueData"] = o.OldValueData
		}
	} else {
		toSerialize["oldValueData"] = o.OldValueData
	}
	if o.OldValueName == nil {
		if o.isExplicitNullOldValueName {
			toSerialize["oldValueName"] = o.OldValueName
		}
	} else {
		toSerialize["oldValueName"] = o.OldValueName
	}
	if o.Operation == nil {
		if o.isExplicitNullOperation {
			toSerialize["operation"] = o.Operation
		}
	} else {
		toSerialize["operation"] = o.Operation
	}
	if o.ProcessId == nil {
		if o.isExplicitNullProcessId {
			toSerialize["processId"] = o.ProcessId
		}
	} else {
		toSerialize["processId"] = o.ProcessId
	}
	if o.ValueData == nil {
		if o.isExplicitNullValueData {
			toSerialize["valueData"] = o.ValueData
		}
	} else {
		toSerialize["valueData"] = o.ValueData
	}
	if o.ValueName == nil {
		if o.isExplicitNullValueName {
			toSerialize["valueName"] = o.ValueName
		}
	} else {
		toSerialize["valueName"] = o.ValueName
	}
	if o.ValueType == nil {
		if o.isExplicitNullValueType {
			toSerialize["valueType"] = o.ValueType
		}
	} else {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}


