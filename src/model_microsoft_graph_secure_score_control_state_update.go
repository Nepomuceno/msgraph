/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphSecureScoreControlStateUpdate struct for MicrosoftGraphSecureScoreControlStateUpdate
type MicrosoftGraphSecureScoreControlStateUpdate struct {
	AssignedTo *string `json:"assignedTo,omitempty"`
	isExplicitNullAssignedTo bool `json:"-"`
	Comment *string `json:"comment,omitempty"`
	isExplicitNullComment bool `json:"-"`
	State *string `json:"state,omitempty"`
	isExplicitNullState bool `json:"-"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
	isExplicitNullUpdatedBy bool `json:"-"`
	UpdatedDateTime *time.Time `json:"updatedDateTime,omitempty"`
	isExplicitNullUpdatedDateTime bool `json:"-"`
}

// GetAssignedTo returns the AssignedTo field if non-nil, zero value otherwise.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetAssignedTo() string {
	if o == nil || o.AssignedTo == nil {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetAssignedToOk() (string, bool) {
	if o == nil || o.AssignedTo == nil {
		var ret string
		return ret, false
	}
	return *o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) HasAssignedTo() bool {
	if o != nil && o.AssignedTo != nil {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// SetAssignedToExplicitNull (un)sets AssignedTo to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AssignedTo value is set to nil even if false is passed
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetAssignedToExplicitNull(b bool) {
	o.AssignedTo = nil
	o.isExplicitNullAssignedTo = b
}
// GetComment returns the Comment field if non-nil, zero value otherwise.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetCommentOk() (string, bool) {
	if o == nil || o.Comment == nil {
		var ret string
		return ret, false
	}
	return *o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetComment(v string) {
	o.Comment = &v
}

// SetCommentExplicitNull (un)sets Comment to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Comment value is set to nil even if false is passed
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetCommentExplicitNull(b bool) {
	o.Comment = nil
	o.isExplicitNullComment = b
}
// GetState returns the State field if non-nil, zero value otherwise.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetStateOk() (string, bool) {
	if o == nil || o.State == nil {
		var ret string
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetState(v string) {
	o.State = &v
}

// SetStateExplicitNull (un)sets State to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The State value is set to nil even if false is passed
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetStateExplicitNull(b bool) {
	o.State = nil
	o.isExplicitNullState = b
}
// GetUpdatedBy returns the UpdatedBy field if non-nil, zero value otherwise.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetUpdatedByOk() (string, bool) {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret, false
	}
	return *o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// SetUpdatedByExplicitNull (un)sets UpdatedBy to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UpdatedBy value is set to nil even if false is passed
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetUpdatedByExplicitNull(b bool) {
	o.UpdatedBy = nil
	o.isExplicitNullUpdatedBy = b
}
// GetUpdatedDateTime returns the UpdatedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetUpdatedDateTime() time.Time {
	if o == nil || o.UpdatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) GetUpdatedDateTimeOk() (time.Time, bool) {
	if o == nil || o.UpdatedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) HasUpdatedDateTime() bool {
	if o != nil && o.UpdatedDateTime != nil {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// SetUpdatedDateTimeExplicitNull (un)sets UpdatedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UpdatedDateTime value is set to nil even if false is passed
func (o *MicrosoftGraphSecureScoreControlStateUpdate) SetUpdatedDateTimeExplicitNull(b bool) {
	o.UpdatedDateTime = nil
	o.isExplicitNullUpdatedDateTime = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphSecureScoreControlStateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedTo == nil {
		if o.isExplicitNullAssignedTo {
			toSerialize["assignedTo"] = o.AssignedTo
		}
	} else {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if o.Comment == nil {
		if o.isExplicitNullComment {
			toSerialize["comment"] = o.Comment
		}
	} else {
		toSerialize["comment"] = o.Comment
	}
	if o.State == nil {
		if o.isExplicitNullState {
			toSerialize["state"] = o.State
		}
	} else {
		toSerialize["state"] = o.State
	}
	if o.UpdatedBy == nil {
		if o.isExplicitNullUpdatedBy {
			toSerialize["updatedBy"] = o.UpdatedBy
		}
	} else {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.UpdatedDateTime == nil {
		if o.isExplicitNullUpdatedDateTime {
			toSerialize["updatedDateTime"] = o.UpdatedDateTime
		}
	} else {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	return json.Marshal(toSerialize)
}


