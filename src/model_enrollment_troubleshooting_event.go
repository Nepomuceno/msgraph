/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// EnrollmentTroubleshootingEvent Event representing an enrollment failure.
type EnrollmentTroubleshootingEvent struct {
	// Device identifier created or collected by Intune.
	ManagedDeviceIdentifier *string `json:"managedDeviceIdentifier,omitempty"`
	isExplicitNullManagedDeviceIdentifier bool `json:"-"`
	// Operating System.
	OperatingSystem *string `json:"operatingSystem,omitempty"`
	isExplicitNullOperatingSystem bool `json:"-"`
	// OS Version.
	OsVersion *string `json:"osVersion,omitempty"`
	isExplicitNullOsVersion bool `json:"-"`
	// Identifier for the user that tried to enroll the device.
	UserId *string `json:"userId,omitempty"`
	isExplicitNullUserId bool `json:"-"`
	// Azure AD device identifier.
	DeviceId *string `json:"deviceId,omitempty"`
	isExplicitNullDeviceId bool `json:"-"`
	// Type of the enrollment.
	EnrollmentType *AnyOfmicrosoftGraphDeviceEnrollmentType `json:"enrollmentType,omitempty"`

	// Highlevel failure category.
	FailureCategory *AnyOfmicrosoftGraphDeviceEnrollmentFailureReason `json:"failureCategory,omitempty"`

	// Detailed failure reason.
	FailureReason *string `json:"failureReason,omitempty"`
	isExplicitNullFailureReason bool `json:"-"`
}

// GetManagedDeviceIdentifier returns the ManagedDeviceIdentifier field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetManagedDeviceIdentifier() string {
	if o == nil || o.ManagedDeviceIdentifier == nil {
		var ret string
		return ret
	}
	return *o.ManagedDeviceIdentifier
}

// GetManagedDeviceIdentifierOk returns a tuple with the ManagedDeviceIdentifier field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetManagedDeviceIdentifierOk() (string, bool) {
	if o == nil || o.ManagedDeviceIdentifier == nil {
		var ret string
		return ret, false
	}
	return *o.ManagedDeviceIdentifier, true
}

// HasManagedDeviceIdentifier returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasManagedDeviceIdentifier() bool {
	if o != nil && o.ManagedDeviceIdentifier != nil {
		return true
	}

	return false
}

// SetManagedDeviceIdentifier gets a reference to the given string and assigns it to the ManagedDeviceIdentifier field.
func (o *EnrollmentTroubleshootingEvent) SetManagedDeviceIdentifier(v string) {
	o.ManagedDeviceIdentifier = &v
}

// SetManagedDeviceIdentifierExplicitNull (un)sets ManagedDeviceIdentifier to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ManagedDeviceIdentifier value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetManagedDeviceIdentifierExplicitNull(b bool) {
	o.ManagedDeviceIdentifier = nil
	o.isExplicitNullManagedDeviceIdentifier = b
}
// GetOperatingSystem returns the OperatingSystem field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetOperatingSystemOk() (string, bool) {
	if o == nil || o.OperatingSystem == nil {
		var ret string
		return ret, false
	}
	return *o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem != nil {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *EnrollmentTroubleshootingEvent) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// SetOperatingSystemExplicitNull (un)sets OperatingSystem to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OperatingSystem value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetOperatingSystemExplicitNull(b bool) {
	o.OperatingSystem = nil
	o.isExplicitNullOperatingSystem = b
}
// GetOsVersion returns the OsVersion field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetOsVersion() string {
	if o == nil || o.OsVersion == nil {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetOsVersionOk() (string, bool) {
	if o == nil || o.OsVersion == nil {
		var ret string
		return ret, false
	}
	return *o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasOsVersion() bool {
	if o != nil && o.OsVersion != nil {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *EnrollmentTroubleshootingEvent) SetOsVersion(v string) {
	o.OsVersion = &v
}

// SetOsVersionExplicitNull (un)sets OsVersion to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The OsVersion value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetOsVersionExplicitNull(b bool) {
	o.OsVersion = nil
	o.isExplicitNullOsVersion = b
}
// GetUserId returns the UserId field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetUserIdOk() (string, bool) {
	if o == nil || o.UserId == nil {
		var ret string
		return ret, false
	}
	return *o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *EnrollmentTroubleshootingEvent) SetUserId(v string) {
	o.UserId = &v
}

// SetUserIdExplicitNull (un)sets UserId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserId value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetUserIdExplicitNull(b bool) {
	o.UserId = nil
	o.isExplicitNullUserId = b
}
// GetDeviceId returns the DeviceId field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetDeviceIdOk() (string, bool) {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret, false
	}
	return *o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *EnrollmentTroubleshootingEvent) SetDeviceId(v string) {
	o.DeviceId = &v
}

// SetDeviceIdExplicitNull (un)sets DeviceId to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DeviceId value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetDeviceIdExplicitNull(b bool) {
	o.DeviceId = nil
	o.isExplicitNullDeviceId = b
}
// GetEnrollmentType returns the EnrollmentType field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetEnrollmentType() AnyOfmicrosoftGraphDeviceEnrollmentType {
	if o == nil || o.EnrollmentType == nil {
		var ret AnyOfmicrosoftGraphDeviceEnrollmentType
		return ret
	}
	return *o.EnrollmentType
}

// GetEnrollmentTypeOk returns a tuple with the EnrollmentType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetEnrollmentTypeOk() (AnyOfmicrosoftGraphDeviceEnrollmentType, bool) {
	if o == nil || o.EnrollmentType == nil {
		var ret AnyOfmicrosoftGraphDeviceEnrollmentType
		return ret, false
	}
	return *o.EnrollmentType, true
}

// HasEnrollmentType returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasEnrollmentType() bool {
	if o != nil && o.EnrollmentType != nil {
		return true
	}

	return false
}

// SetEnrollmentType gets a reference to the given AnyOfmicrosoftGraphDeviceEnrollmentType and assigns it to the EnrollmentType field.
func (o *EnrollmentTroubleshootingEvent) SetEnrollmentType(v AnyOfmicrosoftGraphDeviceEnrollmentType) {
	o.EnrollmentType = &v
}

// GetFailureCategory returns the FailureCategory field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetFailureCategory() AnyOfmicrosoftGraphDeviceEnrollmentFailureReason {
	if o == nil || o.FailureCategory == nil {
		var ret AnyOfmicrosoftGraphDeviceEnrollmentFailureReason
		return ret
	}
	return *o.FailureCategory
}

// GetFailureCategoryOk returns a tuple with the FailureCategory field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetFailureCategoryOk() (AnyOfmicrosoftGraphDeviceEnrollmentFailureReason, bool) {
	if o == nil || o.FailureCategory == nil {
		var ret AnyOfmicrosoftGraphDeviceEnrollmentFailureReason
		return ret, false
	}
	return *o.FailureCategory, true
}

// HasFailureCategory returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasFailureCategory() bool {
	if o != nil && o.FailureCategory != nil {
		return true
	}

	return false
}

// SetFailureCategory gets a reference to the given AnyOfmicrosoftGraphDeviceEnrollmentFailureReason and assigns it to the FailureCategory field.
func (o *EnrollmentTroubleshootingEvent) SetFailureCategory(v AnyOfmicrosoftGraphDeviceEnrollmentFailureReason) {
	o.FailureCategory = &v
}

// GetFailureReason returns the FailureReason field if non-nil, zero value otherwise.
func (o *EnrollmentTroubleshootingEvent) GetFailureReason() string {
	if o == nil || o.FailureReason == nil {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentTroubleshootingEvent) GetFailureReasonOk() (string, bool) {
	if o == nil || o.FailureReason == nil {
		var ret string
		return ret, false
	}
	return *o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *EnrollmentTroubleshootingEvent) HasFailureReason() bool {
	if o != nil && o.FailureReason != nil {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *EnrollmentTroubleshootingEvent) SetFailureReason(v string) {
	o.FailureReason = &v
}

// SetFailureReasonExplicitNull (un)sets FailureReason to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FailureReason value is set to nil even if false is passed
func (o *EnrollmentTroubleshootingEvent) SetFailureReasonExplicitNull(b bool) {
	o.FailureReason = nil
	o.isExplicitNullFailureReason = b
}

// MarshalJSON returns the JSON representation of the model.
func (o EnrollmentTroubleshootingEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ManagedDeviceIdentifier == nil {
		if o.isExplicitNullManagedDeviceIdentifier {
			toSerialize["managedDeviceIdentifier"] = o.ManagedDeviceIdentifier
		}
	} else {
		toSerialize["managedDeviceIdentifier"] = o.ManagedDeviceIdentifier
	}
	if o.OperatingSystem == nil {
		if o.isExplicitNullOperatingSystem {
			toSerialize["operatingSystem"] = o.OperatingSystem
		}
	} else {
		toSerialize["operatingSystem"] = o.OperatingSystem
	}
	if o.OsVersion == nil {
		if o.isExplicitNullOsVersion {
			toSerialize["osVersion"] = o.OsVersion
		}
	} else {
		toSerialize["osVersion"] = o.OsVersion
	}
	if o.UserId == nil {
		if o.isExplicitNullUserId {
			toSerialize["userId"] = o.UserId
		}
	} else {
		toSerialize["userId"] = o.UserId
	}
	if o.DeviceId == nil {
		if o.isExplicitNullDeviceId {
			toSerialize["deviceId"] = o.DeviceId
		}
	} else {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.EnrollmentType != nil {
		toSerialize["enrollmentType"] = o.EnrollmentType
	}
	if o.FailureCategory != nil {
		toSerialize["failureCategory"] = o.FailureCategory
	}
	if o.FailureReason == nil {
		if o.isExplicitNullFailureReason {
			toSerialize["failureReason"] = o.FailureReason
		}
	} else {
		toSerialize["failureReason"] = o.FailureReason
	}
	return json.Marshal(toSerialize)
}


