/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphAttendeeAvailability struct for MicrosoftGraphAttendeeAvailability
type MicrosoftGraphAttendeeAvailability struct {
	Attendee *AnyOfmicrosoftGraphAttendeeBase `json:"attendee,omitempty"`
	isExplicitNullAttendee bool `json:"-"`
	Availability *AnyOfmicrosoftGraphFreeBusyStatus `json:"availability,omitempty"`
	isExplicitNullAvailability bool `json:"-"`
}

// GetAttendee returns the Attendee field if non-nil, zero value otherwise.
func (o *MicrosoftGraphAttendeeAvailability) GetAttendee() AnyOfmicrosoftGraphAttendeeBase {
	if o == nil || o.Attendee == nil {
		var ret AnyOfmicrosoftGraphAttendeeBase
		return ret
	}
	return *o.Attendee
}

// GetAttendeeOk returns a tuple with the Attendee field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAttendeeAvailability) GetAttendeeOk() (AnyOfmicrosoftGraphAttendeeBase, bool) {
	if o == nil || o.Attendee == nil {
		var ret AnyOfmicrosoftGraphAttendeeBase
		return ret, false
	}
	return *o.Attendee, true
}

// HasAttendee returns a boolean if a field has been set.
func (o *MicrosoftGraphAttendeeAvailability) HasAttendee() bool {
	if o != nil && o.Attendee != nil {
		return true
	}

	return false
}

// SetAttendee gets a reference to the given AnyOfmicrosoftGraphAttendeeBase and assigns it to the Attendee field.
func (o *MicrosoftGraphAttendeeAvailability) SetAttendee(v AnyOfmicrosoftGraphAttendeeBase) {
	o.Attendee = &v
}

// SetAttendeeExplicitNull (un)sets Attendee to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Attendee value is set to nil even if false is passed
func (o *MicrosoftGraphAttendeeAvailability) SetAttendeeExplicitNull(b bool) {
	o.Attendee = nil
	o.isExplicitNullAttendee = b
}
// GetAvailability returns the Availability field if non-nil, zero value otherwise.
func (o *MicrosoftGraphAttendeeAvailability) GetAvailability() AnyOfmicrosoftGraphFreeBusyStatus {
	if o == nil || o.Availability == nil {
		var ret AnyOfmicrosoftGraphFreeBusyStatus
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAttendeeAvailability) GetAvailabilityOk() (AnyOfmicrosoftGraphFreeBusyStatus, bool) {
	if o == nil || o.Availability == nil {
		var ret AnyOfmicrosoftGraphFreeBusyStatus
		return ret, false
	}
	return *o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *MicrosoftGraphAttendeeAvailability) HasAvailability() bool {
	if o != nil && o.Availability != nil {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AnyOfmicrosoftGraphFreeBusyStatus and assigns it to the Availability field.
func (o *MicrosoftGraphAttendeeAvailability) SetAvailability(v AnyOfmicrosoftGraphFreeBusyStatus) {
	o.Availability = &v
}

// SetAvailabilityExplicitNull (un)sets Availability to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Availability value is set to nil even if false is passed
func (o *MicrosoftGraphAttendeeAvailability) SetAvailabilityExplicitNull(b bool) {
	o.Availability = nil
	o.isExplicitNullAvailability = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphAttendeeAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attendee == nil {
		if o.isExplicitNullAttendee {
			toSerialize["attendee"] = o.Attendee
		}
	} else {
		toSerialize["attendee"] = o.Attendee
	}
	if o.Availability == nil {
		if o.isExplicitNullAvailability {
			toSerialize["availability"] = o.Availability
		}
	} else {
		toSerialize["availability"] = o.Availability
	}
	return json.Marshal(toSerialize)
}


