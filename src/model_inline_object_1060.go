/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject1060 struct for InlineObject1060
type InlineObject1060 struct {
	Cost *AnyOfobject `json:"cost,omitempty"`
	isExplicitNullCost bool `json:"-"`
	Salvage *AnyOfobject `json:"salvage,omitempty"`
	isExplicitNullSalvage bool `json:"-"`
	Life *AnyOfobject `json:"life,omitempty"`
	isExplicitNullLife bool `json:"-"`
	Per *AnyOfobject `json:"per,omitempty"`
	isExplicitNullPer bool `json:"-"`
}

// GetCost returns the Cost field if non-nil, zero value otherwise.
func (o *InlineObject1060) GetCost() AnyOfobject {
	if o == nil || o.Cost == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1060) GetCostOk() (AnyOfobject, bool) {
	if o == nil || o.Cost == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *InlineObject1060) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given AnyOfobject and assigns it to the Cost field.
func (o *InlineObject1060) SetCost(v AnyOfobject) {
	o.Cost = &v
}

// SetCostExplicitNull (un)sets Cost to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Cost value is set to nil even if false is passed
func (o *InlineObject1060) SetCostExplicitNull(b bool) {
	o.Cost = nil
	o.isExplicitNullCost = b
}
// GetSalvage returns the Salvage field if non-nil, zero value otherwise.
func (o *InlineObject1060) GetSalvage() AnyOfobject {
	if o == nil || o.Salvage == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Salvage
}

// GetSalvageOk returns a tuple with the Salvage field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1060) GetSalvageOk() (AnyOfobject, bool) {
	if o == nil || o.Salvage == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Salvage, true
}

// HasSalvage returns a boolean if a field has been set.
func (o *InlineObject1060) HasSalvage() bool {
	if o != nil && o.Salvage != nil {
		return true
	}

	return false
}

// SetSalvage gets a reference to the given AnyOfobject and assigns it to the Salvage field.
func (o *InlineObject1060) SetSalvage(v AnyOfobject) {
	o.Salvage = &v
}

// SetSalvageExplicitNull (un)sets Salvage to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Salvage value is set to nil even if false is passed
func (o *InlineObject1060) SetSalvageExplicitNull(b bool) {
	o.Salvage = nil
	o.isExplicitNullSalvage = b
}
// GetLife returns the Life field if non-nil, zero value otherwise.
func (o *InlineObject1060) GetLife() AnyOfobject {
	if o == nil || o.Life == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Life
}

// GetLifeOk returns a tuple with the Life field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1060) GetLifeOk() (AnyOfobject, bool) {
	if o == nil || o.Life == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Life, true
}

// HasLife returns a boolean if a field has been set.
func (o *InlineObject1060) HasLife() bool {
	if o != nil && o.Life != nil {
		return true
	}

	return false
}

// SetLife gets a reference to the given AnyOfobject and assigns it to the Life field.
func (o *InlineObject1060) SetLife(v AnyOfobject) {
	o.Life = &v
}

// SetLifeExplicitNull (un)sets Life to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Life value is set to nil even if false is passed
func (o *InlineObject1060) SetLifeExplicitNull(b bool) {
	o.Life = nil
	o.isExplicitNullLife = b
}
// GetPer returns the Per field if non-nil, zero value otherwise.
func (o *InlineObject1060) GetPer() AnyOfobject {
	if o == nil || o.Per == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1060) GetPerOk() (AnyOfobject, bool) {
	if o == nil || o.Per == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *InlineObject1060) HasPer() bool {
	if o != nil && o.Per != nil {
		return true
	}

	return false
}

// SetPer gets a reference to the given AnyOfobject and assigns it to the Per field.
func (o *InlineObject1060) SetPer(v AnyOfobject) {
	o.Per = &v
}

// SetPerExplicitNull (un)sets Per to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Per value is set to nil even if false is passed
func (o *InlineObject1060) SetPerExplicitNull(b bool) {
	o.Per = nil
	o.isExplicitNullPer = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject1060) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost == nil {
		if o.isExplicitNullCost {
			toSerialize["cost"] = o.Cost
		}
	} else {
		toSerialize["cost"] = o.Cost
	}
	if o.Salvage == nil {
		if o.isExplicitNullSalvage {
			toSerialize["salvage"] = o.Salvage
		}
	} else {
		toSerialize["salvage"] = o.Salvage
	}
	if o.Life == nil {
		if o.isExplicitNullLife {
			toSerialize["life"] = o.Life
		}
	} else {
		toSerialize["life"] = o.Life
	}
	if o.Per == nil {
		if o.isExplicitNullPer {
			toSerialize["per"] = o.Per
		}
	} else {
		toSerialize["per"] = o.Per
	}
	return json.Marshal(toSerialize)
}


