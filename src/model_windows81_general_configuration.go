/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// Windows81GeneralConfiguration This topic provides descriptions of the declared methods, properties and relationships exposed by the windows81GeneralConfiguration resource.
type Windows81GeneralConfiguration struct {
	// Indicates whether or not to Block the user from adding email accounts to the device that are not associated with a Microsoft account.
	AccountsBlockAddingNonMicrosoftAccountEmail *bool `json:"accountsBlockAddingNonMicrosoftAccountEmail,omitempty"`

	// Value indicating whether this policy only applies to Windows 8.1. This property is read-only.
	ApplyOnlyToWindows81 *bool `json:"applyOnlyToWindows81,omitempty"`

	// Indicates whether or not to block auto fill.
	BrowserBlockAutofill *bool `json:"browserBlockAutofill,omitempty"`

	// Indicates whether or not to block automatic detection of Intranet sites.
	BrowserBlockAutomaticDetectionOfIntranetSites *bool `json:"browserBlockAutomaticDetectionOfIntranetSites,omitempty"`

	// Indicates whether or not to block enterprise mode access.
	BrowserBlockEnterpriseModeAccess *bool `json:"browserBlockEnterpriseModeAccess,omitempty"`

	// Indicates whether or not to Block the user from using JavaScript.
	BrowserBlockJavaScript *bool `json:"browserBlockJavaScript,omitempty"`

	// Indicates whether or not to block plug-ins.
	BrowserBlockPlugins *bool `json:"browserBlockPlugins,omitempty"`

	// Indicates whether or not to block popups.
	BrowserBlockPopups *bool `json:"browserBlockPopups,omitempty"`

	// Indicates whether or not to Block the user from sending the do not track header.
	BrowserBlockSendingDoNotTrackHeader *bool `json:"browserBlockSendingDoNotTrackHeader,omitempty"`

	// Indicates whether or not to block a single word entry on Intranet sites.
	BrowserBlockSingleWordEntryOnIntranetSites *bool `json:"browserBlockSingleWordEntryOnIntranetSites,omitempty"`

	// Indicates whether or not to require the user to use the smart screen filter.
	BrowserRequireSmartScreen *bool `json:"browserRequireSmartScreen,omitempty"`

	// The enterprise mode site list location. Could be a local file, local network or http location.
	BrowserEnterpriseModeSiteListLocation *string `json:"browserEnterpriseModeSiteListLocation,omitempty"`
	isExplicitNullBrowserEnterpriseModeSiteListLocation bool `json:"-"`
	// The internet security level.
	BrowserInternetSecurityLevel *AnyOfmicrosoftGraphInternetSiteSecurityLevel `json:"browserInternetSecurityLevel,omitempty"`

	// The Intranet security level.
	BrowserIntranetSecurityLevel *AnyOfmicrosoftGraphSiteSecurityLevel `json:"browserIntranetSecurityLevel,omitempty"`

	// The logging report location.
	BrowserLoggingReportLocation *string `json:"browserLoggingReportLocation,omitempty"`
	isExplicitNullBrowserLoggingReportLocation bool `json:"-"`
	// Indicates whether or not to require high security for restricted sites.
	BrowserRequireHighSecurityForRestrictedSites *bool `json:"browserRequireHighSecurityForRestrictedSites,omitempty"`

	// Indicates whether or not to require a firewall.
	BrowserRequireFirewall *bool `json:"browserRequireFirewall,omitempty"`

	// Indicates whether or not to require fraud warning.
	BrowserRequireFraudWarning *bool `json:"browserRequireFraudWarning,omitempty"`

	// The trusted sites security level.
	BrowserTrustedSitesSecurityLevel *AnyOfmicrosoftGraphSiteSecurityLevel `json:"browserTrustedSitesSecurityLevel,omitempty"`

	// Indicates whether or not to block data roaming.
	CellularBlockDataRoaming *bool `json:"cellularBlockDataRoaming,omitempty"`

	// Indicates whether or not to block diagnostic data submission.
	DiagnosticsBlockDataSubmission *bool `json:"diagnosticsBlockDataSubmission,omitempty"`

	// Indicates whether or not to Block the user from using a pictures password and pin.
	PasswordBlockPicturePasswordAndPin *bool `json:"passwordBlockPicturePasswordAndPin,omitempty"`

	// Password expiration in days.
	PasswordExpirationDays *int32 `json:"passwordExpirationDays,omitempty"`
	isExplicitNullPasswordExpirationDays bool `json:"-"`
	// The minimum password length.
	PasswordMinimumLength *int32 `json:"passwordMinimumLength,omitempty"`
	isExplicitNullPasswordMinimumLength bool `json:"-"`
	// The minutes of inactivity before the screen times out.
	PasswordMinutesOfInactivityBeforeScreenTimeout *int32 `json:"passwordMinutesOfInactivityBeforeScreenTimeout,omitempty"`
	isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout bool `json:"-"`
	// The number of character sets required in the password.
	PasswordMinimumCharacterSetCount *int32 `json:"passwordMinimumCharacterSetCount,omitempty"`
	isExplicitNullPasswordMinimumCharacterSetCount bool `json:"-"`
	// The number of previous passwords to prevent re-use of. Valid values 0 to 24
	PasswordPreviousPasswordBlockCount *int32 `json:"passwordPreviousPasswordBlockCount,omitempty"`
	isExplicitNullPasswordPreviousPasswordBlockCount bool `json:"-"`
	// The required password type.
	PasswordRequiredType *AnyOfmicrosoftGraphRequiredPasswordType `json:"passwordRequiredType,omitempty"`

	// The number of sign in failures before factory reset.
	PasswordSignInFailureCountBeforeFactoryReset *int32 `json:"passwordSignInFailureCountBeforeFactoryReset,omitempty"`
	isExplicitNullPasswordSignInFailureCountBeforeFactoryReset bool `json:"-"`
	// Indicates whether or not to require encryption on a mobile device.
	StorageRequireDeviceEncryption *bool `json:"storageRequireDeviceEncryption,omitempty"`

	// Indicates whether or not to require automatic updates.
	UpdatesRequireAutomaticUpdates *bool `json:"updatesRequireAutomaticUpdates,omitempty"`

	// The user account control settings.
	UserAccountControlSettings *AnyOfmicrosoftGraphWindowsUserAccountControlSettings `json:"userAccountControlSettings,omitempty"`

	// The work folders url.
	WorkFoldersUrl *string `json:"workFoldersUrl,omitempty"`
	isExplicitNullWorkFoldersUrl bool `json:"-"`
}

// GetAccountsBlockAddingNonMicrosoftAccountEmail returns the AccountsBlockAddingNonMicrosoftAccountEmail field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetAccountsBlockAddingNonMicrosoftAccountEmail() bool {
	if o == nil || o.AccountsBlockAddingNonMicrosoftAccountEmail == nil {
		var ret bool
		return ret
	}
	return *o.AccountsBlockAddingNonMicrosoftAccountEmail
}

// GetAccountsBlockAddingNonMicrosoftAccountEmailOk returns a tuple with the AccountsBlockAddingNonMicrosoftAccountEmail field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetAccountsBlockAddingNonMicrosoftAccountEmailOk() (bool, bool) {
	if o == nil || o.AccountsBlockAddingNonMicrosoftAccountEmail == nil {
		var ret bool
		return ret, false
	}
	return *o.AccountsBlockAddingNonMicrosoftAccountEmail, true
}

// HasAccountsBlockAddingNonMicrosoftAccountEmail returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasAccountsBlockAddingNonMicrosoftAccountEmail() bool {
	if o != nil && o.AccountsBlockAddingNonMicrosoftAccountEmail != nil {
		return true
	}

	return false
}

// SetAccountsBlockAddingNonMicrosoftAccountEmail gets a reference to the given bool and assigns it to the AccountsBlockAddingNonMicrosoftAccountEmail field.
func (o *Windows81GeneralConfiguration) SetAccountsBlockAddingNonMicrosoftAccountEmail(v bool) {
	o.AccountsBlockAddingNonMicrosoftAccountEmail = &v
}

// GetApplyOnlyToWindows81 returns the ApplyOnlyToWindows81 field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetApplyOnlyToWindows81() bool {
	if o == nil || o.ApplyOnlyToWindows81 == nil {
		var ret bool
		return ret
	}
	return *o.ApplyOnlyToWindows81
}

// GetApplyOnlyToWindows81Ok returns a tuple with the ApplyOnlyToWindows81 field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetApplyOnlyToWindows81Ok() (bool, bool) {
	if o == nil || o.ApplyOnlyToWindows81 == nil {
		var ret bool
		return ret, false
	}
	return *o.ApplyOnlyToWindows81, true
}

// HasApplyOnlyToWindows81 returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasApplyOnlyToWindows81() bool {
	if o != nil && o.ApplyOnlyToWindows81 != nil {
		return true
	}

	return false
}

// SetApplyOnlyToWindows81 gets a reference to the given bool and assigns it to the ApplyOnlyToWindows81 field.
func (o *Windows81GeneralConfiguration) SetApplyOnlyToWindows81(v bool) {
	o.ApplyOnlyToWindows81 = &v
}

// GetBrowserBlockAutofill returns the BrowserBlockAutofill field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockAutofill() bool {
	if o == nil || o.BrowserBlockAutofill == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockAutofill
}

// GetBrowserBlockAutofillOk returns a tuple with the BrowserBlockAutofill field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockAutofillOk() (bool, bool) {
	if o == nil || o.BrowserBlockAutofill == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockAutofill, true
}

// HasBrowserBlockAutofill returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockAutofill() bool {
	if o != nil && o.BrowserBlockAutofill != nil {
		return true
	}

	return false
}

// SetBrowserBlockAutofill gets a reference to the given bool and assigns it to the BrowserBlockAutofill field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockAutofill(v bool) {
	o.BrowserBlockAutofill = &v
}

// GetBrowserBlockAutomaticDetectionOfIntranetSites returns the BrowserBlockAutomaticDetectionOfIntranetSites field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockAutomaticDetectionOfIntranetSites() bool {
	if o == nil || o.BrowserBlockAutomaticDetectionOfIntranetSites == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockAutomaticDetectionOfIntranetSites
}

// GetBrowserBlockAutomaticDetectionOfIntranetSitesOk returns a tuple with the BrowserBlockAutomaticDetectionOfIntranetSites field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockAutomaticDetectionOfIntranetSitesOk() (bool, bool) {
	if o == nil || o.BrowserBlockAutomaticDetectionOfIntranetSites == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockAutomaticDetectionOfIntranetSites, true
}

// HasBrowserBlockAutomaticDetectionOfIntranetSites returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockAutomaticDetectionOfIntranetSites() bool {
	if o != nil && o.BrowserBlockAutomaticDetectionOfIntranetSites != nil {
		return true
	}

	return false
}

// SetBrowserBlockAutomaticDetectionOfIntranetSites gets a reference to the given bool and assigns it to the BrowserBlockAutomaticDetectionOfIntranetSites field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockAutomaticDetectionOfIntranetSites(v bool) {
	o.BrowserBlockAutomaticDetectionOfIntranetSites = &v
}

// GetBrowserBlockEnterpriseModeAccess returns the BrowserBlockEnterpriseModeAccess field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockEnterpriseModeAccess() bool {
	if o == nil || o.BrowserBlockEnterpriseModeAccess == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockEnterpriseModeAccess
}

// GetBrowserBlockEnterpriseModeAccessOk returns a tuple with the BrowserBlockEnterpriseModeAccess field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockEnterpriseModeAccessOk() (bool, bool) {
	if o == nil || o.BrowserBlockEnterpriseModeAccess == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockEnterpriseModeAccess, true
}

// HasBrowserBlockEnterpriseModeAccess returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockEnterpriseModeAccess() bool {
	if o != nil && o.BrowserBlockEnterpriseModeAccess != nil {
		return true
	}

	return false
}

// SetBrowserBlockEnterpriseModeAccess gets a reference to the given bool and assigns it to the BrowserBlockEnterpriseModeAccess field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockEnterpriseModeAccess(v bool) {
	o.BrowserBlockEnterpriseModeAccess = &v
}

// GetBrowserBlockJavaScript returns the BrowserBlockJavaScript field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockJavaScript() bool {
	if o == nil || o.BrowserBlockJavaScript == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockJavaScript
}

// GetBrowserBlockJavaScriptOk returns a tuple with the BrowserBlockJavaScript field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockJavaScriptOk() (bool, bool) {
	if o == nil || o.BrowserBlockJavaScript == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockJavaScript, true
}

// HasBrowserBlockJavaScript returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockJavaScript() bool {
	if o != nil && o.BrowserBlockJavaScript != nil {
		return true
	}

	return false
}

// SetBrowserBlockJavaScript gets a reference to the given bool and assigns it to the BrowserBlockJavaScript field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockJavaScript(v bool) {
	o.BrowserBlockJavaScript = &v
}

// GetBrowserBlockPlugins returns the BrowserBlockPlugins field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockPlugins() bool {
	if o == nil || o.BrowserBlockPlugins == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockPlugins
}

// GetBrowserBlockPluginsOk returns a tuple with the BrowserBlockPlugins field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockPluginsOk() (bool, bool) {
	if o == nil || o.BrowserBlockPlugins == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockPlugins, true
}

// HasBrowserBlockPlugins returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockPlugins() bool {
	if o != nil && o.BrowserBlockPlugins != nil {
		return true
	}

	return false
}

// SetBrowserBlockPlugins gets a reference to the given bool and assigns it to the BrowserBlockPlugins field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockPlugins(v bool) {
	o.BrowserBlockPlugins = &v
}

// GetBrowserBlockPopups returns the BrowserBlockPopups field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockPopups() bool {
	if o == nil || o.BrowserBlockPopups == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockPopups
}

// GetBrowserBlockPopupsOk returns a tuple with the BrowserBlockPopups field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockPopupsOk() (bool, bool) {
	if o == nil || o.BrowserBlockPopups == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockPopups, true
}

// HasBrowserBlockPopups returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockPopups() bool {
	if o != nil && o.BrowserBlockPopups != nil {
		return true
	}

	return false
}

// SetBrowserBlockPopups gets a reference to the given bool and assigns it to the BrowserBlockPopups field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockPopups(v bool) {
	o.BrowserBlockPopups = &v
}

// GetBrowserBlockSendingDoNotTrackHeader returns the BrowserBlockSendingDoNotTrackHeader field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockSendingDoNotTrackHeader() bool {
	if o == nil || o.BrowserBlockSendingDoNotTrackHeader == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockSendingDoNotTrackHeader
}

// GetBrowserBlockSendingDoNotTrackHeaderOk returns a tuple with the BrowserBlockSendingDoNotTrackHeader field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockSendingDoNotTrackHeaderOk() (bool, bool) {
	if o == nil || o.BrowserBlockSendingDoNotTrackHeader == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockSendingDoNotTrackHeader, true
}

// HasBrowserBlockSendingDoNotTrackHeader returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockSendingDoNotTrackHeader() bool {
	if o != nil && o.BrowserBlockSendingDoNotTrackHeader != nil {
		return true
	}

	return false
}

// SetBrowserBlockSendingDoNotTrackHeader gets a reference to the given bool and assigns it to the BrowserBlockSendingDoNotTrackHeader field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockSendingDoNotTrackHeader(v bool) {
	o.BrowserBlockSendingDoNotTrackHeader = &v
}

// GetBrowserBlockSingleWordEntryOnIntranetSites returns the BrowserBlockSingleWordEntryOnIntranetSites field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserBlockSingleWordEntryOnIntranetSites() bool {
	if o == nil || o.BrowserBlockSingleWordEntryOnIntranetSites == nil {
		var ret bool
		return ret
	}
	return *o.BrowserBlockSingleWordEntryOnIntranetSites
}

// GetBrowserBlockSingleWordEntryOnIntranetSitesOk returns a tuple with the BrowserBlockSingleWordEntryOnIntranetSites field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserBlockSingleWordEntryOnIntranetSitesOk() (bool, bool) {
	if o == nil || o.BrowserBlockSingleWordEntryOnIntranetSites == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserBlockSingleWordEntryOnIntranetSites, true
}

// HasBrowserBlockSingleWordEntryOnIntranetSites returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserBlockSingleWordEntryOnIntranetSites() bool {
	if o != nil && o.BrowserBlockSingleWordEntryOnIntranetSites != nil {
		return true
	}

	return false
}

// SetBrowserBlockSingleWordEntryOnIntranetSites gets a reference to the given bool and assigns it to the BrowserBlockSingleWordEntryOnIntranetSites field.
func (o *Windows81GeneralConfiguration) SetBrowserBlockSingleWordEntryOnIntranetSites(v bool) {
	o.BrowserBlockSingleWordEntryOnIntranetSites = &v
}

// GetBrowserRequireSmartScreen returns the BrowserRequireSmartScreen field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserRequireSmartScreen() bool {
	if o == nil || o.BrowserRequireSmartScreen == nil {
		var ret bool
		return ret
	}
	return *o.BrowserRequireSmartScreen
}

// GetBrowserRequireSmartScreenOk returns a tuple with the BrowserRequireSmartScreen field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserRequireSmartScreenOk() (bool, bool) {
	if o == nil || o.BrowserRequireSmartScreen == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserRequireSmartScreen, true
}

// HasBrowserRequireSmartScreen returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserRequireSmartScreen() bool {
	if o != nil && o.BrowserRequireSmartScreen != nil {
		return true
	}

	return false
}

// SetBrowserRequireSmartScreen gets a reference to the given bool and assigns it to the BrowserRequireSmartScreen field.
func (o *Windows81GeneralConfiguration) SetBrowserRequireSmartScreen(v bool) {
	o.BrowserRequireSmartScreen = &v
}

// GetBrowserEnterpriseModeSiteListLocation returns the BrowserEnterpriseModeSiteListLocation field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserEnterpriseModeSiteListLocation() string {
	if o == nil || o.BrowserEnterpriseModeSiteListLocation == nil {
		var ret string
		return ret
	}
	return *o.BrowserEnterpriseModeSiteListLocation
}

// GetBrowserEnterpriseModeSiteListLocationOk returns a tuple with the BrowserEnterpriseModeSiteListLocation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserEnterpriseModeSiteListLocationOk() (string, bool) {
	if o == nil || o.BrowserEnterpriseModeSiteListLocation == nil {
		var ret string
		return ret, false
	}
	return *o.BrowserEnterpriseModeSiteListLocation, true
}

// HasBrowserEnterpriseModeSiteListLocation returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserEnterpriseModeSiteListLocation() bool {
	if o != nil && o.BrowserEnterpriseModeSiteListLocation != nil {
		return true
	}

	return false
}

// SetBrowserEnterpriseModeSiteListLocation gets a reference to the given string and assigns it to the BrowserEnterpriseModeSiteListLocation field.
func (o *Windows81GeneralConfiguration) SetBrowserEnterpriseModeSiteListLocation(v string) {
	o.BrowserEnterpriseModeSiteListLocation = &v
}

// SetBrowserEnterpriseModeSiteListLocationExplicitNull (un)sets BrowserEnterpriseModeSiteListLocation to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The BrowserEnterpriseModeSiteListLocation value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetBrowserEnterpriseModeSiteListLocationExplicitNull(b bool) {
	o.BrowserEnterpriseModeSiteListLocation = nil
	o.isExplicitNullBrowserEnterpriseModeSiteListLocation = b
}
// GetBrowserInternetSecurityLevel returns the BrowserInternetSecurityLevel field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserInternetSecurityLevel() AnyOfmicrosoftGraphInternetSiteSecurityLevel {
	if o == nil || o.BrowserInternetSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphInternetSiteSecurityLevel
		return ret
	}
	return *o.BrowserInternetSecurityLevel
}

// GetBrowserInternetSecurityLevelOk returns a tuple with the BrowserInternetSecurityLevel field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserInternetSecurityLevelOk() (AnyOfmicrosoftGraphInternetSiteSecurityLevel, bool) {
	if o == nil || o.BrowserInternetSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphInternetSiteSecurityLevel
		return ret, false
	}
	return *o.BrowserInternetSecurityLevel, true
}

// HasBrowserInternetSecurityLevel returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserInternetSecurityLevel() bool {
	if o != nil && o.BrowserInternetSecurityLevel != nil {
		return true
	}

	return false
}

// SetBrowserInternetSecurityLevel gets a reference to the given AnyOfmicrosoftGraphInternetSiteSecurityLevel and assigns it to the BrowserInternetSecurityLevel field.
func (o *Windows81GeneralConfiguration) SetBrowserInternetSecurityLevel(v AnyOfmicrosoftGraphInternetSiteSecurityLevel) {
	o.BrowserInternetSecurityLevel = &v
}

// GetBrowserIntranetSecurityLevel returns the BrowserIntranetSecurityLevel field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserIntranetSecurityLevel() AnyOfmicrosoftGraphSiteSecurityLevel {
	if o == nil || o.BrowserIntranetSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphSiteSecurityLevel
		return ret
	}
	return *o.BrowserIntranetSecurityLevel
}

// GetBrowserIntranetSecurityLevelOk returns a tuple with the BrowserIntranetSecurityLevel field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserIntranetSecurityLevelOk() (AnyOfmicrosoftGraphSiteSecurityLevel, bool) {
	if o == nil || o.BrowserIntranetSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphSiteSecurityLevel
		return ret, false
	}
	return *o.BrowserIntranetSecurityLevel, true
}

// HasBrowserIntranetSecurityLevel returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserIntranetSecurityLevel() bool {
	if o != nil && o.BrowserIntranetSecurityLevel != nil {
		return true
	}

	return false
}

// SetBrowserIntranetSecurityLevel gets a reference to the given AnyOfmicrosoftGraphSiteSecurityLevel and assigns it to the BrowserIntranetSecurityLevel field.
func (o *Windows81GeneralConfiguration) SetBrowserIntranetSecurityLevel(v AnyOfmicrosoftGraphSiteSecurityLevel) {
	o.BrowserIntranetSecurityLevel = &v
}

// GetBrowserLoggingReportLocation returns the BrowserLoggingReportLocation field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserLoggingReportLocation() string {
	if o == nil || o.BrowserLoggingReportLocation == nil {
		var ret string
		return ret
	}
	return *o.BrowserLoggingReportLocation
}

// GetBrowserLoggingReportLocationOk returns a tuple with the BrowserLoggingReportLocation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserLoggingReportLocationOk() (string, bool) {
	if o == nil || o.BrowserLoggingReportLocation == nil {
		var ret string
		return ret, false
	}
	return *o.BrowserLoggingReportLocation, true
}

// HasBrowserLoggingReportLocation returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserLoggingReportLocation() bool {
	if o != nil && o.BrowserLoggingReportLocation != nil {
		return true
	}

	return false
}

// SetBrowserLoggingReportLocation gets a reference to the given string and assigns it to the BrowserLoggingReportLocation field.
func (o *Windows81GeneralConfiguration) SetBrowserLoggingReportLocation(v string) {
	o.BrowserLoggingReportLocation = &v
}

// SetBrowserLoggingReportLocationExplicitNull (un)sets BrowserLoggingReportLocation to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The BrowserLoggingReportLocation value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetBrowserLoggingReportLocationExplicitNull(b bool) {
	o.BrowserLoggingReportLocation = nil
	o.isExplicitNullBrowserLoggingReportLocation = b
}
// GetBrowserRequireHighSecurityForRestrictedSites returns the BrowserRequireHighSecurityForRestrictedSites field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserRequireHighSecurityForRestrictedSites() bool {
	if o == nil || o.BrowserRequireHighSecurityForRestrictedSites == nil {
		var ret bool
		return ret
	}
	return *o.BrowserRequireHighSecurityForRestrictedSites
}

// GetBrowserRequireHighSecurityForRestrictedSitesOk returns a tuple with the BrowserRequireHighSecurityForRestrictedSites field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserRequireHighSecurityForRestrictedSitesOk() (bool, bool) {
	if o == nil || o.BrowserRequireHighSecurityForRestrictedSites == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserRequireHighSecurityForRestrictedSites, true
}

// HasBrowserRequireHighSecurityForRestrictedSites returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserRequireHighSecurityForRestrictedSites() bool {
	if o != nil && o.BrowserRequireHighSecurityForRestrictedSites != nil {
		return true
	}

	return false
}

// SetBrowserRequireHighSecurityForRestrictedSites gets a reference to the given bool and assigns it to the BrowserRequireHighSecurityForRestrictedSites field.
func (o *Windows81GeneralConfiguration) SetBrowserRequireHighSecurityForRestrictedSites(v bool) {
	o.BrowserRequireHighSecurityForRestrictedSites = &v
}

// GetBrowserRequireFirewall returns the BrowserRequireFirewall field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserRequireFirewall() bool {
	if o == nil || o.BrowserRequireFirewall == nil {
		var ret bool
		return ret
	}
	return *o.BrowserRequireFirewall
}

// GetBrowserRequireFirewallOk returns a tuple with the BrowserRequireFirewall field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserRequireFirewallOk() (bool, bool) {
	if o == nil || o.BrowserRequireFirewall == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserRequireFirewall, true
}

// HasBrowserRequireFirewall returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserRequireFirewall() bool {
	if o != nil && o.BrowserRequireFirewall != nil {
		return true
	}

	return false
}

// SetBrowserRequireFirewall gets a reference to the given bool and assigns it to the BrowserRequireFirewall field.
func (o *Windows81GeneralConfiguration) SetBrowserRequireFirewall(v bool) {
	o.BrowserRequireFirewall = &v
}

// GetBrowserRequireFraudWarning returns the BrowserRequireFraudWarning field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserRequireFraudWarning() bool {
	if o == nil || o.BrowserRequireFraudWarning == nil {
		var ret bool
		return ret
	}
	return *o.BrowserRequireFraudWarning
}

// GetBrowserRequireFraudWarningOk returns a tuple with the BrowserRequireFraudWarning field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserRequireFraudWarningOk() (bool, bool) {
	if o == nil || o.BrowserRequireFraudWarning == nil {
		var ret bool
		return ret, false
	}
	return *o.BrowserRequireFraudWarning, true
}

// HasBrowserRequireFraudWarning returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserRequireFraudWarning() bool {
	if o != nil && o.BrowserRequireFraudWarning != nil {
		return true
	}

	return false
}

// SetBrowserRequireFraudWarning gets a reference to the given bool and assigns it to the BrowserRequireFraudWarning field.
func (o *Windows81GeneralConfiguration) SetBrowserRequireFraudWarning(v bool) {
	o.BrowserRequireFraudWarning = &v
}

// GetBrowserTrustedSitesSecurityLevel returns the BrowserTrustedSitesSecurityLevel field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetBrowserTrustedSitesSecurityLevel() AnyOfmicrosoftGraphSiteSecurityLevel {
	if o == nil || o.BrowserTrustedSitesSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphSiteSecurityLevel
		return ret
	}
	return *o.BrowserTrustedSitesSecurityLevel
}

// GetBrowserTrustedSitesSecurityLevelOk returns a tuple with the BrowserTrustedSitesSecurityLevel field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetBrowserTrustedSitesSecurityLevelOk() (AnyOfmicrosoftGraphSiteSecurityLevel, bool) {
	if o == nil || o.BrowserTrustedSitesSecurityLevel == nil {
		var ret AnyOfmicrosoftGraphSiteSecurityLevel
		return ret, false
	}
	return *o.BrowserTrustedSitesSecurityLevel, true
}

// HasBrowserTrustedSitesSecurityLevel returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasBrowserTrustedSitesSecurityLevel() bool {
	if o != nil && o.BrowserTrustedSitesSecurityLevel != nil {
		return true
	}

	return false
}

// SetBrowserTrustedSitesSecurityLevel gets a reference to the given AnyOfmicrosoftGraphSiteSecurityLevel and assigns it to the BrowserTrustedSitesSecurityLevel field.
func (o *Windows81GeneralConfiguration) SetBrowserTrustedSitesSecurityLevel(v AnyOfmicrosoftGraphSiteSecurityLevel) {
	o.BrowserTrustedSitesSecurityLevel = &v
}

// GetCellularBlockDataRoaming returns the CellularBlockDataRoaming field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetCellularBlockDataRoaming() bool {
	if o == nil || o.CellularBlockDataRoaming == nil {
		var ret bool
		return ret
	}
	return *o.CellularBlockDataRoaming
}

// GetCellularBlockDataRoamingOk returns a tuple with the CellularBlockDataRoaming field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetCellularBlockDataRoamingOk() (bool, bool) {
	if o == nil || o.CellularBlockDataRoaming == nil {
		var ret bool
		return ret, false
	}
	return *o.CellularBlockDataRoaming, true
}

// HasCellularBlockDataRoaming returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasCellularBlockDataRoaming() bool {
	if o != nil && o.CellularBlockDataRoaming != nil {
		return true
	}

	return false
}

// SetCellularBlockDataRoaming gets a reference to the given bool and assigns it to the CellularBlockDataRoaming field.
func (o *Windows81GeneralConfiguration) SetCellularBlockDataRoaming(v bool) {
	o.CellularBlockDataRoaming = &v
}

// GetDiagnosticsBlockDataSubmission returns the DiagnosticsBlockDataSubmission field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetDiagnosticsBlockDataSubmission() bool {
	if o == nil || o.DiagnosticsBlockDataSubmission == nil {
		var ret bool
		return ret
	}
	return *o.DiagnosticsBlockDataSubmission
}

// GetDiagnosticsBlockDataSubmissionOk returns a tuple with the DiagnosticsBlockDataSubmission field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetDiagnosticsBlockDataSubmissionOk() (bool, bool) {
	if o == nil || o.DiagnosticsBlockDataSubmission == nil {
		var ret bool
		return ret, false
	}
	return *o.DiagnosticsBlockDataSubmission, true
}

// HasDiagnosticsBlockDataSubmission returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasDiagnosticsBlockDataSubmission() bool {
	if o != nil && o.DiagnosticsBlockDataSubmission != nil {
		return true
	}

	return false
}

// SetDiagnosticsBlockDataSubmission gets a reference to the given bool and assigns it to the DiagnosticsBlockDataSubmission field.
func (o *Windows81GeneralConfiguration) SetDiagnosticsBlockDataSubmission(v bool) {
	o.DiagnosticsBlockDataSubmission = &v
}

// GetPasswordBlockPicturePasswordAndPin returns the PasswordBlockPicturePasswordAndPin field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordBlockPicturePasswordAndPin() bool {
	if o == nil || o.PasswordBlockPicturePasswordAndPin == nil {
		var ret bool
		return ret
	}
	return *o.PasswordBlockPicturePasswordAndPin
}

// GetPasswordBlockPicturePasswordAndPinOk returns a tuple with the PasswordBlockPicturePasswordAndPin field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordBlockPicturePasswordAndPinOk() (bool, bool) {
	if o == nil || o.PasswordBlockPicturePasswordAndPin == nil {
		var ret bool
		return ret, false
	}
	return *o.PasswordBlockPicturePasswordAndPin, true
}

// HasPasswordBlockPicturePasswordAndPin returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordBlockPicturePasswordAndPin() bool {
	if o != nil && o.PasswordBlockPicturePasswordAndPin != nil {
		return true
	}

	return false
}

// SetPasswordBlockPicturePasswordAndPin gets a reference to the given bool and assigns it to the PasswordBlockPicturePasswordAndPin field.
func (o *Windows81GeneralConfiguration) SetPasswordBlockPicturePasswordAndPin(v bool) {
	o.PasswordBlockPicturePasswordAndPin = &v
}

// GetPasswordExpirationDays returns the PasswordExpirationDays field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordExpirationDays() int32 {
	if o == nil || o.PasswordExpirationDays == nil {
		var ret int32
		return ret
	}
	return *o.PasswordExpirationDays
}

// GetPasswordExpirationDaysOk returns a tuple with the PasswordExpirationDays field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordExpirationDaysOk() (int32, bool) {
	if o == nil || o.PasswordExpirationDays == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordExpirationDays, true
}

// HasPasswordExpirationDays returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordExpirationDays() bool {
	if o != nil && o.PasswordExpirationDays != nil {
		return true
	}

	return false
}

// SetPasswordExpirationDays gets a reference to the given int32 and assigns it to the PasswordExpirationDays field.
func (o *Windows81GeneralConfiguration) SetPasswordExpirationDays(v int32) {
	o.PasswordExpirationDays = &v
}

// SetPasswordExpirationDaysExplicitNull (un)sets PasswordExpirationDays to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordExpirationDays value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordExpirationDaysExplicitNull(b bool) {
	o.PasswordExpirationDays = nil
	o.isExplicitNullPasswordExpirationDays = b
}
// GetPasswordMinimumLength returns the PasswordMinimumLength field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordMinimumLength() int32 {
	if o == nil || o.PasswordMinimumLength == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinimumLength
}

// GetPasswordMinimumLengthOk returns a tuple with the PasswordMinimumLength field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordMinimumLengthOk() (int32, bool) {
	if o == nil || o.PasswordMinimumLength == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinimumLength, true
}

// HasPasswordMinimumLength returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordMinimumLength() bool {
	if o != nil && o.PasswordMinimumLength != nil {
		return true
	}

	return false
}

// SetPasswordMinimumLength gets a reference to the given int32 and assigns it to the PasswordMinimumLength field.
func (o *Windows81GeneralConfiguration) SetPasswordMinimumLength(v int32) {
	o.PasswordMinimumLength = &v
}

// SetPasswordMinimumLengthExplicitNull (un)sets PasswordMinimumLength to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinimumLength value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordMinimumLengthExplicitNull(b bool) {
	o.PasswordMinimumLength = nil
	o.isExplicitNullPasswordMinimumLength = b
}
// GetPasswordMinutesOfInactivityBeforeScreenTimeout returns the PasswordMinutesOfInactivityBeforeScreenTimeout field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordMinutesOfInactivityBeforeScreenTimeout() int32 {
	if o == nil || o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinutesOfInactivityBeforeScreenTimeout
}

// GetPasswordMinutesOfInactivityBeforeScreenTimeoutOk returns a tuple with the PasswordMinutesOfInactivityBeforeScreenTimeout field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordMinutesOfInactivityBeforeScreenTimeoutOk() (int32, bool) {
	if o == nil || o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinutesOfInactivityBeforeScreenTimeout, true
}

// HasPasswordMinutesOfInactivityBeforeScreenTimeout returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordMinutesOfInactivityBeforeScreenTimeout() bool {
	if o != nil && o.PasswordMinutesOfInactivityBeforeScreenTimeout != nil {
		return true
	}

	return false
}

// SetPasswordMinutesOfInactivityBeforeScreenTimeout gets a reference to the given int32 and assigns it to the PasswordMinutesOfInactivityBeforeScreenTimeout field.
func (o *Windows81GeneralConfiguration) SetPasswordMinutesOfInactivityBeforeScreenTimeout(v int32) {
	o.PasswordMinutesOfInactivityBeforeScreenTimeout = &v
}

// SetPasswordMinutesOfInactivityBeforeScreenTimeoutExplicitNull (un)sets PasswordMinutesOfInactivityBeforeScreenTimeout to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinutesOfInactivityBeforeScreenTimeout value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordMinutesOfInactivityBeforeScreenTimeoutExplicitNull(b bool) {
	o.PasswordMinutesOfInactivityBeforeScreenTimeout = nil
	o.isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout = b
}
// GetPasswordMinimumCharacterSetCount returns the PasswordMinimumCharacterSetCount field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordMinimumCharacterSetCount() int32 {
	if o == nil || o.PasswordMinimumCharacterSetCount == nil {
		var ret int32
		return ret
	}
	return *o.PasswordMinimumCharacterSetCount
}

// GetPasswordMinimumCharacterSetCountOk returns a tuple with the PasswordMinimumCharacterSetCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordMinimumCharacterSetCountOk() (int32, bool) {
	if o == nil || o.PasswordMinimumCharacterSetCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordMinimumCharacterSetCount, true
}

// HasPasswordMinimumCharacterSetCount returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordMinimumCharacterSetCount() bool {
	if o != nil && o.PasswordMinimumCharacterSetCount != nil {
		return true
	}

	return false
}

// SetPasswordMinimumCharacterSetCount gets a reference to the given int32 and assigns it to the PasswordMinimumCharacterSetCount field.
func (o *Windows81GeneralConfiguration) SetPasswordMinimumCharacterSetCount(v int32) {
	o.PasswordMinimumCharacterSetCount = &v
}

// SetPasswordMinimumCharacterSetCountExplicitNull (un)sets PasswordMinimumCharacterSetCount to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordMinimumCharacterSetCount value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordMinimumCharacterSetCountExplicitNull(b bool) {
	o.PasswordMinimumCharacterSetCount = nil
	o.isExplicitNullPasswordMinimumCharacterSetCount = b
}
// GetPasswordPreviousPasswordBlockCount returns the PasswordPreviousPasswordBlockCount field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordPreviousPasswordBlockCount() int32 {
	if o == nil || o.PasswordPreviousPasswordBlockCount == nil {
		var ret int32
		return ret
	}
	return *o.PasswordPreviousPasswordBlockCount
}

// GetPasswordPreviousPasswordBlockCountOk returns a tuple with the PasswordPreviousPasswordBlockCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordPreviousPasswordBlockCountOk() (int32, bool) {
	if o == nil || o.PasswordPreviousPasswordBlockCount == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordPreviousPasswordBlockCount, true
}

// HasPasswordPreviousPasswordBlockCount returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordPreviousPasswordBlockCount() bool {
	if o != nil && o.PasswordPreviousPasswordBlockCount != nil {
		return true
	}

	return false
}

// SetPasswordPreviousPasswordBlockCount gets a reference to the given int32 and assigns it to the PasswordPreviousPasswordBlockCount field.
func (o *Windows81GeneralConfiguration) SetPasswordPreviousPasswordBlockCount(v int32) {
	o.PasswordPreviousPasswordBlockCount = &v
}

// SetPasswordPreviousPasswordBlockCountExplicitNull (un)sets PasswordPreviousPasswordBlockCount to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordPreviousPasswordBlockCount value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordPreviousPasswordBlockCountExplicitNull(b bool) {
	o.PasswordPreviousPasswordBlockCount = nil
	o.isExplicitNullPasswordPreviousPasswordBlockCount = b
}
// GetPasswordRequiredType returns the PasswordRequiredType field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordRequiredType() AnyOfmicrosoftGraphRequiredPasswordType {
	if o == nil || o.PasswordRequiredType == nil {
		var ret AnyOfmicrosoftGraphRequiredPasswordType
		return ret
	}
	return *o.PasswordRequiredType
}

// GetPasswordRequiredTypeOk returns a tuple with the PasswordRequiredType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordRequiredTypeOk() (AnyOfmicrosoftGraphRequiredPasswordType, bool) {
	if o == nil || o.PasswordRequiredType == nil {
		var ret AnyOfmicrosoftGraphRequiredPasswordType
		return ret, false
	}
	return *o.PasswordRequiredType, true
}

// HasPasswordRequiredType returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordRequiredType() bool {
	if o != nil && o.PasswordRequiredType != nil {
		return true
	}

	return false
}

// SetPasswordRequiredType gets a reference to the given AnyOfmicrosoftGraphRequiredPasswordType and assigns it to the PasswordRequiredType field.
func (o *Windows81GeneralConfiguration) SetPasswordRequiredType(v AnyOfmicrosoftGraphRequiredPasswordType) {
	o.PasswordRequiredType = &v
}

// GetPasswordSignInFailureCountBeforeFactoryReset returns the PasswordSignInFailureCountBeforeFactoryReset field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetPasswordSignInFailureCountBeforeFactoryReset() int32 {
	if o == nil || o.PasswordSignInFailureCountBeforeFactoryReset == nil {
		var ret int32
		return ret
	}
	return *o.PasswordSignInFailureCountBeforeFactoryReset
}

// GetPasswordSignInFailureCountBeforeFactoryResetOk returns a tuple with the PasswordSignInFailureCountBeforeFactoryReset field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetPasswordSignInFailureCountBeforeFactoryResetOk() (int32, bool) {
	if o == nil || o.PasswordSignInFailureCountBeforeFactoryReset == nil {
		var ret int32
		return ret, false
	}
	return *o.PasswordSignInFailureCountBeforeFactoryReset, true
}

// HasPasswordSignInFailureCountBeforeFactoryReset returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasPasswordSignInFailureCountBeforeFactoryReset() bool {
	if o != nil && o.PasswordSignInFailureCountBeforeFactoryReset != nil {
		return true
	}

	return false
}

// SetPasswordSignInFailureCountBeforeFactoryReset gets a reference to the given int32 and assigns it to the PasswordSignInFailureCountBeforeFactoryReset field.
func (o *Windows81GeneralConfiguration) SetPasswordSignInFailureCountBeforeFactoryReset(v int32) {
	o.PasswordSignInFailureCountBeforeFactoryReset = &v
}

// SetPasswordSignInFailureCountBeforeFactoryResetExplicitNull (un)sets PasswordSignInFailureCountBeforeFactoryReset to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PasswordSignInFailureCountBeforeFactoryReset value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetPasswordSignInFailureCountBeforeFactoryResetExplicitNull(b bool) {
	o.PasswordSignInFailureCountBeforeFactoryReset = nil
	o.isExplicitNullPasswordSignInFailureCountBeforeFactoryReset = b
}
// GetStorageRequireDeviceEncryption returns the StorageRequireDeviceEncryption field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetStorageRequireDeviceEncryption() bool {
	if o == nil || o.StorageRequireDeviceEncryption == nil {
		var ret bool
		return ret
	}
	return *o.StorageRequireDeviceEncryption
}

// GetStorageRequireDeviceEncryptionOk returns a tuple with the StorageRequireDeviceEncryption field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetStorageRequireDeviceEncryptionOk() (bool, bool) {
	if o == nil || o.StorageRequireDeviceEncryption == nil {
		var ret bool
		return ret, false
	}
	return *o.StorageRequireDeviceEncryption, true
}

// HasStorageRequireDeviceEncryption returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasStorageRequireDeviceEncryption() bool {
	if o != nil && o.StorageRequireDeviceEncryption != nil {
		return true
	}

	return false
}

// SetStorageRequireDeviceEncryption gets a reference to the given bool and assigns it to the StorageRequireDeviceEncryption field.
func (o *Windows81GeneralConfiguration) SetStorageRequireDeviceEncryption(v bool) {
	o.StorageRequireDeviceEncryption = &v
}

// GetUpdatesRequireAutomaticUpdates returns the UpdatesRequireAutomaticUpdates field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetUpdatesRequireAutomaticUpdates() bool {
	if o == nil || o.UpdatesRequireAutomaticUpdates == nil {
		var ret bool
		return ret
	}
	return *o.UpdatesRequireAutomaticUpdates
}

// GetUpdatesRequireAutomaticUpdatesOk returns a tuple with the UpdatesRequireAutomaticUpdates field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetUpdatesRequireAutomaticUpdatesOk() (bool, bool) {
	if o == nil || o.UpdatesRequireAutomaticUpdates == nil {
		var ret bool
		return ret, false
	}
	return *o.UpdatesRequireAutomaticUpdates, true
}

// HasUpdatesRequireAutomaticUpdates returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasUpdatesRequireAutomaticUpdates() bool {
	if o != nil && o.UpdatesRequireAutomaticUpdates != nil {
		return true
	}

	return false
}

// SetUpdatesRequireAutomaticUpdates gets a reference to the given bool and assigns it to the UpdatesRequireAutomaticUpdates field.
func (o *Windows81GeneralConfiguration) SetUpdatesRequireAutomaticUpdates(v bool) {
	o.UpdatesRequireAutomaticUpdates = &v
}

// GetUserAccountControlSettings returns the UserAccountControlSettings field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetUserAccountControlSettings() AnyOfmicrosoftGraphWindowsUserAccountControlSettings {
	if o == nil || o.UserAccountControlSettings == nil {
		var ret AnyOfmicrosoftGraphWindowsUserAccountControlSettings
		return ret
	}
	return *o.UserAccountControlSettings
}

// GetUserAccountControlSettingsOk returns a tuple with the UserAccountControlSettings field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetUserAccountControlSettingsOk() (AnyOfmicrosoftGraphWindowsUserAccountControlSettings, bool) {
	if o == nil || o.UserAccountControlSettings == nil {
		var ret AnyOfmicrosoftGraphWindowsUserAccountControlSettings
		return ret, false
	}
	return *o.UserAccountControlSettings, true
}

// HasUserAccountControlSettings returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasUserAccountControlSettings() bool {
	if o != nil && o.UserAccountControlSettings != nil {
		return true
	}

	return false
}

// SetUserAccountControlSettings gets a reference to the given AnyOfmicrosoftGraphWindowsUserAccountControlSettings and assigns it to the UserAccountControlSettings field.
func (o *Windows81GeneralConfiguration) SetUserAccountControlSettings(v AnyOfmicrosoftGraphWindowsUserAccountControlSettings) {
	o.UserAccountControlSettings = &v
}

// GetWorkFoldersUrl returns the WorkFoldersUrl field if non-nil, zero value otherwise.
func (o *Windows81GeneralConfiguration) GetWorkFoldersUrl() string {
	if o == nil || o.WorkFoldersUrl == nil {
		var ret string
		return ret
	}
	return *o.WorkFoldersUrl
}

// GetWorkFoldersUrlOk returns a tuple with the WorkFoldersUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Windows81GeneralConfiguration) GetWorkFoldersUrlOk() (string, bool) {
	if o == nil || o.WorkFoldersUrl == nil {
		var ret string
		return ret, false
	}
	return *o.WorkFoldersUrl, true
}

// HasWorkFoldersUrl returns a boolean if a field has been set.
func (o *Windows81GeneralConfiguration) HasWorkFoldersUrl() bool {
	if o != nil && o.WorkFoldersUrl != nil {
		return true
	}

	return false
}

// SetWorkFoldersUrl gets a reference to the given string and assigns it to the WorkFoldersUrl field.
func (o *Windows81GeneralConfiguration) SetWorkFoldersUrl(v string) {
	o.WorkFoldersUrl = &v
}

// SetWorkFoldersUrlExplicitNull (un)sets WorkFoldersUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The WorkFoldersUrl value is set to nil even if false is passed
func (o *Windows81GeneralConfiguration) SetWorkFoldersUrlExplicitNull(b bool) {
	o.WorkFoldersUrl = nil
	o.isExplicitNullWorkFoldersUrl = b
}

// MarshalJSON returns the JSON representation of the model.
func (o Windows81GeneralConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountsBlockAddingNonMicrosoftAccountEmail != nil {
		toSerialize["accountsBlockAddingNonMicrosoftAccountEmail"] = o.AccountsBlockAddingNonMicrosoftAccountEmail
	}
	if o.ApplyOnlyToWindows81 != nil {
		toSerialize["applyOnlyToWindows81"] = o.ApplyOnlyToWindows81
	}
	if o.BrowserBlockAutofill != nil {
		toSerialize["browserBlockAutofill"] = o.BrowserBlockAutofill
	}
	if o.BrowserBlockAutomaticDetectionOfIntranetSites != nil {
		toSerialize["browserBlockAutomaticDetectionOfIntranetSites"] = o.BrowserBlockAutomaticDetectionOfIntranetSites
	}
	if o.BrowserBlockEnterpriseModeAccess != nil {
		toSerialize["browserBlockEnterpriseModeAccess"] = o.BrowserBlockEnterpriseModeAccess
	}
	if o.BrowserBlockJavaScript != nil {
		toSerialize["browserBlockJavaScript"] = o.BrowserBlockJavaScript
	}
	if o.BrowserBlockPlugins != nil {
		toSerialize["browserBlockPlugins"] = o.BrowserBlockPlugins
	}
	if o.BrowserBlockPopups != nil {
		toSerialize["browserBlockPopups"] = o.BrowserBlockPopups
	}
	if o.BrowserBlockSendingDoNotTrackHeader != nil {
		toSerialize["browserBlockSendingDoNotTrackHeader"] = o.BrowserBlockSendingDoNotTrackHeader
	}
	if o.BrowserBlockSingleWordEntryOnIntranetSites != nil {
		toSerialize["browserBlockSingleWordEntryOnIntranetSites"] = o.BrowserBlockSingleWordEntryOnIntranetSites
	}
	if o.BrowserRequireSmartScreen != nil {
		toSerialize["browserRequireSmartScreen"] = o.BrowserRequireSmartScreen
	}
	if o.BrowserEnterpriseModeSiteListLocation == nil {
		if o.isExplicitNullBrowserEnterpriseModeSiteListLocation {
			toSerialize["browserEnterpriseModeSiteListLocation"] = o.BrowserEnterpriseModeSiteListLocation
		}
	} else {
		toSerialize["browserEnterpriseModeSiteListLocation"] = o.BrowserEnterpriseModeSiteListLocation
	}
	if o.BrowserInternetSecurityLevel != nil {
		toSerialize["browserInternetSecurityLevel"] = o.BrowserInternetSecurityLevel
	}
	if o.BrowserIntranetSecurityLevel != nil {
		toSerialize["browserIntranetSecurityLevel"] = o.BrowserIntranetSecurityLevel
	}
	if o.BrowserLoggingReportLocation == nil {
		if o.isExplicitNullBrowserLoggingReportLocation {
			toSerialize["browserLoggingReportLocation"] = o.BrowserLoggingReportLocation
		}
	} else {
		toSerialize["browserLoggingReportLocation"] = o.BrowserLoggingReportLocation
	}
	if o.BrowserRequireHighSecurityForRestrictedSites != nil {
		toSerialize["browserRequireHighSecurityForRestrictedSites"] = o.BrowserRequireHighSecurityForRestrictedSites
	}
	if o.BrowserRequireFirewall != nil {
		toSerialize["browserRequireFirewall"] = o.BrowserRequireFirewall
	}
	if o.BrowserRequireFraudWarning != nil {
		toSerialize["browserRequireFraudWarning"] = o.BrowserRequireFraudWarning
	}
	if o.BrowserTrustedSitesSecurityLevel != nil {
		toSerialize["browserTrustedSitesSecurityLevel"] = o.BrowserTrustedSitesSecurityLevel
	}
	if o.CellularBlockDataRoaming != nil {
		toSerialize["cellularBlockDataRoaming"] = o.CellularBlockDataRoaming
	}
	if o.DiagnosticsBlockDataSubmission != nil {
		toSerialize["diagnosticsBlockDataSubmission"] = o.DiagnosticsBlockDataSubmission
	}
	if o.PasswordBlockPicturePasswordAndPin != nil {
		toSerialize["passwordBlockPicturePasswordAndPin"] = o.PasswordBlockPicturePasswordAndPin
	}
	if o.PasswordExpirationDays == nil {
		if o.isExplicitNullPasswordExpirationDays {
			toSerialize["passwordExpirationDays"] = o.PasswordExpirationDays
		}
	} else {
		toSerialize["passwordExpirationDays"] = o.PasswordExpirationDays
	}
	if o.PasswordMinimumLength == nil {
		if o.isExplicitNullPasswordMinimumLength {
			toSerialize["passwordMinimumLength"] = o.PasswordMinimumLength
		}
	} else {
		toSerialize["passwordMinimumLength"] = o.PasswordMinimumLength
	}
	if o.PasswordMinutesOfInactivityBeforeScreenTimeout == nil {
		if o.isExplicitNullPasswordMinutesOfInactivityBeforeScreenTimeout {
			toSerialize["passwordMinutesOfInactivityBeforeScreenTimeout"] = o.PasswordMinutesOfInactivityBeforeScreenTimeout
		}
	} else {
		toSerialize["passwordMinutesOfInactivityBeforeScreenTimeout"] = o.PasswordMinutesOfInactivityBeforeScreenTimeout
	}
	if o.PasswordMinimumCharacterSetCount == nil {
		if o.isExplicitNullPasswordMinimumCharacterSetCount {
			toSerialize["passwordMinimumCharacterSetCount"] = o.PasswordMinimumCharacterSetCount
		}
	} else {
		toSerialize["passwordMinimumCharacterSetCount"] = o.PasswordMinimumCharacterSetCount
	}
	if o.PasswordPreviousPasswordBlockCount == nil {
		if o.isExplicitNullPasswordPreviousPasswordBlockCount {
			toSerialize["passwordPreviousPasswordBlockCount"] = o.PasswordPreviousPasswordBlockCount
		}
	} else {
		toSerialize["passwordPreviousPasswordBlockCount"] = o.PasswordPreviousPasswordBlockCount
	}
	if o.PasswordRequiredType != nil {
		toSerialize["passwordRequiredType"] = o.PasswordRequiredType
	}
	if o.PasswordSignInFailureCountBeforeFactoryReset == nil {
		if o.isExplicitNullPasswordSignInFailureCountBeforeFactoryReset {
			toSerialize["passwordSignInFailureCountBeforeFactoryReset"] = o.PasswordSignInFailureCountBeforeFactoryReset
		}
	} else {
		toSerialize["passwordSignInFailureCountBeforeFactoryReset"] = o.PasswordSignInFailureCountBeforeFactoryReset
	}
	if o.StorageRequireDeviceEncryption != nil {
		toSerialize["storageRequireDeviceEncryption"] = o.StorageRequireDeviceEncryption
	}
	if o.UpdatesRequireAutomaticUpdates != nil {
		toSerialize["updatesRequireAutomaticUpdates"] = o.UpdatesRequireAutomaticUpdates
	}
	if o.UserAccountControlSettings != nil {
		toSerialize["userAccountControlSettings"] = o.UserAccountControlSettings
	}
	if o.WorkFoldersUrl == nil {
		if o.isExplicitNullWorkFoldersUrl {
			toSerialize["workFoldersUrl"] = o.WorkFoldersUrl
		}
	} else {
		toSerialize["workFoldersUrl"] = o.WorkFoldersUrl
	}
	return json.Marshal(toSerialize)
}


