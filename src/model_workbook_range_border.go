/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// WorkbookRangeBorder struct for WorkbookRangeBorder
type WorkbookRangeBorder struct {
	Color *string `json:"color,omitempty"`
	isExplicitNullColor bool `json:"-"`
	SideIndex *string `json:"sideIndex,omitempty"`
	isExplicitNullSideIndex bool `json:"-"`
	Style *string `json:"style,omitempty"`
	isExplicitNullStyle bool `json:"-"`
	Weight *string `json:"weight,omitempty"`
	isExplicitNullWeight bool `json:"-"`
}

// GetColor returns the Color field if non-nil, zero value otherwise.
func (o *WorkbookRangeBorder) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeBorder) GetColorOk() (string, bool) {
	if o == nil || o.Color == nil {
		var ret string
		return ret, false
	}
	return *o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *WorkbookRangeBorder) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *WorkbookRangeBorder) SetColor(v string) {
	o.Color = &v
}

// SetColorExplicitNull (un)sets Color to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Color value is set to nil even if false is passed
func (o *WorkbookRangeBorder) SetColorExplicitNull(b bool) {
	o.Color = nil
	o.isExplicitNullColor = b
}
// GetSideIndex returns the SideIndex field if non-nil, zero value otherwise.
func (o *WorkbookRangeBorder) GetSideIndex() string {
	if o == nil || o.SideIndex == nil {
		var ret string
		return ret
	}
	return *o.SideIndex
}

// GetSideIndexOk returns a tuple with the SideIndex field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeBorder) GetSideIndexOk() (string, bool) {
	if o == nil || o.SideIndex == nil {
		var ret string
		return ret, false
	}
	return *o.SideIndex, true
}

// HasSideIndex returns a boolean if a field has been set.
func (o *WorkbookRangeBorder) HasSideIndex() bool {
	if o != nil && o.SideIndex != nil {
		return true
	}

	return false
}

// SetSideIndex gets a reference to the given string and assigns it to the SideIndex field.
func (o *WorkbookRangeBorder) SetSideIndex(v string) {
	o.SideIndex = &v
}

// SetSideIndexExplicitNull (un)sets SideIndex to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SideIndex value is set to nil even if false is passed
func (o *WorkbookRangeBorder) SetSideIndexExplicitNull(b bool) {
	o.SideIndex = nil
	o.isExplicitNullSideIndex = b
}
// GetStyle returns the Style field if non-nil, zero value otherwise.
func (o *WorkbookRangeBorder) GetStyle() string {
	if o == nil || o.Style == nil {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeBorder) GetStyleOk() (string, bool) {
	if o == nil || o.Style == nil {
		var ret string
		return ret, false
	}
	return *o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *WorkbookRangeBorder) HasStyle() bool {
	if o != nil && o.Style != nil {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *WorkbookRangeBorder) SetStyle(v string) {
	o.Style = &v
}

// SetStyleExplicitNull (un)sets Style to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Style value is set to nil even if false is passed
func (o *WorkbookRangeBorder) SetStyleExplicitNull(b bool) {
	o.Style = nil
	o.isExplicitNullStyle = b
}
// GetWeight returns the Weight field if non-nil, zero value otherwise.
func (o *WorkbookRangeBorder) GetWeight() string {
	if o == nil || o.Weight == nil {
		var ret string
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeBorder) GetWeightOk() (string, bool) {
	if o == nil || o.Weight == nil {
		var ret string
		return ret, false
	}
	return *o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *WorkbookRangeBorder) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given string and assigns it to the Weight field.
func (o *WorkbookRangeBorder) SetWeight(v string) {
	o.Weight = &v
}

// SetWeightExplicitNull (un)sets Weight to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Weight value is set to nil even if false is passed
func (o *WorkbookRangeBorder) SetWeightExplicitNull(b bool) {
	o.Weight = nil
	o.isExplicitNullWeight = b
}

// MarshalJSON returns the JSON representation of the model.
func (o WorkbookRangeBorder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color == nil {
		if o.isExplicitNullColor {
			toSerialize["color"] = o.Color
		}
	} else {
		toSerialize["color"] = o.Color
	}
	if o.SideIndex == nil {
		if o.isExplicitNullSideIndex {
			toSerialize["sideIndex"] = o.SideIndex
		}
	} else {
		toSerialize["sideIndex"] = o.SideIndex
	}
	if o.Style == nil {
		if o.isExplicitNullStyle {
			toSerialize["style"] = o.Style
		}
	} else {
		toSerialize["style"] = o.Style
	}
	if o.Weight == nil {
		if o.isExplicitNullWeight {
			toSerialize["weight"] = o.Weight
		}
	} else {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}


