/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphCalendar struct for MicrosoftGraphCalendar
type MicrosoftGraphCalendar struct {
	Id *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`
	isExplicitNullName bool `json:"-"`
	Color *AnyOfmicrosoftGraphCalendarColor `json:"color,omitempty"`
	isExplicitNullColor bool `json:"-"`
	ChangeKey *string `json:"changeKey,omitempty"`
	isExplicitNullChangeKey bool `json:"-"`
	CanShare *bool `json:"canShare,omitempty"`
	isExplicitNullCanShare bool `json:"-"`
	CanViewPrivateItems *bool `json:"canViewPrivateItems,omitempty"`
	isExplicitNullCanViewPrivateItems bool `json:"-"`
	CanEdit *bool `json:"canEdit,omitempty"`
	isExplicitNullCanEdit bool `json:"-"`
	Owner *AnyOfmicrosoftGraphEmailAddress `json:"owner,omitempty"`
	isExplicitNullOwner bool `json:"-"`
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`

	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`

	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`

	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphCalendar) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MicrosoftGraphCalendar) SetName(v string) {
	o.Name = &v
}

// SetNameExplicitNull (un)sets Name to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Name value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetNameExplicitNull(b bool) {
	o.Name = nil
	o.isExplicitNullName = b
}
// GetColor returns the Color field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetColor() AnyOfmicrosoftGraphCalendarColor {
	if o == nil || o.Color == nil {
		var ret AnyOfmicrosoftGraphCalendarColor
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetColorOk() (AnyOfmicrosoftGraphCalendarColor, bool) {
	if o == nil || o.Color == nil {
		var ret AnyOfmicrosoftGraphCalendarColor
		return ret, false
	}
	return *o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given AnyOfmicrosoftGraphCalendarColor and assigns it to the Color field.
func (o *MicrosoftGraphCalendar) SetColor(v AnyOfmicrosoftGraphCalendarColor) {
	o.Color = &v
}

// SetColorExplicitNull (un)sets Color to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Color value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetColorExplicitNull(b bool) {
	o.Color = nil
	o.isExplicitNullColor = b
}
// GetChangeKey returns the ChangeKey field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetChangeKey() string {
	if o == nil || o.ChangeKey == nil {
		var ret string
		return ret
	}
	return *o.ChangeKey
}

// GetChangeKeyOk returns a tuple with the ChangeKey field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetChangeKeyOk() (string, bool) {
	if o == nil || o.ChangeKey == nil {
		var ret string
		return ret, false
	}
	return *o.ChangeKey, true
}

// HasChangeKey returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasChangeKey() bool {
	if o != nil && o.ChangeKey != nil {
		return true
	}

	return false
}

// SetChangeKey gets a reference to the given string and assigns it to the ChangeKey field.
func (o *MicrosoftGraphCalendar) SetChangeKey(v string) {
	o.ChangeKey = &v
}

// SetChangeKeyExplicitNull (un)sets ChangeKey to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ChangeKey value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetChangeKeyExplicitNull(b bool) {
	o.ChangeKey = nil
	o.isExplicitNullChangeKey = b
}
// GetCanShare returns the CanShare field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetCanShare() bool {
	if o == nil || o.CanShare == nil {
		var ret bool
		return ret
	}
	return *o.CanShare
}

// GetCanShareOk returns a tuple with the CanShare field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetCanShareOk() (bool, bool) {
	if o == nil || o.CanShare == nil {
		var ret bool
		return ret, false
	}
	return *o.CanShare, true
}

// HasCanShare returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasCanShare() bool {
	if o != nil && o.CanShare != nil {
		return true
	}

	return false
}

// SetCanShare gets a reference to the given bool and assigns it to the CanShare field.
func (o *MicrosoftGraphCalendar) SetCanShare(v bool) {
	o.CanShare = &v
}

// SetCanShareExplicitNull (un)sets CanShare to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CanShare value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetCanShareExplicitNull(b bool) {
	o.CanShare = nil
	o.isExplicitNullCanShare = b
}
// GetCanViewPrivateItems returns the CanViewPrivateItems field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetCanViewPrivateItems() bool {
	if o == nil || o.CanViewPrivateItems == nil {
		var ret bool
		return ret
	}
	return *o.CanViewPrivateItems
}

// GetCanViewPrivateItemsOk returns a tuple with the CanViewPrivateItems field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetCanViewPrivateItemsOk() (bool, bool) {
	if o == nil || o.CanViewPrivateItems == nil {
		var ret bool
		return ret, false
	}
	return *o.CanViewPrivateItems, true
}

// HasCanViewPrivateItems returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasCanViewPrivateItems() bool {
	if o != nil && o.CanViewPrivateItems != nil {
		return true
	}

	return false
}

// SetCanViewPrivateItems gets a reference to the given bool and assigns it to the CanViewPrivateItems field.
func (o *MicrosoftGraphCalendar) SetCanViewPrivateItems(v bool) {
	o.CanViewPrivateItems = &v
}

// SetCanViewPrivateItemsExplicitNull (un)sets CanViewPrivateItems to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CanViewPrivateItems value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetCanViewPrivateItemsExplicitNull(b bool) {
	o.CanViewPrivateItems = nil
	o.isExplicitNullCanViewPrivateItems = b
}
// GetCanEdit returns the CanEdit field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetCanEdit() bool {
	if o == nil || o.CanEdit == nil {
		var ret bool
		return ret
	}
	return *o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetCanEditOk() (bool, bool) {
	if o == nil || o.CanEdit == nil {
		var ret bool
		return ret, false
	}
	return *o.CanEdit, true
}

// HasCanEdit returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasCanEdit() bool {
	if o != nil && o.CanEdit != nil {
		return true
	}

	return false
}

// SetCanEdit gets a reference to the given bool and assigns it to the CanEdit field.
func (o *MicrosoftGraphCalendar) SetCanEdit(v bool) {
	o.CanEdit = &v
}

// SetCanEditExplicitNull (un)sets CanEdit to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CanEdit value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetCanEditExplicitNull(b bool) {
	o.CanEdit = nil
	o.isExplicitNullCanEdit = b
}
// GetOwner returns the Owner field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetOwner() AnyOfmicrosoftGraphEmailAddress {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphEmailAddress
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetOwnerOk() (AnyOfmicrosoftGraphEmailAddress, bool) {
	if o == nil || o.Owner == nil {
		var ret AnyOfmicrosoftGraphEmailAddress
		return ret, false
	}
	return *o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphEmailAddress and assigns it to the Owner field.
func (o *MicrosoftGraphCalendar) SetOwner(v AnyOfmicrosoftGraphEmailAddress) {
	o.Owner = &v
}

// SetOwnerExplicitNull (un)sets Owner to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Owner value is set to nil even if false is passed
func (o *MicrosoftGraphCalendar) SetOwnerExplicitNull(b bool) {
	o.Owner = nil
	o.isExplicitNullOwner = b
}
// GetSingleValueExtendedProperties returns the SingleValueExtendedProperties field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetSingleValueExtendedProperties() []MicrosoftGraphSingleValueLegacyExtendedProperty {
	if o == nil || o.SingleValueExtendedProperties == nil {
		var ret []MicrosoftGraphSingleValueLegacyExtendedProperty
		return ret
	}
	return *o.SingleValueExtendedProperties
}

// GetSingleValueExtendedPropertiesOk returns a tuple with the SingleValueExtendedProperties field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetSingleValueExtendedPropertiesOk() ([]MicrosoftGraphSingleValueLegacyExtendedProperty, bool) {
	if o == nil || o.SingleValueExtendedProperties == nil {
		var ret []MicrosoftGraphSingleValueLegacyExtendedProperty
		return ret, false
	}
	return *o.SingleValueExtendedProperties, true
}

// HasSingleValueExtendedProperties returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasSingleValueExtendedProperties() bool {
	if o != nil && o.SingleValueExtendedProperties != nil {
		return true
	}

	return false
}

// SetSingleValueExtendedProperties gets a reference to the given []MicrosoftGraphSingleValueLegacyExtendedProperty and assigns it to the SingleValueExtendedProperties field.
func (o *MicrosoftGraphCalendar) SetSingleValueExtendedProperties(v []MicrosoftGraphSingleValueLegacyExtendedProperty) {
	o.SingleValueExtendedProperties = &v
}

// GetMultiValueExtendedProperties returns the MultiValueExtendedProperties field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetMultiValueExtendedProperties() []MicrosoftGraphMultiValueLegacyExtendedProperty {
	if o == nil || o.MultiValueExtendedProperties == nil {
		var ret []MicrosoftGraphMultiValueLegacyExtendedProperty
		return ret
	}
	return *o.MultiValueExtendedProperties
}

// GetMultiValueExtendedPropertiesOk returns a tuple with the MultiValueExtendedProperties field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetMultiValueExtendedPropertiesOk() ([]MicrosoftGraphMultiValueLegacyExtendedProperty, bool) {
	if o == nil || o.MultiValueExtendedProperties == nil {
		var ret []MicrosoftGraphMultiValueLegacyExtendedProperty
		return ret, false
	}
	return *o.MultiValueExtendedProperties, true
}

// HasMultiValueExtendedProperties returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasMultiValueExtendedProperties() bool {
	if o != nil && o.MultiValueExtendedProperties != nil {
		return true
	}

	return false
}

// SetMultiValueExtendedProperties gets a reference to the given []MicrosoftGraphMultiValueLegacyExtendedProperty and assigns it to the MultiValueExtendedProperties field.
func (o *MicrosoftGraphCalendar) SetMultiValueExtendedProperties(v []MicrosoftGraphMultiValueLegacyExtendedProperty) {
	o.MultiValueExtendedProperties = &v
}

// GetEvents returns the Events field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetEvents() []MicrosoftGraphEvent {
	if o == nil || o.Events == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetEventsOk() ([]MicrosoftGraphEvent, bool) {
	if o == nil || o.Events == nil {
		var ret []MicrosoftGraphEvent
		return ret, false
	}
	return *o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MicrosoftGraphEvent and assigns it to the Events field.
func (o *MicrosoftGraphCalendar) SetEvents(v []MicrosoftGraphEvent) {
	o.Events = &v
}

// GetCalendarView returns the CalendarView field if non-nil, zero value otherwise.
func (o *MicrosoftGraphCalendar) GetCalendarView() []MicrosoftGraphEvent {
	if o == nil || o.CalendarView == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.CalendarView
}

// GetCalendarViewOk returns a tuple with the CalendarView field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendar) GetCalendarViewOk() ([]MicrosoftGraphEvent, bool) {
	if o == nil || o.CalendarView == nil {
		var ret []MicrosoftGraphEvent
		return ret, false
	}
	return *o.CalendarView, true
}

// HasCalendarView returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendar) HasCalendarView() bool {
	if o != nil && o.CalendarView != nil {
		return true
	}

	return false
}

// SetCalendarView gets a reference to the given []MicrosoftGraphEvent and assigns it to the CalendarView field.
func (o *MicrosoftGraphCalendar) SetCalendarView(v []MicrosoftGraphEvent) {
	o.CalendarView = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphCalendar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name == nil {
		if o.isExplicitNullName {
			toSerialize["name"] = o.Name
		}
	} else {
		toSerialize["name"] = o.Name
	}
	if o.Color == nil {
		if o.isExplicitNullColor {
			toSerialize["color"] = o.Color
		}
	} else {
		toSerialize["color"] = o.Color
	}
	if o.ChangeKey == nil {
		if o.isExplicitNullChangeKey {
			toSerialize["changeKey"] = o.ChangeKey
		}
	} else {
		toSerialize["changeKey"] = o.ChangeKey
	}
	if o.CanShare == nil {
		if o.isExplicitNullCanShare {
			toSerialize["canShare"] = o.CanShare
		}
	} else {
		toSerialize["canShare"] = o.CanShare
	}
	if o.CanViewPrivateItems == nil {
		if o.isExplicitNullCanViewPrivateItems {
			toSerialize["canViewPrivateItems"] = o.CanViewPrivateItems
		}
	} else {
		toSerialize["canViewPrivateItems"] = o.CanViewPrivateItems
	}
	if o.CanEdit == nil {
		if o.isExplicitNullCanEdit {
			toSerialize["canEdit"] = o.CanEdit
		}
	} else {
		toSerialize["canEdit"] = o.CanEdit
	}
	if o.Owner == nil {
		if o.isExplicitNullOwner {
			toSerialize["owner"] = o.Owner
		}
	} else {
		toSerialize["owner"] = o.Owner
	}
	if o.SingleValueExtendedProperties != nil {
		toSerialize["singleValueExtendedProperties"] = o.SingleValueExtendedProperties
	}
	if o.MultiValueExtendedProperties != nil {
		toSerialize["multiValueExtendedProperties"] = o.MultiValueExtendedProperties
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.CalendarView != nil {
		toSerialize["calendarView"] = o.CalendarView
	}
	return json.Marshal(toSerialize)
}


