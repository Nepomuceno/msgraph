/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// InlineObject900 struct for InlineObject900
type InlineObject900 struct {
	SampleS *AnyOfobject `json:"sampleS,omitempty"`
	isExplicitNullSampleS bool `json:"-"`
	NumberSample *AnyOfobject `json:"numberSample,omitempty"`
	isExplicitNullNumberSample bool `json:"-"`
	PopulationS *AnyOfobject `json:"populationS,omitempty"`
	isExplicitNullPopulationS bool `json:"-"`
	NumberPop *AnyOfobject `json:"numberPop,omitempty"`
	isExplicitNullNumberPop bool `json:"-"`
	Cumulative *AnyOfobject `json:"cumulative,omitempty"`
	isExplicitNullCumulative bool `json:"-"`
}

// GetSampleS returns the SampleS field if non-nil, zero value otherwise.
func (o *InlineObject900) GetSampleS() AnyOfobject {
	if o == nil || o.SampleS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.SampleS
}

// GetSampleSOk returns a tuple with the SampleS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject900) GetSampleSOk() (AnyOfobject, bool) {
	if o == nil || o.SampleS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.SampleS, true
}

// HasSampleS returns a boolean if a field has been set.
func (o *InlineObject900) HasSampleS() bool {
	if o != nil && o.SampleS != nil {
		return true
	}

	return false
}

// SetSampleS gets a reference to the given AnyOfobject and assigns it to the SampleS field.
func (o *InlineObject900) SetSampleS(v AnyOfobject) {
	o.SampleS = &v
}

// SetSampleSExplicitNull (un)sets SampleS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The SampleS value is set to nil even if false is passed
func (o *InlineObject900) SetSampleSExplicitNull(b bool) {
	o.SampleS = nil
	o.isExplicitNullSampleS = b
}
// GetNumberSample returns the NumberSample field if non-nil, zero value otherwise.
func (o *InlineObject900) GetNumberSample() AnyOfobject {
	if o == nil || o.NumberSample == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberSample
}

// GetNumberSampleOk returns a tuple with the NumberSample field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject900) GetNumberSampleOk() (AnyOfobject, bool) {
	if o == nil || o.NumberSample == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberSample, true
}

// HasNumberSample returns a boolean if a field has been set.
func (o *InlineObject900) HasNumberSample() bool {
	if o != nil && o.NumberSample != nil {
		return true
	}

	return false
}

// SetNumberSample gets a reference to the given AnyOfobject and assigns it to the NumberSample field.
func (o *InlineObject900) SetNumberSample(v AnyOfobject) {
	o.NumberSample = &v
}

// SetNumberSampleExplicitNull (un)sets NumberSample to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberSample value is set to nil even if false is passed
func (o *InlineObject900) SetNumberSampleExplicitNull(b bool) {
	o.NumberSample = nil
	o.isExplicitNullNumberSample = b
}
// GetPopulationS returns the PopulationS field if non-nil, zero value otherwise.
func (o *InlineObject900) GetPopulationS() AnyOfobject {
	if o == nil || o.PopulationS == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.PopulationS
}

// GetPopulationSOk returns a tuple with the PopulationS field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject900) GetPopulationSOk() (AnyOfobject, bool) {
	if o == nil || o.PopulationS == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.PopulationS, true
}

// HasPopulationS returns a boolean if a field has been set.
func (o *InlineObject900) HasPopulationS() bool {
	if o != nil && o.PopulationS != nil {
		return true
	}

	return false
}

// SetPopulationS gets a reference to the given AnyOfobject and assigns it to the PopulationS field.
func (o *InlineObject900) SetPopulationS(v AnyOfobject) {
	o.PopulationS = &v
}

// SetPopulationSExplicitNull (un)sets PopulationS to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PopulationS value is set to nil even if false is passed
func (o *InlineObject900) SetPopulationSExplicitNull(b bool) {
	o.PopulationS = nil
	o.isExplicitNullPopulationS = b
}
// GetNumberPop returns the NumberPop field if non-nil, zero value otherwise.
func (o *InlineObject900) GetNumberPop() AnyOfobject {
	if o == nil || o.NumberPop == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.NumberPop
}

// GetNumberPopOk returns a tuple with the NumberPop field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject900) GetNumberPopOk() (AnyOfobject, bool) {
	if o == nil || o.NumberPop == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.NumberPop, true
}

// HasNumberPop returns a boolean if a field has been set.
func (o *InlineObject900) HasNumberPop() bool {
	if o != nil && o.NumberPop != nil {
		return true
	}

	return false
}

// SetNumberPop gets a reference to the given AnyOfobject and assigns it to the NumberPop field.
func (o *InlineObject900) SetNumberPop(v AnyOfobject) {
	o.NumberPop = &v
}

// SetNumberPopExplicitNull (un)sets NumberPop to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The NumberPop value is set to nil even if false is passed
func (o *InlineObject900) SetNumberPopExplicitNull(b bool) {
	o.NumberPop = nil
	o.isExplicitNullNumberPop = b
}
// GetCumulative returns the Cumulative field if non-nil, zero value otherwise.
func (o *InlineObject900) GetCumulative() AnyOfobject {
	if o == nil || o.Cumulative == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Cumulative
}

// GetCumulativeOk returns a tuple with the Cumulative field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject900) GetCumulativeOk() (AnyOfobject, bool) {
	if o == nil || o.Cumulative == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Cumulative, true
}

// HasCumulative returns a boolean if a field has been set.
func (o *InlineObject900) HasCumulative() bool {
	if o != nil && o.Cumulative != nil {
		return true
	}

	return false
}

// SetCumulative gets a reference to the given AnyOfobject and assigns it to the Cumulative field.
func (o *InlineObject900) SetCumulative(v AnyOfobject) {
	o.Cumulative = &v
}

// SetCumulativeExplicitNull (un)sets Cumulative to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Cumulative value is set to nil even if false is passed
func (o *InlineObject900) SetCumulativeExplicitNull(b bool) {
	o.Cumulative = nil
	o.isExplicitNullCumulative = b
}

// MarshalJSON returns the JSON representation of the model.
func (o InlineObject900) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SampleS == nil {
		if o.isExplicitNullSampleS {
			toSerialize["sampleS"] = o.SampleS
		}
	} else {
		toSerialize["sampleS"] = o.SampleS
	}
	if o.NumberSample == nil {
		if o.isExplicitNullNumberSample {
			toSerialize["numberSample"] = o.NumberSample
		}
	} else {
		toSerialize["numberSample"] = o.NumberSample
	}
	if o.PopulationS == nil {
		if o.isExplicitNullPopulationS {
			toSerialize["populationS"] = o.PopulationS
		}
	} else {
		toSerialize["populationS"] = o.PopulationS
	}
	if o.NumberPop == nil {
		if o.isExplicitNullNumberPop {
			toSerialize["numberPop"] = o.NumberPop
		}
	} else {
		toSerialize["numberPop"] = o.NumberPop
	}
	if o.Cumulative == nil {
		if o.isExplicitNullCumulative {
			toSerialize["cumulative"] = o.Cumulative
		}
	} else {
		toSerialize["cumulative"] = o.Cumulative
	}
	return json.Marshal(toSerialize)
}


