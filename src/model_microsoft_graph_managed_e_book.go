/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// MicrosoftGraphManagedEBook struct for MicrosoftGraphManagedEBook
type MicrosoftGraphManagedEBook struct {
	Id *string `json:"id,omitempty"`

	// Name of the eBook.
	DisplayName *string `json:"displayName,omitempty"`

	// Description.
	Description *string `json:"description,omitempty"`
	isExplicitNullDescription bool `json:"-"`
	// Publisher.
	Publisher *string `json:"publisher,omitempty"`
	isExplicitNullPublisher bool `json:"-"`
	// The date and time when the eBook was published.
	PublishedDateTime *time.Time `json:"publishedDateTime,omitempty"`

	// Book cover.
	LargeCover *AnyOfmicrosoftGraphMimeContent `json:"largeCover,omitempty"`
	isExplicitNullLargeCover bool `json:"-"`
	// The date and time when the eBook file was created.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// The date and time when the eBook was last modified.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// The more information Url.
	InformationUrl *string `json:"informationUrl,omitempty"`
	isExplicitNullInformationUrl bool `json:"-"`
	// The privacy statement Url.
	PrivacyInformationUrl *string `json:"privacyInformationUrl,omitempty"`
	isExplicitNullPrivacyInformationUrl bool `json:"-"`
	Assignments *[]MicrosoftGraphManagedEBookAssignment `json:"assignments,omitempty"`

	InstallSummary *AnyOfmicrosoftGraphEBookInstallSummary `json:"installSummary,omitempty"`
	isExplicitNullInstallSummary bool `json:"-"`
	DeviceStates *[]MicrosoftGraphDeviceInstallState `json:"deviceStates,omitempty"`

	UserStateSummary *[]MicrosoftGraphUserInstallStateSummary `json:"userStateSummary,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphManagedEBook) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MicrosoftGraphManagedEBook) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MicrosoftGraphManagedEBook) SetDescription(v string) {
	o.Description = &v
}

// SetDescriptionExplicitNull (un)sets Description to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Description value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetDescriptionExplicitNull(b bool) {
	o.Description = nil
	o.isExplicitNullDescription = b
}
// GetPublisher returns the Publisher field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetPublisher() string {
	if o == nil || o.Publisher == nil {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetPublisherOk() (string, bool) {
	if o == nil || o.Publisher == nil {
		var ret string
		return ret, false
	}
	return *o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasPublisher() bool {
	if o != nil && o.Publisher != nil {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *MicrosoftGraphManagedEBook) SetPublisher(v string) {
	o.Publisher = &v
}

// SetPublisherExplicitNull (un)sets Publisher to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Publisher value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetPublisherExplicitNull(b bool) {
	o.Publisher = nil
	o.isExplicitNullPublisher = b
}
// GetPublishedDateTime returns the PublishedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetPublishedDateTime() time.Time {
	if o == nil || o.PublishedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.PublishedDateTime
}

// GetPublishedDateTimeOk returns a tuple with the PublishedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetPublishedDateTimeOk() (time.Time, bool) {
	if o == nil || o.PublishedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.PublishedDateTime, true
}

// HasPublishedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasPublishedDateTime() bool {
	if o != nil && o.PublishedDateTime != nil {
		return true
	}

	return false
}

// SetPublishedDateTime gets a reference to the given time.Time and assigns it to the PublishedDateTime field.
func (o *MicrosoftGraphManagedEBook) SetPublishedDateTime(v time.Time) {
	o.PublishedDateTime = &v
}

// GetLargeCover returns the LargeCover field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetLargeCover() AnyOfmicrosoftGraphMimeContent {
	if o == nil || o.LargeCover == nil {
		var ret AnyOfmicrosoftGraphMimeContent
		return ret
	}
	return *o.LargeCover
}

// GetLargeCoverOk returns a tuple with the LargeCover field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetLargeCoverOk() (AnyOfmicrosoftGraphMimeContent, bool) {
	if o == nil || o.LargeCover == nil {
		var ret AnyOfmicrosoftGraphMimeContent
		return ret, false
	}
	return *o.LargeCover, true
}

// HasLargeCover returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasLargeCover() bool {
	if o != nil && o.LargeCover != nil {
		return true
	}

	return false
}

// SetLargeCover gets a reference to the given AnyOfmicrosoftGraphMimeContent and assigns it to the LargeCover field.
func (o *MicrosoftGraphManagedEBook) SetLargeCover(v AnyOfmicrosoftGraphMimeContent) {
	o.LargeCover = &v
}

// SetLargeCoverExplicitNull (un)sets LargeCover to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LargeCover value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetLargeCoverExplicitNull(b bool) {
	o.LargeCover = nil
	o.isExplicitNullLargeCover = b
}
// GetCreatedDateTime returns the CreatedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetCreatedDateTimeOk() (time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *MicrosoftGraphManagedEBook) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetLastModifiedDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *MicrosoftGraphManagedEBook) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// GetInformationUrl returns the InformationUrl field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetInformationUrl() string {
	if o == nil || o.InformationUrl == nil {
		var ret string
		return ret
	}
	return *o.InformationUrl
}

// GetInformationUrlOk returns a tuple with the InformationUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetInformationUrlOk() (string, bool) {
	if o == nil || o.InformationUrl == nil {
		var ret string
		return ret, false
	}
	return *o.InformationUrl, true
}

// HasInformationUrl returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasInformationUrl() bool {
	if o != nil && o.InformationUrl != nil {
		return true
	}

	return false
}

// SetInformationUrl gets a reference to the given string and assigns it to the InformationUrl field.
func (o *MicrosoftGraphManagedEBook) SetInformationUrl(v string) {
	o.InformationUrl = &v
}

// SetInformationUrlExplicitNull (un)sets InformationUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The InformationUrl value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetInformationUrlExplicitNull(b bool) {
	o.InformationUrl = nil
	o.isExplicitNullInformationUrl = b
}
// GetPrivacyInformationUrl returns the PrivacyInformationUrl field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetPrivacyInformationUrl() string {
	if o == nil || o.PrivacyInformationUrl == nil {
		var ret string
		return ret
	}
	return *o.PrivacyInformationUrl
}

// GetPrivacyInformationUrlOk returns a tuple with the PrivacyInformationUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetPrivacyInformationUrlOk() (string, bool) {
	if o == nil || o.PrivacyInformationUrl == nil {
		var ret string
		return ret, false
	}
	return *o.PrivacyInformationUrl, true
}

// HasPrivacyInformationUrl returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasPrivacyInformationUrl() bool {
	if o != nil && o.PrivacyInformationUrl != nil {
		return true
	}

	return false
}

// SetPrivacyInformationUrl gets a reference to the given string and assigns it to the PrivacyInformationUrl field.
func (o *MicrosoftGraphManagedEBook) SetPrivacyInformationUrl(v string) {
	o.PrivacyInformationUrl = &v
}

// SetPrivacyInformationUrlExplicitNull (un)sets PrivacyInformationUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The PrivacyInformationUrl value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetPrivacyInformationUrlExplicitNull(b bool) {
	o.PrivacyInformationUrl = nil
	o.isExplicitNullPrivacyInformationUrl = b
}
// GetAssignments returns the Assignments field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetAssignments() []MicrosoftGraphManagedEBookAssignment {
	if o == nil || o.Assignments == nil {
		var ret []MicrosoftGraphManagedEBookAssignment
		return ret
	}
	return *o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetAssignmentsOk() ([]MicrosoftGraphManagedEBookAssignment, bool) {
	if o == nil || o.Assignments == nil {
		var ret []MicrosoftGraphManagedEBookAssignment
		return ret, false
	}
	return *o.Assignments, true
}

// HasAssignments returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasAssignments() bool {
	if o != nil && o.Assignments != nil {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given []MicrosoftGraphManagedEBookAssignment and assigns it to the Assignments field.
func (o *MicrosoftGraphManagedEBook) SetAssignments(v []MicrosoftGraphManagedEBookAssignment) {
	o.Assignments = &v
}

// GetInstallSummary returns the InstallSummary field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetInstallSummary() AnyOfmicrosoftGraphEBookInstallSummary {
	if o == nil || o.InstallSummary == nil {
		var ret AnyOfmicrosoftGraphEBookInstallSummary
		return ret
	}
	return *o.InstallSummary
}

// GetInstallSummaryOk returns a tuple with the InstallSummary field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetInstallSummaryOk() (AnyOfmicrosoftGraphEBookInstallSummary, bool) {
	if o == nil || o.InstallSummary == nil {
		var ret AnyOfmicrosoftGraphEBookInstallSummary
		return ret, false
	}
	return *o.InstallSummary, true
}

// HasInstallSummary returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasInstallSummary() bool {
	if o != nil && o.InstallSummary != nil {
		return true
	}

	return false
}

// SetInstallSummary gets a reference to the given AnyOfmicrosoftGraphEBookInstallSummary and assigns it to the InstallSummary field.
func (o *MicrosoftGraphManagedEBook) SetInstallSummary(v AnyOfmicrosoftGraphEBookInstallSummary) {
	o.InstallSummary = &v
}

// SetInstallSummaryExplicitNull (un)sets InstallSummary to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The InstallSummary value is set to nil even if false is passed
func (o *MicrosoftGraphManagedEBook) SetInstallSummaryExplicitNull(b bool) {
	o.InstallSummary = nil
	o.isExplicitNullInstallSummary = b
}
// GetDeviceStates returns the DeviceStates field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetDeviceStates() []MicrosoftGraphDeviceInstallState {
	if o == nil || o.DeviceStates == nil {
		var ret []MicrosoftGraphDeviceInstallState
		return ret
	}
	return *o.DeviceStates
}

// GetDeviceStatesOk returns a tuple with the DeviceStates field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetDeviceStatesOk() ([]MicrosoftGraphDeviceInstallState, bool) {
	if o == nil || o.DeviceStates == nil {
		var ret []MicrosoftGraphDeviceInstallState
		return ret, false
	}
	return *o.DeviceStates, true
}

// HasDeviceStates returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasDeviceStates() bool {
	if o != nil && o.DeviceStates != nil {
		return true
	}

	return false
}

// SetDeviceStates gets a reference to the given []MicrosoftGraphDeviceInstallState and assigns it to the DeviceStates field.
func (o *MicrosoftGraphManagedEBook) SetDeviceStates(v []MicrosoftGraphDeviceInstallState) {
	o.DeviceStates = &v
}

// GetUserStateSummary returns the UserStateSummary field if non-nil, zero value otherwise.
func (o *MicrosoftGraphManagedEBook) GetUserStateSummary() []MicrosoftGraphUserInstallStateSummary {
	if o == nil || o.UserStateSummary == nil {
		var ret []MicrosoftGraphUserInstallStateSummary
		return ret
	}
	return *o.UserStateSummary
}

// GetUserStateSummaryOk returns a tuple with the UserStateSummary field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphManagedEBook) GetUserStateSummaryOk() ([]MicrosoftGraphUserInstallStateSummary, bool) {
	if o == nil || o.UserStateSummary == nil {
		var ret []MicrosoftGraphUserInstallStateSummary
		return ret, false
	}
	return *o.UserStateSummary, true
}

// HasUserStateSummary returns a boolean if a field has been set.
func (o *MicrosoftGraphManagedEBook) HasUserStateSummary() bool {
	if o != nil && o.UserStateSummary != nil {
		return true
	}

	return false
}

// SetUserStateSummary gets a reference to the given []MicrosoftGraphUserInstallStateSummary and assigns it to the UserStateSummary field.
func (o *MicrosoftGraphManagedEBook) SetUserStateSummary(v []MicrosoftGraphUserInstallStateSummary) {
	o.UserStateSummary = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphManagedEBook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Description == nil {
		if o.isExplicitNullDescription {
			toSerialize["description"] = o.Description
		}
	} else {
		toSerialize["description"] = o.Description
	}
	if o.Publisher == nil {
		if o.isExplicitNullPublisher {
			toSerialize["publisher"] = o.Publisher
		}
	} else {
		toSerialize["publisher"] = o.Publisher
	}
	if o.PublishedDateTime != nil {
		toSerialize["publishedDateTime"] = o.PublishedDateTime
	}
	if o.LargeCover == nil {
		if o.isExplicitNullLargeCover {
			toSerialize["largeCover"] = o.LargeCover
		}
	} else {
		toSerialize["largeCover"] = o.LargeCover
	}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.LastModifiedDateTime != nil {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.InformationUrl == nil {
		if o.isExplicitNullInformationUrl {
			toSerialize["informationUrl"] = o.InformationUrl
		}
	} else {
		toSerialize["informationUrl"] = o.InformationUrl
	}
	if o.PrivacyInformationUrl == nil {
		if o.isExplicitNullPrivacyInformationUrl {
			toSerialize["privacyInformationUrl"] = o.PrivacyInformationUrl
		}
	} else {
		toSerialize["privacyInformationUrl"] = o.PrivacyInformationUrl
	}
	if o.Assignments != nil {
		toSerialize["assignments"] = o.Assignments
	}
	if o.InstallSummary == nil {
		if o.isExplicitNullInstallSummary {
			toSerialize["installSummary"] = o.InstallSummary
		}
	} else {
		toSerialize["installSummary"] = o.InstallSummary
	}
	if o.DeviceStates != nil {
		toSerialize["deviceStates"] = o.DeviceStates
	}
	if o.UserStateSummary != nil {
		toSerialize["userStateSummary"] = o.UserStateSummary
	}
	return json.Marshal(toSerialize)
}


