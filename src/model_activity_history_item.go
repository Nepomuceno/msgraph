/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// ActivityHistoryItem struct for ActivityHistoryItem
type ActivityHistoryItem struct {
	Status *AnyOfmicrosoftGraphStatus `json:"status,omitempty"`
	isExplicitNullStatus bool `json:"-"`
	ActiveDurationSeconds *int32 `json:"activeDurationSeconds,omitempty"`
	isExplicitNullActiveDurationSeconds bool `json:"-"`
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	isExplicitNullCreatedDateTime bool `json:"-"`
	LastActiveDateTime *time.Time `json:"lastActiveDateTime,omitempty"`
	isExplicitNullLastActiveDateTime bool `json:"-"`
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	isExplicitNullLastModifiedDateTime bool `json:"-"`
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	isExplicitNullExpirationDateTime bool `json:"-"`
	StartedDateTime *time.Time `json:"startedDateTime,omitempty"`

	UserTimezone *string `json:"userTimezone,omitempty"`
	isExplicitNullUserTimezone bool `json:"-"`
	Activity *MicrosoftGraphUserActivity `json:"activity,omitempty"`

}

// GetStatus returns the Status field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetStatus() AnyOfmicrosoftGraphStatus {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetStatusOk() (AnyOfmicrosoftGraphStatus, bool) {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphStatus
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphStatus and assigns it to the Status field.
func (o *ActivityHistoryItem) SetStatus(v AnyOfmicrosoftGraphStatus) {
	o.Status = &v
}

// SetStatusExplicitNull (un)sets Status to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Status value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetStatusExplicitNull(b bool) {
	o.Status = nil
	o.isExplicitNullStatus = b
}
// GetActiveDurationSeconds returns the ActiveDurationSeconds field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetActiveDurationSeconds() int32 {
	if o == nil || o.ActiveDurationSeconds == nil {
		var ret int32
		return ret
	}
	return *o.ActiveDurationSeconds
}

// GetActiveDurationSecondsOk returns a tuple with the ActiveDurationSeconds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetActiveDurationSecondsOk() (int32, bool) {
	if o == nil || o.ActiveDurationSeconds == nil {
		var ret int32
		return ret, false
	}
	return *o.ActiveDurationSeconds, true
}

// HasActiveDurationSeconds returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasActiveDurationSeconds() bool {
	if o != nil && o.ActiveDurationSeconds != nil {
		return true
	}

	return false
}

// SetActiveDurationSeconds gets a reference to the given int32 and assigns it to the ActiveDurationSeconds field.
func (o *ActivityHistoryItem) SetActiveDurationSeconds(v int32) {
	o.ActiveDurationSeconds = &v
}

// SetActiveDurationSecondsExplicitNull (un)sets ActiveDurationSeconds to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ActiveDurationSeconds value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetActiveDurationSecondsExplicitNull(b bool) {
	o.ActiveDurationSeconds = nil
	o.isExplicitNullActiveDurationSeconds = b
}
// GetCreatedDateTime returns the CreatedDateTime field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetCreatedDateTimeOk() (time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *ActivityHistoryItem) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// SetCreatedDateTimeExplicitNull (un)sets CreatedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CreatedDateTime value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetCreatedDateTimeExplicitNull(b bool) {
	o.CreatedDateTime = nil
	o.isExplicitNullCreatedDateTime = b
}
// GetLastActiveDateTime returns the LastActiveDateTime field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetLastActiveDateTime() time.Time {
	if o == nil || o.LastActiveDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastActiveDateTime
}

// GetLastActiveDateTimeOk returns a tuple with the LastActiveDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetLastActiveDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastActiveDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastActiveDateTime, true
}

// HasLastActiveDateTime returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasLastActiveDateTime() bool {
	if o != nil && o.LastActiveDateTime != nil {
		return true
	}

	return false
}

// SetLastActiveDateTime gets a reference to the given time.Time and assigns it to the LastActiveDateTime field.
func (o *ActivityHistoryItem) SetLastActiveDateTime(v time.Time) {
	o.LastActiveDateTime = &v
}

// SetLastActiveDateTimeExplicitNull (un)sets LastActiveDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LastActiveDateTime value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetLastActiveDateTimeExplicitNull(b bool) {
	o.LastActiveDateTime = nil
	o.isExplicitNullLastActiveDateTime = b
}
// GetLastModifiedDateTime returns the LastModifiedDateTime field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetLastModifiedDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *ActivityHistoryItem) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// SetLastModifiedDateTimeExplicitNull (un)sets LastModifiedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LastModifiedDateTime value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetLastModifiedDateTimeExplicitNull(b bool) {
	o.LastModifiedDateTime = nil
	o.isExplicitNullLastModifiedDateTime = b
}
// GetExpirationDateTime returns the ExpirationDateTime field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetExpirationDateTimeOk() (time.Time, bool) {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime != nil {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *ActivityHistoryItem) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// SetExpirationDateTimeExplicitNull (un)sets ExpirationDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ExpirationDateTime value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetExpirationDateTimeExplicitNull(b bool) {
	o.ExpirationDateTime = nil
	o.isExplicitNullExpirationDateTime = b
}
// GetStartedDateTime returns the StartedDateTime field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetStartedDateTime() time.Time {
	if o == nil || o.StartedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedDateTime
}

// GetStartedDateTimeOk returns a tuple with the StartedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetStartedDateTimeOk() (time.Time, bool) {
	if o == nil || o.StartedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.StartedDateTime, true
}

// HasStartedDateTime returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasStartedDateTime() bool {
	if o != nil && o.StartedDateTime != nil {
		return true
	}

	return false
}

// SetStartedDateTime gets a reference to the given time.Time and assigns it to the StartedDateTime field.
func (o *ActivityHistoryItem) SetStartedDateTime(v time.Time) {
	o.StartedDateTime = &v
}

// GetUserTimezone returns the UserTimezone field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetUserTimezone() string {
	if o == nil || o.UserTimezone == nil {
		var ret string
		return ret
	}
	return *o.UserTimezone
}

// GetUserTimezoneOk returns a tuple with the UserTimezone field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetUserTimezoneOk() (string, bool) {
	if o == nil || o.UserTimezone == nil {
		var ret string
		return ret, false
	}
	return *o.UserTimezone, true
}

// HasUserTimezone returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasUserTimezone() bool {
	if o != nil && o.UserTimezone != nil {
		return true
	}

	return false
}

// SetUserTimezone gets a reference to the given string and assigns it to the UserTimezone field.
func (o *ActivityHistoryItem) SetUserTimezone(v string) {
	o.UserTimezone = &v
}

// SetUserTimezoneExplicitNull (un)sets UserTimezone to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserTimezone value is set to nil even if false is passed
func (o *ActivityHistoryItem) SetUserTimezoneExplicitNull(b bool) {
	o.UserTimezone = nil
	o.isExplicitNullUserTimezone = b
}
// GetActivity returns the Activity field if non-nil, zero value otherwise.
func (o *ActivityHistoryItem) GetActivity() MicrosoftGraphUserActivity {
	if o == nil || o.Activity == nil {
		var ret MicrosoftGraphUserActivity
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ActivityHistoryItem) GetActivityOk() (MicrosoftGraphUserActivity, bool) {
	if o == nil || o.Activity == nil {
		var ret MicrosoftGraphUserActivity
		return ret, false
	}
	return *o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *ActivityHistoryItem) HasActivity() bool {
	if o != nil && o.Activity != nil {
		return true
	}

	return false
}

// SetActivity gets a reference to the given MicrosoftGraphUserActivity and assigns it to the Activity field.
func (o *ActivityHistoryItem) SetActivity(v MicrosoftGraphUserActivity) {
	o.Activity = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o ActivityHistoryItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status == nil {
		if o.isExplicitNullStatus {
			toSerialize["status"] = o.Status
		}
	} else {
		toSerialize["status"] = o.Status
	}
	if o.ActiveDurationSeconds == nil {
		if o.isExplicitNullActiveDurationSeconds {
			toSerialize["activeDurationSeconds"] = o.ActiveDurationSeconds
		}
	} else {
		toSerialize["activeDurationSeconds"] = o.ActiveDurationSeconds
	}
	if o.CreatedDateTime == nil {
		if o.isExplicitNullCreatedDateTime {
			toSerialize["createdDateTime"] = o.CreatedDateTime
		}
	} else {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.LastActiveDateTime == nil {
		if o.isExplicitNullLastActiveDateTime {
			toSerialize["lastActiveDateTime"] = o.LastActiveDateTime
		}
	} else {
		toSerialize["lastActiveDateTime"] = o.LastActiveDateTime
	}
	if o.LastModifiedDateTime == nil {
		if o.isExplicitNullLastModifiedDateTime {
			toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
		}
	} else {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.ExpirationDateTime == nil {
		if o.isExplicitNullExpirationDateTime {
			toSerialize["expirationDateTime"] = o.ExpirationDateTime
		}
	} else {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if o.StartedDateTime != nil {
		toSerialize["startedDateTime"] = o.StartedDateTime
	}
	if o.UserTimezone == nil {
		if o.isExplicitNullUserTimezone {
			toSerialize["userTimezone"] = o.UserTimezone
		}
	} else {
		toSerialize["userTimezone"] = o.UserTimezone
	}
	if o.Activity != nil {
		toSerialize["activity"] = o.Activity
	}
	return json.Marshal(toSerialize)
}


