/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// UserActivity struct for UserActivity
type UserActivity struct {
	VisualElements *MicrosoftGraphVisualInfo `json:"visualElements,omitempty"`

	ActivitySourceHost *string `json:"activitySourceHost,omitempty"`

	ActivationUrl *string `json:"activationUrl,omitempty"`

	AppActivityId *string `json:"appActivityId,omitempty"`

	AppDisplayName *string `json:"appDisplayName,omitempty"`
	isExplicitNullAppDisplayName bool `json:"-"`
	ContentUrl *string `json:"contentUrl,omitempty"`
	isExplicitNullContentUrl bool `json:"-"`
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	isExplicitNullCreatedDateTime bool `json:"-"`
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	isExplicitNullExpirationDateTime bool `json:"-"`
	FallbackUrl *string `json:"fallbackUrl,omitempty"`
	isExplicitNullFallbackUrl bool `json:"-"`
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	isExplicitNullLastModifiedDateTime bool `json:"-"`
	UserTimezone *string `json:"userTimezone,omitempty"`
	isExplicitNullUserTimezone bool `json:"-"`
	ContentInfo *AnyOfobject `json:"contentInfo,omitempty"`
	isExplicitNullContentInfo bool `json:"-"`
	Status *AnyOfmicrosoftGraphStatus `json:"status,omitempty"`
	isExplicitNullStatus bool `json:"-"`
	HistoryItems *[]MicrosoftGraphActivityHistoryItem `json:"historyItems,omitempty"`

}

// GetVisualElements returns the VisualElements field if non-nil, zero value otherwise.
func (o *UserActivity) GetVisualElements() MicrosoftGraphVisualInfo {
	if o == nil || o.VisualElements == nil {
		var ret MicrosoftGraphVisualInfo
		return ret
	}
	return *o.VisualElements
}

// GetVisualElementsOk returns a tuple with the VisualElements field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetVisualElementsOk() (MicrosoftGraphVisualInfo, bool) {
	if o == nil || o.VisualElements == nil {
		var ret MicrosoftGraphVisualInfo
		return ret, false
	}
	return *o.VisualElements, true
}

// HasVisualElements returns a boolean if a field has been set.
func (o *UserActivity) HasVisualElements() bool {
	if o != nil && o.VisualElements != nil {
		return true
	}

	return false
}

// SetVisualElements gets a reference to the given MicrosoftGraphVisualInfo and assigns it to the VisualElements field.
func (o *UserActivity) SetVisualElements(v MicrosoftGraphVisualInfo) {
	o.VisualElements = &v
}

// GetActivitySourceHost returns the ActivitySourceHost field if non-nil, zero value otherwise.
func (o *UserActivity) GetActivitySourceHost() string {
	if o == nil || o.ActivitySourceHost == nil {
		var ret string
		return ret
	}
	return *o.ActivitySourceHost
}

// GetActivitySourceHostOk returns a tuple with the ActivitySourceHost field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetActivitySourceHostOk() (string, bool) {
	if o == nil || o.ActivitySourceHost == nil {
		var ret string
		return ret, false
	}
	return *o.ActivitySourceHost, true
}

// HasActivitySourceHost returns a boolean if a field has been set.
func (o *UserActivity) HasActivitySourceHost() bool {
	if o != nil && o.ActivitySourceHost != nil {
		return true
	}

	return false
}

// SetActivitySourceHost gets a reference to the given string and assigns it to the ActivitySourceHost field.
func (o *UserActivity) SetActivitySourceHost(v string) {
	o.ActivitySourceHost = &v
}

// GetActivationUrl returns the ActivationUrl field if non-nil, zero value otherwise.
func (o *UserActivity) GetActivationUrl() string {
	if o == nil || o.ActivationUrl == nil {
		var ret string
		return ret
	}
	return *o.ActivationUrl
}

// GetActivationUrlOk returns a tuple with the ActivationUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetActivationUrlOk() (string, bool) {
	if o == nil || o.ActivationUrl == nil {
		var ret string
		return ret, false
	}
	return *o.ActivationUrl, true
}

// HasActivationUrl returns a boolean if a field has been set.
func (o *UserActivity) HasActivationUrl() bool {
	if o != nil && o.ActivationUrl != nil {
		return true
	}

	return false
}

// SetActivationUrl gets a reference to the given string and assigns it to the ActivationUrl field.
func (o *UserActivity) SetActivationUrl(v string) {
	o.ActivationUrl = &v
}

// GetAppActivityId returns the AppActivityId field if non-nil, zero value otherwise.
func (o *UserActivity) GetAppActivityId() string {
	if o == nil || o.AppActivityId == nil {
		var ret string
		return ret
	}
	return *o.AppActivityId
}

// GetAppActivityIdOk returns a tuple with the AppActivityId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetAppActivityIdOk() (string, bool) {
	if o == nil || o.AppActivityId == nil {
		var ret string
		return ret, false
	}
	return *o.AppActivityId, true
}

// HasAppActivityId returns a boolean if a field has been set.
func (o *UserActivity) HasAppActivityId() bool {
	if o != nil && o.AppActivityId != nil {
		return true
	}

	return false
}

// SetAppActivityId gets a reference to the given string and assigns it to the AppActivityId field.
func (o *UserActivity) SetAppActivityId(v string) {
	o.AppActivityId = &v
}

// GetAppDisplayName returns the AppDisplayName field if non-nil, zero value otherwise.
func (o *UserActivity) GetAppDisplayName() string {
	if o == nil || o.AppDisplayName == nil {
		var ret string
		return ret
	}
	return *o.AppDisplayName
}

// GetAppDisplayNameOk returns a tuple with the AppDisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetAppDisplayNameOk() (string, bool) {
	if o == nil || o.AppDisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.AppDisplayName, true
}

// HasAppDisplayName returns a boolean if a field has been set.
func (o *UserActivity) HasAppDisplayName() bool {
	if o != nil && o.AppDisplayName != nil {
		return true
	}

	return false
}

// SetAppDisplayName gets a reference to the given string and assigns it to the AppDisplayName field.
func (o *UserActivity) SetAppDisplayName(v string) {
	o.AppDisplayName = &v
}

// SetAppDisplayNameExplicitNull (un)sets AppDisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AppDisplayName value is set to nil even if false is passed
func (o *UserActivity) SetAppDisplayNameExplicitNull(b bool) {
	o.AppDisplayName = nil
	o.isExplicitNullAppDisplayName = b
}
// GetContentUrl returns the ContentUrl field if non-nil, zero value otherwise.
func (o *UserActivity) GetContentUrl() string {
	if o == nil || o.ContentUrl == nil {
		var ret string
		return ret
	}
	return *o.ContentUrl
}

// GetContentUrlOk returns a tuple with the ContentUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetContentUrlOk() (string, bool) {
	if o == nil || o.ContentUrl == nil {
		var ret string
		return ret, false
	}
	return *o.ContentUrl, true
}

// HasContentUrl returns a boolean if a field has been set.
func (o *UserActivity) HasContentUrl() bool {
	if o != nil && o.ContentUrl != nil {
		return true
	}

	return false
}

// SetContentUrl gets a reference to the given string and assigns it to the ContentUrl field.
func (o *UserActivity) SetContentUrl(v string) {
	o.ContentUrl = &v
}

// SetContentUrlExplicitNull (un)sets ContentUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ContentUrl value is set to nil even if false is passed
func (o *UserActivity) SetContentUrlExplicitNull(b bool) {
	o.ContentUrl = nil
	o.isExplicitNullContentUrl = b
}
// GetCreatedDateTime returns the CreatedDateTime field if non-nil, zero value otherwise.
func (o *UserActivity) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetCreatedDateTimeOk() (time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *UserActivity) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *UserActivity) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// SetCreatedDateTimeExplicitNull (un)sets CreatedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CreatedDateTime value is set to nil even if false is passed
func (o *UserActivity) SetCreatedDateTimeExplicitNull(b bool) {
	o.CreatedDateTime = nil
	o.isExplicitNullCreatedDateTime = b
}
// GetExpirationDateTime returns the ExpirationDateTime field if non-nil, zero value otherwise.
func (o *UserActivity) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetExpirationDateTimeOk() (time.Time, bool) {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *UserActivity) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime != nil {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *UserActivity) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// SetExpirationDateTimeExplicitNull (un)sets ExpirationDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ExpirationDateTime value is set to nil even if false is passed
func (o *UserActivity) SetExpirationDateTimeExplicitNull(b bool) {
	o.ExpirationDateTime = nil
	o.isExplicitNullExpirationDateTime = b
}
// GetFallbackUrl returns the FallbackUrl field if non-nil, zero value otherwise.
func (o *UserActivity) GetFallbackUrl() string {
	if o == nil || o.FallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.FallbackUrl
}

// GetFallbackUrlOk returns a tuple with the FallbackUrl field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetFallbackUrlOk() (string, bool) {
	if o == nil || o.FallbackUrl == nil {
		var ret string
		return ret, false
	}
	return *o.FallbackUrl, true
}

// HasFallbackUrl returns a boolean if a field has been set.
func (o *UserActivity) HasFallbackUrl() bool {
	if o != nil && o.FallbackUrl != nil {
		return true
	}

	return false
}

// SetFallbackUrl gets a reference to the given string and assigns it to the FallbackUrl field.
func (o *UserActivity) SetFallbackUrl(v string) {
	o.FallbackUrl = &v
}

// SetFallbackUrlExplicitNull (un)sets FallbackUrl to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FallbackUrl value is set to nil even if false is passed
func (o *UserActivity) SetFallbackUrlExplicitNull(b bool) {
	o.FallbackUrl = nil
	o.isExplicitNullFallbackUrl = b
}
// GetLastModifiedDateTime returns the LastModifiedDateTime field if non-nil, zero value otherwise.
func (o *UserActivity) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetLastModifiedDateTimeOk() (time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *UserActivity) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *UserActivity) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// SetLastModifiedDateTimeExplicitNull (un)sets LastModifiedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LastModifiedDateTime value is set to nil even if false is passed
func (o *UserActivity) SetLastModifiedDateTimeExplicitNull(b bool) {
	o.LastModifiedDateTime = nil
	o.isExplicitNullLastModifiedDateTime = b
}
// GetUserTimezone returns the UserTimezone field if non-nil, zero value otherwise.
func (o *UserActivity) GetUserTimezone() string {
	if o == nil || o.UserTimezone == nil {
		var ret string
		return ret
	}
	return *o.UserTimezone
}

// GetUserTimezoneOk returns a tuple with the UserTimezone field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetUserTimezoneOk() (string, bool) {
	if o == nil || o.UserTimezone == nil {
		var ret string
		return ret, false
	}
	return *o.UserTimezone, true
}

// HasUserTimezone returns a boolean if a field has been set.
func (o *UserActivity) HasUserTimezone() bool {
	if o != nil && o.UserTimezone != nil {
		return true
	}

	return false
}

// SetUserTimezone gets a reference to the given string and assigns it to the UserTimezone field.
func (o *UserActivity) SetUserTimezone(v string) {
	o.UserTimezone = &v
}

// SetUserTimezoneExplicitNull (un)sets UserTimezone to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The UserTimezone value is set to nil even if false is passed
func (o *UserActivity) SetUserTimezoneExplicitNull(b bool) {
	o.UserTimezone = nil
	o.isExplicitNullUserTimezone = b
}
// GetContentInfo returns the ContentInfo field if non-nil, zero value otherwise.
func (o *UserActivity) GetContentInfo() AnyOfobject {
	if o == nil || o.ContentInfo == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.ContentInfo
}

// GetContentInfoOk returns a tuple with the ContentInfo field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetContentInfoOk() (AnyOfobject, bool) {
	if o == nil || o.ContentInfo == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.ContentInfo, true
}

// HasContentInfo returns a boolean if a field has been set.
func (o *UserActivity) HasContentInfo() bool {
	if o != nil && o.ContentInfo != nil {
		return true
	}

	return false
}

// SetContentInfo gets a reference to the given AnyOfobject and assigns it to the ContentInfo field.
func (o *UserActivity) SetContentInfo(v AnyOfobject) {
	o.ContentInfo = &v
}

// SetContentInfoExplicitNull (un)sets ContentInfo to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The ContentInfo value is set to nil even if false is passed
func (o *UserActivity) SetContentInfoExplicitNull(b bool) {
	o.ContentInfo = nil
	o.isExplicitNullContentInfo = b
}
// GetStatus returns the Status field if non-nil, zero value otherwise.
func (o *UserActivity) GetStatus() AnyOfmicrosoftGraphStatus {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetStatusOk() (AnyOfmicrosoftGraphStatus, bool) {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphStatus
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserActivity) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphStatus and assigns it to the Status field.
func (o *UserActivity) SetStatus(v AnyOfmicrosoftGraphStatus) {
	o.Status = &v
}

// SetStatusExplicitNull (un)sets Status to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Status value is set to nil even if false is passed
func (o *UserActivity) SetStatusExplicitNull(b bool) {
	o.Status = nil
	o.isExplicitNullStatus = b
}
// GetHistoryItems returns the HistoryItems field if non-nil, zero value otherwise.
func (o *UserActivity) GetHistoryItems() []MicrosoftGraphActivityHistoryItem {
	if o == nil || o.HistoryItems == nil {
		var ret []MicrosoftGraphActivityHistoryItem
		return ret
	}
	return *o.HistoryItems
}

// GetHistoryItemsOk returns a tuple with the HistoryItems field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UserActivity) GetHistoryItemsOk() ([]MicrosoftGraphActivityHistoryItem, bool) {
	if o == nil || o.HistoryItems == nil {
		var ret []MicrosoftGraphActivityHistoryItem
		return ret, false
	}
	return *o.HistoryItems, true
}

// HasHistoryItems returns a boolean if a field has been set.
func (o *UserActivity) HasHistoryItems() bool {
	if o != nil && o.HistoryItems != nil {
		return true
	}

	return false
}

// SetHistoryItems gets a reference to the given []MicrosoftGraphActivityHistoryItem and assigns it to the HistoryItems field.
func (o *UserActivity) SetHistoryItems(v []MicrosoftGraphActivityHistoryItem) {
	o.HistoryItems = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o UserActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VisualElements != nil {
		toSerialize["visualElements"] = o.VisualElements
	}
	if o.ActivitySourceHost != nil {
		toSerialize["activitySourceHost"] = o.ActivitySourceHost
	}
	if o.ActivationUrl != nil {
		toSerialize["activationUrl"] = o.ActivationUrl
	}
	if o.AppActivityId != nil {
		toSerialize["appActivityId"] = o.AppActivityId
	}
	if o.AppDisplayName == nil {
		if o.isExplicitNullAppDisplayName {
			toSerialize["appDisplayName"] = o.AppDisplayName
		}
	} else {
		toSerialize["appDisplayName"] = o.AppDisplayName
	}
	if o.ContentUrl == nil {
		if o.isExplicitNullContentUrl {
			toSerialize["contentUrl"] = o.ContentUrl
		}
	} else {
		toSerialize["contentUrl"] = o.ContentUrl
	}
	if o.CreatedDateTime == nil {
		if o.isExplicitNullCreatedDateTime {
			toSerialize["createdDateTime"] = o.CreatedDateTime
		}
	} else {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.ExpirationDateTime == nil {
		if o.isExplicitNullExpirationDateTime {
			toSerialize["expirationDateTime"] = o.ExpirationDateTime
		}
	} else {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if o.FallbackUrl == nil {
		if o.isExplicitNullFallbackUrl {
			toSerialize["fallbackUrl"] = o.FallbackUrl
		}
	} else {
		toSerialize["fallbackUrl"] = o.FallbackUrl
	}
	if o.LastModifiedDateTime == nil {
		if o.isExplicitNullLastModifiedDateTime {
			toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
		}
	} else {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.UserTimezone == nil {
		if o.isExplicitNullUserTimezone {
			toSerialize["userTimezone"] = o.UserTimezone
		}
	} else {
		toSerialize["userTimezone"] = o.UserTimezone
	}
	if o.ContentInfo == nil {
		if o.isExplicitNullContentInfo {
			toSerialize["contentInfo"] = o.ContentInfo
		}
	} else {
		toSerialize["contentInfo"] = o.ContentInfo
	}
	if o.Status == nil {
		if o.isExplicitNullStatus {
			toSerialize["status"] = o.Status
		}
	} else {
		toSerialize["status"] = o.Status
	}
	if o.HistoryItems != nil {
		toSerialize["historyItems"] = o.HistoryItems
	}
	return json.Marshal(toSerialize)
}


