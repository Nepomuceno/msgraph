/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphRecurrencePattern struct for MicrosoftGraphRecurrencePattern
type MicrosoftGraphRecurrencePattern struct {
	Type *AnyOfmicrosoftGraphRecurrencePatternType `json:"type,omitempty"`
	isExplicitNullType bool `json:"-"`
	Interval *int32 `json:"interval,omitempty"`

	Month *int32 `json:"month,omitempty"`

	DayOfMonth *int32 `json:"dayOfMonth,omitempty"`

	DaysOfWeek *[]AnyOfmicrosoftGraphDayOfWeek `json:"daysOfWeek,omitempty"`

	FirstDayOfWeek *AnyOfmicrosoftGraphDayOfWeek `json:"firstDayOfWeek,omitempty"`
	isExplicitNullFirstDayOfWeek bool `json:"-"`
	Index *AnyOfmicrosoftGraphWeekIndex `json:"index,omitempty"`
	isExplicitNullIndex bool `json:"-"`
}

// GetType returns the Type field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetType() AnyOfmicrosoftGraphRecurrencePatternType {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphRecurrencePatternType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetTypeOk() (AnyOfmicrosoftGraphRecurrencePatternType, bool) {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphRecurrencePatternType
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphRecurrencePatternType and assigns it to the Type field.
func (o *MicrosoftGraphRecurrencePattern) SetType(v AnyOfmicrosoftGraphRecurrencePatternType) {
	o.Type = &v
}

// SetTypeExplicitNull (un)sets Type to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Type value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrencePattern) SetTypeExplicitNull(b bool) {
	o.Type = nil
	o.isExplicitNullType = b
}
// GetInterval returns the Interval field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetInterval() int32 {
	if o == nil || o.Interval == nil {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetIntervalOk() (int32, bool) {
	if o == nil || o.Interval == nil {
		var ret int32
		return ret, false
	}
	return *o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *MicrosoftGraphRecurrencePattern) SetInterval(v int32) {
	o.Interval = &v
}

// GetMonth returns the Month field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetMonth() int32 {
	if o == nil || o.Month == nil {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetMonthOk() (int32, bool) {
	if o == nil || o.Month == nil {
		var ret int32
		return ret, false
	}
	return *o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MicrosoftGraphRecurrencePattern) SetMonth(v int32) {
	o.Month = &v
}

// GetDayOfMonth returns the DayOfMonth field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetDayOfMonth() int32 {
	if o == nil || o.DayOfMonth == nil {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetDayOfMonthOk() (int32, bool) {
	if o == nil || o.DayOfMonth == nil {
		var ret int32
		return ret, false
	}
	return *o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasDayOfMonth() bool {
	if o != nil && o.DayOfMonth != nil {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *MicrosoftGraphRecurrencePattern) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetDaysOfWeek returns the DaysOfWeek field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetDaysOfWeek() []AnyOfmicrosoftGraphDayOfWeek {
	if o == nil || o.DaysOfWeek == nil {
		var ret []AnyOfmicrosoftGraphDayOfWeek
		return ret
	}
	return *o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetDaysOfWeekOk() ([]AnyOfmicrosoftGraphDayOfWeek, bool) {
	if o == nil || o.DaysOfWeek == nil {
		var ret []AnyOfmicrosoftGraphDayOfWeek
		return ret, false
	}
	return *o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasDaysOfWeek() bool {
	if o != nil && o.DaysOfWeek != nil {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []AnyOfmicrosoftGraphDayOfWeek and assigns it to the DaysOfWeek field.
func (o *MicrosoftGraphRecurrencePattern) SetDaysOfWeek(v []AnyOfmicrosoftGraphDayOfWeek) {
	o.DaysOfWeek = &v
}

// GetFirstDayOfWeek returns the FirstDayOfWeek field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetFirstDayOfWeek() AnyOfmicrosoftGraphDayOfWeek {
	if o == nil || o.FirstDayOfWeek == nil {
		var ret AnyOfmicrosoftGraphDayOfWeek
		return ret
	}
	return *o.FirstDayOfWeek
}

// GetFirstDayOfWeekOk returns a tuple with the FirstDayOfWeek field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetFirstDayOfWeekOk() (AnyOfmicrosoftGraphDayOfWeek, bool) {
	if o == nil || o.FirstDayOfWeek == nil {
		var ret AnyOfmicrosoftGraphDayOfWeek
		return ret, false
	}
	return *o.FirstDayOfWeek, true
}

// HasFirstDayOfWeek returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasFirstDayOfWeek() bool {
	if o != nil && o.FirstDayOfWeek != nil {
		return true
	}

	return false
}

// SetFirstDayOfWeek gets a reference to the given AnyOfmicrosoftGraphDayOfWeek and assigns it to the FirstDayOfWeek field.
func (o *MicrosoftGraphRecurrencePattern) SetFirstDayOfWeek(v AnyOfmicrosoftGraphDayOfWeek) {
	o.FirstDayOfWeek = &v
}

// SetFirstDayOfWeekExplicitNull (un)sets FirstDayOfWeek to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The FirstDayOfWeek value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrencePattern) SetFirstDayOfWeekExplicitNull(b bool) {
	o.FirstDayOfWeek = nil
	o.isExplicitNullFirstDayOfWeek = b
}
// GetIndex returns the Index field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetIndex() AnyOfmicrosoftGraphWeekIndex {
	if o == nil || o.Index == nil {
		var ret AnyOfmicrosoftGraphWeekIndex
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetIndexOk() (AnyOfmicrosoftGraphWeekIndex, bool) {
	if o == nil || o.Index == nil {
		var ret AnyOfmicrosoftGraphWeekIndex
		return ret, false
	}
	return *o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given AnyOfmicrosoftGraphWeekIndex and assigns it to the Index field.
func (o *MicrosoftGraphRecurrencePattern) SetIndex(v AnyOfmicrosoftGraphWeekIndex) {
	o.Index = &v
}

// SetIndexExplicitNull (un)sets Index to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Index value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrencePattern) SetIndexExplicitNull(b bool) {
	o.Index = nil
	o.isExplicitNullIndex = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphRecurrencePattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type == nil {
		if o.isExplicitNullType {
			toSerialize["type"] = o.Type
		}
	} else {
		toSerialize["type"] = o.Type
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.DayOfMonth != nil {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if o.DaysOfWeek != nil {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	if o.FirstDayOfWeek == nil {
		if o.isExplicitNullFirstDayOfWeek {
			toSerialize["firstDayOfWeek"] = o.FirstDayOfWeek
		}
	} else {
		toSerialize["firstDayOfWeek"] = o.FirstDayOfWeek
	}
	if o.Index == nil {
		if o.isExplicitNullIndex {
			toSerialize["index"] = o.Index
		}
	} else {
		toSerialize["index"] = o.Index
	}
	return json.Marshal(toSerialize)
}


