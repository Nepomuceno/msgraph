/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// DeviceConfigurationState Device Configuration State for a given device.
type DeviceConfigurationState struct {
	SettingStates *[]AnyOfmicrosoftGraphDeviceConfigurationSettingState `json:"settingStates,omitempty"`

	// The name of the policy for this policyBase
	DisplayName *string `json:"displayName,omitempty"`
	isExplicitNullDisplayName bool `json:"-"`
	// The version of the policy
	Version *int32 `json:"version,omitempty"`

	// Platform type that the policy applies to
	PlatformType *AnyOfmicrosoftGraphPolicyPlatformType `json:"platformType,omitempty"`

	// The compliance state of the policy
	State *AnyOfmicrosoftGraphComplianceStatus `json:"state,omitempty"`

	// Count of how many setting a policy holds
	SettingCount *int32 `json:"settingCount,omitempty"`

}

// GetSettingStates returns the SettingStates field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetSettingStates() []AnyOfmicrosoftGraphDeviceConfigurationSettingState {
	if o == nil || o.SettingStates == nil {
		var ret []AnyOfmicrosoftGraphDeviceConfigurationSettingState
		return ret
	}
	return *o.SettingStates
}

// GetSettingStatesOk returns a tuple with the SettingStates field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetSettingStatesOk() ([]AnyOfmicrosoftGraphDeviceConfigurationSettingState, bool) {
	if o == nil || o.SettingStates == nil {
		var ret []AnyOfmicrosoftGraphDeviceConfigurationSettingState
		return ret, false
	}
	return *o.SettingStates, true
}

// HasSettingStates returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasSettingStates() bool {
	if o != nil && o.SettingStates != nil {
		return true
	}

	return false
}

// SetSettingStates gets a reference to the given []AnyOfmicrosoftGraphDeviceConfigurationSettingState and assigns it to the SettingStates field.
func (o *DeviceConfigurationState) SetSettingStates(v []AnyOfmicrosoftGraphDeviceConfigurationSettingState) {
	o.SettingStates = &v
}

// GetDisplayName returns the DisplayName field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DeviceConfigurationState) SetDisplayName(v string) {
	o.DisplayName = &v
}

// SetDisplayNameExplicitNull (un)sets DisplayName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The DisplayName value is set to nil even if false is passed
func (o *DeviceConfigurationState) SetDisplayNameExplicitNull(b bool) {
	o.DisplayName = nil
	o.isExplicitNullDisplayName = b
}
// GetVersion returns the Version field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetVersionOk() (int32, bool) {
	if o == nil || o.Version == nil {
		var ret int32
		return ret, false
	}
	return *o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *DeviceConfigurationState) SetVersion(v int32) {
	o.Version = &v
}

// GetPlatformType returns the PlatformType field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetPlatformType() AnyOfmicrosoftGraphPolicyPlatformType {
	if o == nil || o.PlatformType == nil {
		var ret AnyOfmicrosoftGraphPolicyPlatformType
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetPlatformTypeOk() (AnyOfmicrosoftGraphPolicyPlatformType, bool) {
	if o == nil || o.PlatformType == nil {
		var ret AnyOfmicrosoftGraphPolicyPlatformType
		return ret, false
	}
	return *o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasPlatformType() bool {
	if o != nil && o.PlatformType != nil {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given AnyOfmicrosoftGraphPolicyPlatformType and assigns it to the PlatformType field.
func (o *DeviceConfigurationState) SetPlatformType(v AnyOfmicrosoftGraphPolicyPlatformType) {
	o.PlatformType = &v
}

// GetState returns the State field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetState() AnyOfmicrosoftGraphComplianceStatus {
	if o == nil || o.State == nil {
		var ret AnyOfmicrosoftGraphComplianceStatus
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetStateOk() (AnyOfmicrosoftGraphComplianceStatus, bool) {
	if o == nil || o.State == nil {
		var ret AnyOfmicrosoftGraphComplianceStatus
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given AnyOfmicrosoftGraphComplianceStatus and assigns it to the State field.
func (o *DeviceConfigurationState) SetState(v AnyOfmicrosoftGraphComplianceStatus) {
	o.State = &v
}

// GetSettingCount returns the SettingCount field if non-nil, zero value otherwise.
func (o *DeviceConfigurationState) GetSettingCount() int32 {
	if o == nil || o.SettingCount == nil {
		var ret int32
		return ret
	}
	return *o.SettingCount
}

// GetSettingCountOk returns a tuple with the SettingCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationState) GetSettingCountOk() (int32, bool) {
	if o == nil || o.SettingCount == nil {
		var ret int32
		return ret, false
	}
	return *o.SettingCount, true
}

// HasSettingCount returns a boolean if a field has been set.
func (o *DeviceConfigurationState) HasSettingCount() bool {
	if o != nil && o.SettingCount != nil {
		return true
	}

	return false
}

// SetSettingCount gets a reference to the given int32 and assigns it to the SettingCount field.
func (o *DeviceConfigurationState) SetSettingCount(v int32) {
	o.SettingCount = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o DeviceConfigurationState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SettingStates != nil {
		toSerialize["settingStates"] = o.SettingStates
	}
	if o.DisplayName == nil {
		if o.isExplicitNullDisplayName {
			toSerialize["displayName"] = o.DisplayName
		}
	} else {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.PlatformType != nil {
		toSerialize["platformType"] = o.PlatformType
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SettingCount != nil {
		toSerialize["settingCount"] = o.SettingCount
	}
	return json.Marshal(toSerialize)
}


