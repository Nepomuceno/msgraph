/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphPhone struct for MicrosoftGraphPhone
type MicrosoftGraphPhone struct {
	Type *AnyOfmicrosoftGraphPhoneType `json:"type,omitempty"`
	isExplicitNullType bool `json:"-"`
	Number *string `json:"number,omitempty"`
	isExplicitNullNumber bool `json:"-"`
	Region *string `json:"region,omitempty"`
	isExplicitNullRegion bool `json:"-"`
	Language *string `json:"language,omitempty"`
	isExplicitNullLanguage bool `json:"-"`
}

// GetType returns the Type field if non-nil, zero value otherwise.
func (o *MicrosoftGraphPhone) GetType() AnyOfmicrosoftGraphPhoneType {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphPhoneType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPhone) GetTypeOk() (AnyOfmicrosoftGraphPhoneType, bool) {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphPhoneType
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphPhone) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphPhoneType and assigns it to the Type field.
func (o *MicrosoftGraphPhone) SetType(v AnyOfmicrosoftGraphPhoneType) {
	o.Type = &v
}

// SetTypeExplicitNull (un)sets Type to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Type value is set to nil even if false is passed
func (o *MicrosoftGraphPhone) SetTypeExplicitNull(b bool) {
	o.Type = nil
	o.isExplicitNullType = b
}
// GetNumber returns the Number field if non-nil, zero value otherwise.
func (o *MicrosoftGraphPhone) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPhone) GetNumberOk() (string, bool) {
	if o == nil || o.Number == nil {
		var ret string
		return ret, false
	}
	return *o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *MicrosoftGraphPhone) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *MicrosoftGraphPhone) SetNumber(v string) {
	o.Number = &v
}

// SetNumberExplicitNull (un)sets Number to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Number value is set to nil even if false is passed
func (o *MicrosoftGraphPhone) SetNumberExplicitNull(b bool) {
	o.Number = nil
	o.isExplicitNullNumber = b
}
// GetRegion returns the Region field if non-nil, zero value otherwise.
func (o *MicrosoftGraphPhone) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPhone) GetRegionOk() (string, bool) {
	if o == nil || o.Region == nil {
		var ret string
		return ret, false
	}
	return *o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *MicrosoftGraphPhone) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *MicrosoftGraphPhone) SetRegion(v string) {
	o.Region = &v
}

// SetRegionExplicitNull (un)sets Region to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Region value is set to nil even if false is passed
func (o *MicrosoftGraphPhone) SetRegionExplicitNull(b bool) {
	o.Region = nil
	o.isExplicitNullRegion = b
}
// GetLanguage returns the Language field if non-nil, zero value otherwise.
func (o *MicrosoftGraphPhone) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPhone) GetLanguageOk() (string, bool) {
	if o == nil || o.Language == nil {
		var ret string
		return ret, false
	}
	return *o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MicrosoftGraphPhone) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MicrosoftGraphPhone) SetLanguage(v string) {
	o.Language = &v
}

// SetLanguageExplicitNull (un)sets Language to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Language value is set to nil even if false is passed
func (o *MicrosoftGraphPhone) SetLanguageExplicitNull(b bool) {
	o.Language = nil
	o.isExplicitNullLanguage = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphPhone) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type == nil {
		if o.isExplicitNullType {
			toSerialize["type"] = o.Type
		}
	} else {
		toSerialize["type"] = o.Type
	}
	if o.Number == nil {
		if o.isExplicitNullNumber {
			toSerialize["number"] = o.Number
		}
	} else {
		toSerialize["number"] = o.Number
	}
	if o.Region == nil {
		if o.isExplicitNullRegion {
			toSerialize["region"] = o.Region
		}
	} else {
		toSerialize["region"] = o.Region
	}
	if o.Language == nil {
		if o.isExplicitNullLanguage {
			toSerialize["language"] = o.Language
		}
	} else {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}


