/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphIosVppEBookAssignment struct for MicrosoftGraphIosVppEBookAssignment
type MicrosoftGraphIosVppEBookAssignment struct {
	Id *string `json:"id,omitempty"`

	// The assignment target for eBook.
	Target *AnyOfobject `json:"target,omitempty"`
	isExplicitNullTarget bool `json:"-"`
	// The install intent for eBook.
	InstallIntent *AnyOfmicrosoftGraphInstallIntent `json:"installIntent,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *MicrosoftGraphIosVppEBookAssignment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphIosVppEBookAssignment) SetId(v string) {
	o.Id = &v
}

// GetTarget returns the Target field if non-nil, zero value otherwise.
func (o *MicrosoftGraphIosVppEBookAssignment) GetTarget() AnyOfobject {
	if o == nil || o.Target == nil {
		var ret AnyOfobject
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) GetTargetOk() (AnyOfobject, bool) {
	if o == nil || o.Target == nil {
		var ret AnyOfobject
		return ret, false
	}
	return *o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given AnyOfobject and assigns it to the Target field.
func (o *MicrosoftGraphIosVppEBookAssignment) SetTarget(v AnyOfobject) {
	o.Target = &v
}

// SetTargetExplicitNull (un)sets Target to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Target value is set to nil even if false is passed
func (o *MicrosoftGraphIosVppEBookAssignment) SetTargetExplicitNull(b bool) {
	o.Target = nil
	o.isExplicitNullTarget = b
}
// GetInstallIntent returns the InstallIntent field if non-nil, zero value otherwise.
func (o *MicrosoftGraphIosVppEBookAssignment) GetInstallIntent() AnyOfmicrosoftGraphInstallIntent {
	if o == nil || o.InstallIntent == nil {
		var ret AnyOfmicrosoftGraphInstallIntent
		return ret
	}
	return *o.InstallIntent
}

// GetInstallIntentOk returns a tuple with the InstallIntent field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) GetInstallIntentOk() (AnyOfmicrosoftGraphInstallIntent, bool) {
	if o == nil || o.InstallIntent == nil {
		var ret AnyOfmicrosoftGraphInstallIntent
		return ret, false
	}
	return *o.InstallIntent, true
}

// HasInstallIntent returns a boolean if a field has been set.
func (o *MicrosoftGraphIosVppEBookAssignment) HasInstallIntent() bool {
	if o != nil && o.InstallIntent != nil {
		return true
	}

	return false
}

// SetInstallIntent gets a reference to the given AnyOfmicrosoftGraphInstallIntent and assigns it to the InstallIntent field.
func (o *MicrosoftGraphIosVppEBookAssignment) SetInstallIntent(v AnyOfmicrosoftGraphInstallIntent) {
	o.InstallIntent = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphIosVppEBookAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Target == nil {
		if o.isExplicitNullTarget {
			toSerialize["target"] = o.Target
		}
	} else {
		toSerialize["target"] = o.Target
	}
	if o.InstallIntent != nil {
		toSerialize["installIntent"] = o.InstallIntent
	}
	return json.Marshal(toSerialize)
}


