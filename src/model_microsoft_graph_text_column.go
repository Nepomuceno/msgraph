/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphTextColumn struct for MicrosoftGraphTextColumn
type MicrosoftGraphTextColumn struct {
	AllowMultipleLines *bool `json:"allowMultipleLines,omitempty"`
	isExplicitNullAllowMultipleLines bool `json:"-"`
	AppendChangesToExistingText *bool `json:"appendChangesToExistingText,omitempty"`
	isExplicitNullAppendChangesToExistingText bool `json:"-"`
	LinesForEditing *int32 `json:"linesForEditing,omitempty"`
	isExplicitNullLinesForEditing bool `json:"-"`
	MaxLength *int32 `json:"maxLength,omitempty"`
	isExplicitNullMaxLength bool `json:"-"`
	TextType *string `json:"textType,omitempty"`
	isExplicitNullTextType bool `json:"-"`
}

// GetAllowMultipleLines returns the AllowMultipleLines field if non-nil, zero value otherwise.
func (o *MicrosoftGraphTextColumn) GetAllowMultipleLines() bool {
	if o == nil || o.AllowMultipleLines == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleLines
}

// GetAllowMultipleLinesOk returns a tuple with the AllowMultipleLines field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphTextColumn) GetAllowMultipleLinesOk() (bool, bool) {
	if o == nil || o.AllowMultipleLines == nil {
		var ret bool
		return ret, false
	}
	return *o.AllowMultipleLines, true
}

// HasAllowMultipleLines returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasAllowMultipleLines() bool {
	if o != nil && o.AllowMultipleLines != nil {
		return true
	}

	return false
}

// SetAllowMultipleLines gets a reference to the given bool and assigns it to the AllowMultipleLines field.
func (o *MicrosoftGraphTextColumn) SetAllowMultipleLines(v bool) {
	o.AllowMultipleLines = &v
}

// SetAllowMultipleLinesExplicitNull (un)sets AllowMultipleLines to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AllowMultipleLines value is set to nil even if false is passed
func (o *MicrosoftGraphTextColumn) SetAllowMultipleLinesExplicitNull(b bool) {
	o.AllowMultipleLines = nil
	o.isExplicitNullAllowMultipleLines = b
}
// GetAppendChangesToExistingText returns the AppendChangesToExistingText field if non-nil, zero value otherwise.
func (o *MicrosoftGraphTextColumn) GetAppendChangesToExistingText() bool {
	if o == nil || o.AppendChangesToExistingText == nil {
		var ret bool
		return ret
	}
	return *o.AppendChangesToExistingText
}

// GetAppendChangesToExistingTextOk returns a tuple with the AppendChangesToExistingText field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphTextColumn) GetAppendChangesToExistingTextOk() (bool, bool) {
	if o == nil || o.AppendChangesToExistingText == nil {
		var ret bool
		return ret, false
	}
	return *o.AppendChangesToExistingText, true
}

// HasAppendChangesToExistingText returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasAppendChangesToExistingText() bool {
	if o != nil && o.AppendChangesToExistingText != nil {
		return true
	}

	return false
}

// SetAppendChangesToExistingText gets a reference to the given bool and assigns it to the AppendChangesToExistingText field.
func (o *MicrosoftGraphTextColumn) SetAppendChangesToExistingText(v bool) {
	o.AppendChangesToExistingText = &v
}

// SetAppendChangesToExistingTextExplicitNull (un)sets AppendChangesToExistingText to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The AppendChangesToExistingText value is set to nil even if false is passed
func (o *MicrosoftGraphTextColumn) SetAppendChangesToExistingTextExplicitNull(b bool) {
	o.AppendChangesToExistingText = nil
	o.isExplicitNullAppendChangesToExistingText = b
}
// GetLinesForEditing returns the LinesForEditing field if non-nil, zero value otherwise.
func (o *MicrosoftGraphTextColumn) GetLinesForEditing() int32 {
	if o == nil || o.LinesForEditing == nil {
		var ret int32
		return ret
	}
	return *o.LinesForEditing
}

// GetLinesForEditingOk returns a tuple with the LinesForEditing field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphTextColumn) GetLinesForEditingOk() (int32, bool) {
	if o == nil || o.LinesForEditing == nil {
		var ret int32
		return ret, false
	}
	return *o.LinesForEditing, true
}

// HasLinesForEditing returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasLinesForEditing() bool {
	if o != nil && o.LinesForEditing != nil {
		return true
	}

	return false
}

// SetLinesForEditing gets a reference to the given int32 and assigns it to the LinesForEditing field.
func (o *MicrosoftGraphTextColumn) SetLinesForEditing(v int32) {
	o.LinesForEditing = &v
}

// SetLinesForEditingExplicitNull (un)sets LinesForEditing to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The LinesForEditing value is set to nil even if false is passed
func (o *MicrosoftGraphTextColumn) SetLinesForEditingExplicitNull(b bool) {
	o.LinesForEditing = nil
	o.isExplicitNullLinesForEditing = b
}
// GetMaxLength returns the MaxLength field if non-nil, zero value otherwise.
func (o *MicrosoftGraphTextColumn) GetMaxLength() int32 {
	if o == nil || o.MaxLength == nil {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphTextColumn) GetMaxLengthOk() (int32, bool) {
	if o == nil || o.MaxLength == nil {
		var ret int32
		return ret, false
	}
	return *o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasMaxLength() bool {
	if o != nil && o.MaxLength != nil {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *MicrosoftGraphTextColumn) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// SetMaxLengthExplicitNull (un)sets MaxLength to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The MaxLength value is set to nil even if false is passed
func (o *MicrosoftGraphTextColumn) SetMaxLengthExplicitNull(b bool) {
	o.MaxLength = nil
	o.isExplicitNullMaxLength = b
}
// GetTextType returns the TextType field if non-nil, zero value otherwise.
func (o *MicrosoftGraphTextColumn) GetTextType() string {
	if o == nil || o.TextType == nil {
		var ret string
		return ret
	}
	return *o.TextType
}

// GetTextTypeOk returns a tuple with the TextType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphTextColumn) GetTextTypeOk() (string, bool) {
	if o == nil || o.TextType == nil {
		var ret string
		return ret, false
	}
	return *o.TextType, true
}

// HasTextType returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasTextType() bool {
	if o != nil && o.TextType != nil {
		return true
	}

	return false
}

// SetTextType gets a reference to the given string and assigns it to the TextType field.
func (o *MicrosoftGraphTextColumn) SetTextType(v string) {
	o.TextType = &v
}

// SetTextTypeExplicitNull (un)sets TextType to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The TextType value is set to nil even if false is passed
func (o *MicrosoftGraphTextColumn) SetTextTypeExplicitNull(b bool) {
	o.TextType = nil
	o.isExplicitNullTextType = b
}

// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphTextColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowMultipleLines == nil {
		if o.isExplicitNullAllowMultipleLines {
			toSerialize["allowMultipleLines"] = o.AllowMultipleLines
		}
	} else {
		toSerialize["allowMultipleLines"] = o.AllowMultipleLines
	}
	if o.AppendChangesToExistingText == nil {
		if o.isExplicitNullAppendChangesToExistingText {
			toSerialize["appendChangesToExistingText"] = o.AppendChangesToExistingText
		}
	} else {
		toSerialize["appendChangesToExistingText"] = o.AppendChangesToExistingText
	}
	if o.LinesForEditing == nil {
		if o.isExplicitNullLinesForEditing {
			toSerialize["linesForEditing"] = o.LinesForEditing
		}
	} else {
		toSerialize["linesForEditing"] = o.LinesForEditing
	}
	if o.MaxLength == nil {
		if o.isExplicitNullMaxLength {
			toSerialize["maxLength"] = o.MaxLength
		}
	} else {
		toSerialize["maxLength"] = o.MaxLength
	}
	if o.TextType == nil {
		if o.isExplicitNullTextType {
			toSerialize["textType"] = o.TextType
		}
	} else {
		toSerialize["textType"] = o.TextType
	}
	return json.Marshal(toSerialize)
}


