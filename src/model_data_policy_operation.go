/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"time"
	"encoding/json"
)
// DataPolicyOperation struct for DataPolicyOperation
type DataPolicyOperation struct {
	CompletedDateTime *time.Time `json:"completedDateTime,omitempty"`
	isExplicitNullCompletedDateTime bool `json:"-"`
	Status *AnyOfmicrosoftGraphDataPolicyOperationStatus `json:"status,omitempty"`
	isExplicitNullStatus bool `json:"-"`
	StorageLocation *string `json:"storageLocation,omitempty"`
	isExplicitNullStorageLocation bool `json:"-"`
	UserId *string `json:"userId,omitempty"`

	SubmittedDateTime *time.Time `json:"submittedDateTime,omitempty"`

	Progress *AnyOfnumberstringstring `json:"progress,omitempty"`

}

// GetCompletedDateTime returns the CompletedDateTime field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetCompletedDateTime() time.Time {
	if o == nil || o.CompletedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedDateTime
}

// GetCompletedDateTimeOk returns a tuple with the CompletedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetCompletedDateTimeOk() (time.Time, bool) {
	if o == nil || o.CompletedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CompletedDateTime, true
}

// HasCompletedDateTime returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasCompletedDateTime() bool {
	if o != nil && o.CompletedDateTime != nil {
		return true
	}

	return false
}

// SetCompletedDateTime gets a reference to the given time.Time and assigns it to the CompletedDateTime field.
func (o *DataPolicyOperation) SetCompletedDateTime(v time.Time) {
	o.CompletedDateTime = &v
}

// SetCompletedDateTimeExplicitNull (un)sets CompletedDateTime to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CompletedDateTime value is set to nil even if false is passed
func (o *DataPolicyOperation) SetCompletedDateTimeExplicitNull(b bool) {
	o.CompletedDateTime = nil
	o.isExplicitNullCompletedDateTime = b
}
// GetStatus returns the Status field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetStatus() AnyOfmicrosoftGraphDataPolicyOperationStatus {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphDataPolicyOperationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetStatusOk() (AnyOfmicrosoftGraphDataPolicyOperationStatus, bool) {
	if o == nil || o.Status == nil {
		var ret AnyOfmicrosoftGraphDataPolicyOperationStatus
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphDataPolicyOperationStatus and assigns it to the Status field.
func (o *DataPolicyOperation) SetStatus(v AnyOfmicrosoftGraphDataPolicyOperationStatus) {
	o.Status = &v
}

// SetStatusExplicitNull (un)sets Status to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Status value is set to nil even if false is passed
func (o *DataPolicyOperation) SetStatusExplicitNull(b bool) {
	o.Status = nil
	o.isExplicitNullStatus = b
}
// GetStorageLocation returns the StorageLocation field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetStorageLocation() string {
	if o == nil || o.StorageLocation == nil {
		var ret string
		return ret
	}
	return *o.StorageLocation
}

// GetStorageLocationOk returns a tuple with the StorageLocation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetStorageLocationOk() (string, bool) {
	if o == nil || o.StorageLocation == nil {
		var ret string
		return ret, false
	}
	return *o.StorageLocation, true
}

// HasStorageLocation returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasStorageLocation() bool {
	if o != nil && o.StorageLocation != nil {
		return true
	}

	return false
}

// SetStorageLocation gets a reference to the given string and assigns it to the StorageLocation field.
func (o *DataPolicyOperation) SetStorageLocation(v string) {
	o.StorageLocation = &v
}

// SetStorageLocationExplicitNull (un)sets StorageLocation to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The StorageLocation value is set to nil even if false is passed
func (o *DataPolicyOperation) SetStorageLocationExplicitNull(b bool) {
	o.StorageLocation = nil
	o.isExplicitNullStorageLocation = b
}
// GetUserId returns the UserId field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetUserIdOk() (string, bool) {
	if o == nil || o.UserId == nil {
		var ret string
		return ret, false
	}
	return *o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DataPolicyOperation) SetUserId(v string) {
	o.UserId = &v
}

// GetSubmittedDateTime returns the SubmittedDateTime field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetSubmittedDateTime() time.Time {
	if o == nil || o.SubmittedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.SubmittedDateTime
}

// GetSubmittedDateTimeOk returns a tuple with the SubmittedDateTime field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetSubmittedDateTimeOk() (time.Time, bool) {
	if o == nil || o.SubmittedDateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.SubmittedDateTime, true
}

// HasSubmittedDateTime returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasSubmittedDateTime() bool {
	if o != nil && o.SubmittedDateTime != nil {
		return true
	}

	return false
}

// SetSubmittedDateTime gets a reference to the given time.Time and assigns it to the SubmittedDateTime field.
func (o *DataPolicyOperation) SetSubmittedDateTime(v time.Time) {
	o.SubmittedDateTime = &v
}

// GetProgress returns the Progress field if non-nil, zero value otherwise.
func (o *DataPolicyOperation) GetProgress() AnyOfnumberstringstring {
	if o == nil || o.Progress == nil {
		var ret AnyOfnumberstringstring
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetProgressOk() (AnyOfnumberstringstring, bool) {
	if o == nil || o.Progress == nil {
		var ret AnyOfnumberstringstring
		return ret, false
	}
	return *o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given AnyOfnumberstringstring and assigns it to the Progress field.
func (o *DataPolicyOperation) SetProgress(v AnyOfnumberstringstring) {
	o.Progress = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o DataPolicyOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompletedDateTime == nil {
		if o.isExplicitNullCompletedDateTime {
			toSerialize["completedDateTime"] = o.CompletedDateTime
		}
	} else {
		toSerialize["completedDateTime"] = o.CompletedDateTime
	}
	if o.Status == nil {
		if o.isExplicitNullStatus {
			toSerialize["status"] = o.Status
		}
	} else {
		toSerialize["status"] = o.Status
	}
	if o.StorageLocation == nil {
		if o.isExplicitNullStorageLocation {
			toSerialize["storageLocation"] = o.StorageLocation
		}
	} else {
		toSerialize["storageLocation"] = o.StorageLocation
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.SubmittedDateTime != nil {
		toSerialize["submittedDateTime"] = o.SubmittedDateTime
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}


