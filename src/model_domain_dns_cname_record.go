/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// DomainDnsCnameRecord struct for DomainDnsCnameRecord
type DomainDnsCnameRecord struct {
	CanonicalName *string `json:"canonicalName,omitempty"`
	isExplicitNullCanonicalName bool `json:"-"`
}

// GetCanonicalName returns the CanonicalName field if non-nil, zero value otherwise.
func (o *DomainDnsCnameRecord) GetCanonicalName() string {
	if o == nil || o.CanonicalName == nil {
		var ret string
		return ret
	}
	return *o.CanonicalName
}

// GetCanonicalNameOk returns a tuple with the CanonicalName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DomainDnsCnameRecord) GetCanonicalNameOk() (string, bool) {
	if o == nil || o.CanonicalName == nil {
		var ret string
		return ret, false
	}
	return *o.CanonicalName, true
}

// HasCanonicalName returns a boolean if a field has been set.
func (o *DomainDnsCnameRecord) HasCanonicalName() bool {
	if o != nil && o.CanonicalName != nil {
		return true
	}

	return false
}

// SetCanonicalName gets a reference to the given string and assigns it to the CanonicalName field.
func (o *DomainDnsCnameRecord) SetCanonicalName(v string) {
	o.CanonicalName = &v
}

// SetCanonicalNameExplicitNull (un)sets CanonicalName to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The CanonicalName value is set to nil even if false is passed
func (o *DomainDnsCnameRecord) SetCanonicalNameExplicitNull(b bool) {
	o.CanonicalName = nil
	o.isExplicitNullCanonicalName = b
}

// MarshalJSON returns the JSON representation of the model.
func (o DomainDnsCnameRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanonicalName == nil {
		if o.isExplicitNullCanonicalName {
			toSerialize["canonicalName"] = o.CanonicalName
		}
	} else {
		toSerialize["canonicalName"] = o.CanonicalName
	}
	return json.Marshal(toSerialize)
}


