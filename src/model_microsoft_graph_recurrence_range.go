/*
 * OData Service for namespace microsoft.graph
 *
 * This OData service is located at https://graph.microsoft.com/v1.0/
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package msgraph
import (
	"encoding/json"
)
// MicrosoftGraphRecurrenceRange struct for MicrosoftGraphRecurrenceRange
type MicrosoftGraphRecurrenceRange struct {
	Type *AnyOfmicrosoftGraphRecurrenceRangeType `json:"type,omitempty"`
	isExplicitNullType bool `json:"-"`
	StartDate *string `json:"startDate,omitempty"`
	isExplicitNullStartDate bool `json:"-"`
	EndDate *string `json:"endDate,omitempty"`
	isExplicitNullEndDate bool `json:"-"`
	RecurrenceTimeZone *string `json:"recurrenceTimeZone,omitempty"`
	isExplicitNullRecurrenceTimeZone bool `json:"-"`
	NumberOfOccurrences *int32 `json:"numberOfOccurrences,omitempty"`

}

// GetType returns the Type field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrenceRange) GetType() AnyOfmicrosoftGraphRecurrenceRangeType {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphRecurrenceRangeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrenceRange) GetTypeOk() (AnyOfmicrosoftGraphRecurrenceRangeType, bool) {
	if o == nil || o.Type == nil {
		var ret AnyOfmicrosoftGraphRecurrenceRangeType
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrenceRange) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphRecurrenceRangeType and assigns it to the Type field.
func (o *MicrosoftGraphRecurrenceRange) SetType(v AnyOfmicrosoftGraphRecurrenceRangeType) {
	o.Type = &v
}

// SetTypeExplicitNull (un)sets Type to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The Type value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrenceRange) SetTypeExplicitNull(b bool) {
	o.Type = nil
	o.isExplicitNullType = b
}
// GetStartDate returns the StartDate field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrenceRange) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrenceRange) GetStartDateOk() (string, bool) {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrenceRange) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *MicrosoftGraphRecurrenceRange) SetStartDate(v string) {
	o.StartDate = &v
}

// SetStartDateExplicitNull (un)sets StartDate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The StartDate value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrenceRange) SetStartDateExplicitNull(b bool) {
	o.StartDate = nil
	o.isExplicitNullStartDate = b
}
// GetEndDate returns the EndDate field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrenceRange) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrenceRange) GetEndDateOk() (string, bool) {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrenceRange) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *MicrosoftGraphRecurrenceRange) SetEndDate(v string) {
	o.EndDate = &v
}

// SetEndDateExplicitNull (un)sets EndDate to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The EndDate value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrenceRange) SetEndDateExplicitNull(b bool) {
	o.EndDate = nil
	o.isExplicitNullEndDate = b
}
// GetRecurrenceTimeZone returns the RecurrenceTimeZone field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrenceRange) GetRecurrenceTimeZone() string {
	if o == nil || o.RecurrenceTimeZone == nil {
		var ret string
		return ret
	}
	return *o.RecurrenceTimeZone
}

// GetRecurrenceTimeZoneOk returns a tuple with the RecurrenceTimeZone field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrenceRange) GetRecurrenceTimeZoneOk() (string, bool) {
	if o == nil || o.RecurrenceTimeZone == nil {
		var ret string
		return ret, false
	}
	return *o.RecurrenceTimeZone, true
}

// HasRecurrenceTimeZone returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrenceRange) HasRecurrenceTimeZone() bool {
	if o != nil && o.RecurrenceTimeZone != nil {
		return true
	}

	return false
}

// SetRecurrenceTimeZone gets a reference to the given string and assigns it to the RecurrenceTimeZone field.
func (o *MicrosoftGraphRecurrenceRange) SetRecurrenceTimeZone(v string) {
	o.RecurrenceTimeZone = &v
}

// SetRecurrenceTimeZoneExplicitNull (un)sets RecurrenceTimeZone to be considered as explicit "null" value
// when serializing to JSON (pass true as argument to set this, false to unset)
// The RecurrenceTimeZone value is set to nil even if false is passed
func (o *MicrosoftGraphRecurrenceRange) SetRecurrenceTimeZoneExplicitNull(b bool) {
	o.RecurrenceTimeZone = nil
	o.isExplicitNullRecurrenceTimeZone = b
}
// GetNumberOfOccurrences returns the NumberOfOccurrences field if non-nil, zero value otherwise.
func (o *MicrosoftGraphRecurrenceRange) GetNumberOfOccurrences() int32 {
	if o == nil || o.NumberOfOccurrences == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfOccurrences
}

// GetNumberOfOccurrencesOk returns a tuple with the NumberOfOccurrences field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrenceRange) GetNumberOfOccurrencesOk() (int32, bool) {
	if o == nil || o.NumberOfOccurrences == nil {
		var ret int32
		return ret, false
	}
	return *o.NumberOfOccurrences, true
}

// HasNumberOfOccurrences returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrenceRange) HasNumberOfOccurrences() bool {
	if o != nil && o.NumberOfOccurrences != nil {
		return true
	}

	return false
}

// SetNumberOfOccurrences gets a reference to the given int32 and assigns it to the NumberOfOccurrences field.
func (o *MicrosoftGraphRecurrenceRange) SetNumberOfOccurrences(v int32) {
	o.NumberOfOccurrences = &v
}


// MarshalJSON returns the JSON representation of the model.
func (o MicrosoftGraphRecurrenceRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type == nil {
		if o.isExplicitNullType {
			toSerialize["type"] = o.Type
		}
	} else {
		toSerialize["type"] = o.Type
	}
	if o.StartDate == nil {
		if o.isExplicitNullStartDate {
			toSerialize["startDate"] = o.StartDate
		}
	} else {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate == nil {
		if o.isExplicitNullEndDate {
			toSerialize["endDate"] = o.EndDate
		}
	} else {
		toSerialize["endDate"] = o.EndDate
	}
	if o.RecurrenceTimeZone == nil {
		if o.isExplicitNullRecurrenceTimeZone {
			toSerialize["recurrenceTimeZone"] = o.RecurrenceTimeZone
		}
	} else {
		toSerialize["recurrenceTimeZone"] = o.RecurrenceTimeZone
	}
	if o.NumberOfOccurrences != nil {
		toSerialize["numberOfOccurrences"] = o.NumberOfOccurrences
	}
	return json.Marshal(toSerialize)
}


